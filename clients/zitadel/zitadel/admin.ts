/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Duration } from "../google/protobuf/duration";
import { Timestamp } from "../google/protobuf/timestamp";
import { AggregateType, Event, EventType } from "./event";
import {
  AzureADTenant,
  IDP,
  IDPFieldName,
  iDPFieldNameFromJSON,
  iDPFieldNameToJSON,
  IDPIDQuery,
  IDPLoginPolicyLink,
  IDPNameQuery,
  IDPStylingType,
  iDPStylingTypeFromJSON,
  iDPStylingTypeToJSON,
  IDPUserLink,
  LDAPAttributes,
  OIDCMappingField,
  oIDCMappingFieldFromJSON,
  oIDCMappingFieldToJSON,
  Options,
  Provider,
} from "./idp";
import {
  Domain,
  DomainFieldName,
  domainFieldNameFromJSON,
  domainFieldNameToJSON,
  DomainSearchQuery,
  InstanceDetail,
} from "./instance";
import {
  AddCustomLabelPolicyRequest,
  AddCustomLockoutPolicyRequest,
  AddCustomLoginPolicyRequest,
  AddCustomPasswordComplexityPolicyRequest,
  AddCustomPrivacyPolicyRequest,
  AddOrgMemberRequest,
  AddOrgRequest,
  AddProjectGrantMemberRequest,
  AddProjectMemberRequest,
  AddProjectRoleRequest,
  AddUserGrantRequest,
  SetCustomDomainClaimedMessageTextRequest,
  SetCustomInitMessageTextRequest,
  SetCustomLoginTextsRequest as SetCustomLoginTextsRequest2,
  SetCustomPasswordlessRegistrationMessageTextRequest,
  SetCustomPasswordResetMessageTextRequest,
  SetCustomVerifyEmailMessageTextRequest,
  SetCustomVerifyPhoneMessageTextRequest,
  SetTriggerActionsRequest,
  SetUserMetadataRequest,
} from "./management";
import { Member, SearchQuery } from "./member";
import { ListDetails, ListQuery, ObjectDetails } from "./object";
import { Domain as Domain3, Org, OrgFieldName, orgFieldNameFromJSON, orgFieldNameToJSON, OrgQuery } from "./org";
import {
  DomainPolicy,
  LabelPolicy,
  LockoutPolicy,
  LoginPolicy,
  MultiFactorType,
  multiFactorTypeFromJSON,
  multiFactorTypeToJSON,
  NotificationPolicy,
  OrgIAMPolicy,
  PasswordAgePolicy,
  PasswordComplexityPolicy,
  PasswordlessType,
  passwordlessTypeFromJSON,
  passwordlessTypeToJSON,
  PrivacyPolicy,
  SecondFactorType,
  secondFactorTypeFromJSON,
  secondFactorTypeToJSON,
} from "./policy";
import {
  DebugNotificationProvider,
  OIDCSettings,
  SecretGenerator,
  SecretGeneratorQuery,
  SecretGeneratorType,
  secretGeneratorTypeFromJSON,
  secretGeneratorTypeToJSON,
  SecurityPolicy,
  SMSProvider,
  SMTPConfig,
} from "./settings";
import {
  EmailVerificationDoneScreenText,
  EmailVerificationScreenText,
  ExternalRegistrationUserOverviewScreenText,
  ExternalUserNotFoundScreenText,
  FooterText,
  InitializeUserDoneScreenText,
  InitializeUserScreenText,
  InitMFADoneScreenText,
  InitMFAOTPScreenText,
  InitMFAPromptScreenText,
  InitMFAU2FScreenText,
  InitPasswordDoneScreenText,
  InitPasswordScreenText,
  LinkingUserDoneScreenText,
  LoginCustomText,
  LoginScreenText,
  LogoutDoneScreenText,
  MessageCustomText,
  MFAProvidersText,
  PasswordChangeDoneScreenText,
  PasswordChangeScreenText,
  PasswordlessPromptScreenText,
  PasswordlessRegistrationDoneScreenText,
  PasswordlessRegistrationScreenText,
  PasswordlessScreenText,
  PasswordResetDoneScreenText,
  PasswordScreenText,
  RegistrationOptionScreenText,
  RegistrationOrgScreenText,
  RegistrationUserScreenText,
  SelectAccountScreenText,
  SuccessLoginScreenText,
  UsernameChangeDoneScreenText,
  UsernameChangeScreenText,
  VerifyMFAOTPScreenText,
  VerifyMFAU2FScreenText,
} from "./text";
import { Gender, genderFromJSON, genderToJSON } from "./user";
import {
  DataAction,
  DataAPIApplication,
  DataAppKey,
  DataHumanUser,
  DataJWTIDP,
  DataMachineKey,
  DataMachineUser,
  DataOIDCApplication,
  DataOIDCIDP,
  DataProject,
  DataProjectGrant,
  ImportDataOrg as ImportDataOrg1,
} from "./v1";

export const protobufPackage = "zitadel.admin.v1";

/** This is an empty request */
export interface HealthzRequest {
}

/** This is an empty response */
export interface HealthzResponse {
}

/** This is an empty request */
export interface GetSupportedLanguagesRequest {
}

export interface GetSupportedLanguagesResponse {
  languages: string[];
}

export interface SetDefaultLanguageRequest {
  language: string;
}

export interface SetDefaultLanguageResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetDefaultLanguageRequest {
}

export interface GetDefaultLanguageResponse {
  language: string;
}

export interface SetDefaultOrgRequest {
  orgId: string;
}

export interface SetDefaultOrgResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetDefaultOrgRequest {
}

export interface GetDefaultOrgResponse {
  org: Org | undefined;
}

/** This is an empty request */
export interface GetMyInstanceRequest {
}

export interface GetMyInstanceResponse {
  instance: InstanceDetail | undefined;
}

export interface ListInstanceDomainsRequest {
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: DomainFieldName;
  /** criteria the client is looking for */
  queries: DomainSearchQuery[];
}

export interface ListInstanceDomainsResponse {
  details: ListDetails | undefined;
  sortingColumn: DomainFieldName;
  result: Domain[];
}

export interface ListSecretGeneratorsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SecretGeneratorQuery[];
}

export interface ListSecretGeneratorsResponse {
  details: ListDetails | undefined;
  result: SecretGenerator[];
}

export interface GetSecretGeneratorRequest {
  generatorType: SecretGeneratorType;
}

export interface GetSecretGeneratorResponse {
  secretGenerator: SecretGenerator | undefined;
}

export interface UpdateSecretGeneratorRequest {
  generatorType: SecretGeneratorType;
  length: number;
  expiry: Duration | undefined;
  includeLowerLetters: boolean;
  includeUpperLetters: boolean;
  includeDigits: boolean;
  includeSymbols: boolean;
}

export interface UpdateSecretGeneratorResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetSMTPConfigRequest {
}

export interface GetSMTPConfigResponse {
  smtpConfig: SMTPConfig | undefined;
}

export interface AddSMTPConfigRequest {
  senderAddress: string;
  senderName: string;
  tls: boolean;
  host: string;
  user: string;
  password: string;
}

export interface AddSMTPConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateSMTPConfigRequest {
  senderAddress: string;
  senderName: string;
  tls: boolean;
  host: string;
  user: string;
}

export interface UpdateSMTPConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateSMTPConfigPasswordRequest {
  password: string;
}

export interface UpdateSMTPConfigPasswordResponse {
  details: ObjectDetails | undefined;
}

/** this is an empty request */
export interface RemoveSMTPConfigRequest {
}

export interface RemoveSMTPConfigResponse {
  details: ObjectDetails | undefined;
}

export interface ListSMSProvidersRequest {
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListSMSProvidersResponse {
  details: ListDetails | undefined;
  result: SMSProvider[];
}

export interface GetSMSProviderRequest {
  id: string;
}

export interface GetSMSProviderResponse {
  config: SMSProvider | undefined;
}

export interface AddSMSProviderTwilioRequest {
  sid: string;
  token: string;
  senderNumber: string;
}

export interface AddSMSProviderTwilioResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateSMSProviderTwilioRequest {
  id: string;
  sid: string;
  senderNumber: string;
}

export interface UpdateSMSProviderTwilioResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateSMSProviderTwilioTokenRequest {
  id: string;
  token: string;
}

export interface UpdateSMSProviderTwilioTokenResponse {
  details: ObjectDetails | undefined;
}

export interface ActivateSMSProviderRequest {
  id: string;
}

export interface ActivateSMSProviderResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateSMSProviderRequest {
  id: string;
}

export interface DeactivateSMSProviderResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveSMSProviderRequest {
  id: string;
}

export interface RemoveSMSProviderResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetFileSystemNotificationProviderRequest {
}

export interface GetFileSystemNotificationProviderResponse {
  provider: DebugNotificationProvider | undefined;
}

/** This is an empty request */
export interface GetLogNotificationProviderRequest {
}

export interface GetLogNotificationProviderResponse {
  provider: DebugNotificationProvider | undefined;
}

/** This is an empty request */
export interface GetOIDCSettingsRequest {
}

export interface GetOIDCSettingsResponse {
  settings: OIDCSettings | undefined;
}

export interface AddOIDCSettingsRequest {
  accessTokenLifetime: Duration | undefined;
  idTokenLifetime: Duration | undefined;
  refreshTokenIdleExpiration: Duration | undefined;
  refreshTokenExpiration: Duration | undefined;
}

export interface AddOIDCSettingsResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOIDCSettingsRequest {
  accessTokenLifetime: Duration | undefined;
  idTokenLifetime: Duration | undefined;
  refreshTokenIdleExpiration: Duration | undefined;
  refreshTokenExpiration: Duration | undefined;
}

export interface UpdateOIDCSettingsResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetSecurityPolicyRequest {
}

export interface GetSecurityPolicyResponse {
  policy: SecurityPolicy | undefined;
}

export interface SetSecurityPolicyRequest {
  /** states if iframe embedding is enabled or disabled */
  enableIframeEmbedding: boolean;
  /** origins allowed loading ZITADEL in an iframe if enable_iframe_embedding is true */
  allowedOrigins: string[];
}

export interface SetSecurityPolicyResponse {
  details: ObjectDetails | undefined;
}

/**
 * if name or domain is already in use, org is not unique
 * at least one argument has to be provided
 */
export interface IsOrgUniqueRequest {
  name: string;
  domain: string;
}

export interface IsOrgUniqueResponse {
  isUnique: boolean;
}

export interface GetOrgByIDRequest {
  id: string;
}

export interface GetOrgByIDResponse {
  org: Org | undefined;
}

export interface ListOrgsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: OrgFieldName;
  /** criteria the client is looking for */
  queries: OrgQuery[];
}

export interface ListOrgsResponse {
  details: ListDetails | undefined;
  sortingColumn: OrgFieldName;
  result: Org[];
}

export interface SetUpOrgRequest {
  org:
    | SetUpOrgRequest_Org
    | undefined;
  /** oneof field for the user managing the organization */
  human?:
    | SetUpOrgRequest_Human
    | undefined;
  /** specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty) */
  roles: string[];
}

export interface SetUpOrgRequest_Org {
  name: string;
  domain: string;
}

export interface SetUpOrgRequest_Human {
  userName: string;
  profile: SetUpOrgRequest_Human_Profile | undefined;
  email: SetUpOrgRequest_Human_Email | undefined;
  phone: SetUpOrgRequest_Human_Phone | undefined;
  password: string;
}

export interface SetUpOrgRequest_Human_Profile {
  firstName: string;
  lastName: string;
  nickName: string;
  displayName: string;
  preferredLanguage: string;
  gender: Gender;
}

export interface SetUpOrgRequest_Human_Email {
  email: string;
  isEmailVerified: boolean;
}

export interface SetUpOrgRequest_Human_Phone {
  /** has to be a global number */
  phone: string;
  isPhoneVerified: boolean;
}

export interface SetUpOrgResponse {
  details: ObjectDetails | undefined;
  orgId: string;
  userId: string;
}

export interface RemoveOrgRequest {
  orgId: string;
}

export interface RemoveOrgResponse {
  details: ObjectDetails | undefined;
}

export interface GetIDPByIDRequest {
  id: string;
}

export interface GetIDPByIDResponse {
  idp: IDP | undefined;
}

export interface ListIDPsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: IDPFieldName;
  /** criteria the client is looking for */
  queries: IDPQuery[];
}

export interface IDPQuery {
  idpIdQuery?: IDPIDQuery | undefined;
  idpNameQuery?: IDPNameQuery | undefined;
}

export interface ListIDPsResponse {
  details: ListDetails | undefined;
  sortingColumn: IDPFieldName;
  result: IDP[];
}

export interface AddOIDCIDPRequest {
  name: string;
  stylingType: IDPStylingType;
  clientId: string;
  clientSecret: string;
  issuer: string;
  scopes: string[];
  displayNameMapping: OIDCMappingField;
  usernameMapping: OIDCMappingField;
  autoRegister: boolean;
}

export interface AddOIDCIDPResponse {
  details: ObjectDetails | undefined;
  idpId: string;
}

export interface AddJWTIDPRequest {
  name: string;
  stylingType: IDPStylingType;
  jwtEndpoint: string;
  issuer: string;
  keysEndpoint: string;
  headerName: string;
  autoRegister: boolean;
}

export interface AddJWTIDPResponse {
  details: ObjectDetails | undefined;
  idpId: string;
}

export interface UpdateIDPRequest {
  idpId: string;
  name: string;
  stylingType: IDPStylingType;
  autoRegister: boolean;
}

export interface UpdateIDPResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateIDPRequest {
  idpId: string;
}

export interface DeactivateIDPResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateIDPRequest {
  idpId: string;
}

export interface ReactivateIDPResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveIDPRequest {
  idpId: string;
}

export interface RemoveIDPResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateIDPOIDCConfigRequest {
  idpId: string;
  issuer: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  displayNameMapping: OIDCMappingField;
  usernameMapping: OIDCMappingField;
}

export interface UpdateIDPOIDCConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateIDPJWTConfigRequest {
  idpId: string;
  jwtEndpoint: string;
  issuer: string;
  keysEndpoint: string;
  headerName: string;
}

export interface UpdateIDPJWTConfigResponse {
  details: ObjectDetails | undefined;
}

export interface ListProvidersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProviderQuery[];
}

export interface ProviderQuery {
  idpIdQuery?: IDPIDQuery | undefined;
  idpNameQuery?: IDPNameQuery | undefined;
}

export interface ListProvidersResponse {
  details: ListDetails | undefined;
  result: Provider[];
}

export interface GetProviderByIDRequest {
  id: string;
}

export interface GetProviderByIDResponse {
  idp: Provider | undefined;
}

export interface AddGenericOAuthProviderRequest {
  name: string;
  clientId: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  /** identifying attribute of the user in the response of the user_endpoint */
  idAttribute: string;
  providerOptions: Options | undefined;
}

export interface AddGenericOAuthProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGenericOAuthProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  /** identifying attribute of the user in the response of the user_endpoint */
  idAttribute: string;
  providerOptions: Options | undefined;
}

export interface UpdateGenericOAuthProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGenericOIDCProviderRequest {
  name: string;
  issuer: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
  isIdTokenMapping: boolean;
}

export interface AddGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGenericOIDCProviderRequest {
  id: string;
  name: string;
  issuer: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
  isIdTokenMapping: boolean;
}

export interface UpdateGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
}

export interface MigrateGenericOIDCProviderRequest {
  id: string;
  azure?: AddAzureADProviderRequest | undefined;
  google?: AddGoogleProviderRequest | undefined;
}

export interface MigrateGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddJWTProviderRequest {
  name: string;
  issuer: string;
  jwtEndpoint: string;
  keysEndpoint: string;
  headerName: string;
  providerOptions: Options | undefined;
}

export interface AddJWTProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateJWTProviderRequest {
  id: string;
  name: string;
  issuer: string;
  jwtEndpoint: string;
  keysEndpoint: string;
  headerName: string;
  providerOptions: Options | undefined;
}

export interface UpdateJWTProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddAzureADProviderRequest {
  name: string;
  clientId: string;
  clientSecret: string;
  /** if not provided the `common` tenant will be used */
  tenant: AzureADTenant | undefined;
  emailVerified: boolean;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddAzureADProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateAzureADProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  /** if not provided the `common` tenant will be used */
  tenant: AzureADTenant | undefined;
  emailVerified: boolean;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateAzureADProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitHubProviderRequest {
  /** GitHub will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitHubProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitHubProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitHubProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitHubEnterpriseServerProviderRequest {
  clientId: string;
  name: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitHubEnterpriseServerProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitHubEnterpriseServerProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitHubEnterpriseServerProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitLabProviderRequest {
  /** GitLab will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitLabProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitLabProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitLabProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitLabSelfHostedProviderRequest {
  issuer: string;
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitLabSelfHostedProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitLabSelfHostedProviderRequest {
  id: string;
  issuer: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitLabSelfHostedProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGoogleProviderRequest {
  /** Google will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGoogleProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGoogleProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGoogleProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddLDAPProviderRequest {
  name: string;
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  bindPassword: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
  providerOptions: Options | undefined;
}

export interface AddLDAPProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateLDAPProviderRequest {
  id: string;
  name: string;
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  bindPassword: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
  providerOptions: Options | undefined;
}

export interface UpdateLDAPProviderResponse {
  details: ObjectDetails | undefined;
}

export interface DeleteProviderRequest {
  id: string;
}

export interface DeleteProviderResponse {
  details: ObjectDetails | undefined;
}

export interface GetOrgIAMPolicyRequest {
}

export interface GetOrgIAMPolicyResponse {
  policy: OrgIAMPolicy | undefined;
}

export interface UpdateOrgIAMPolicyRequest {
  userLoginMustBeDomain: boolean;
}

export interface UpdateOrgIAMPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomOrgIAMPolicyRequest {
  orgId: string;
}

export interface GetCustomOrgIAMPolicyResponse {
  policy:
    | OrgIAMPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.OrgIAMPolicy */
  isDefault: boolean;
}

export interface AddCustomOrgIAMPolicyRequest {
  orgId: string;
  /** the username has to end with the domain of its organization (uniqueness is organization based) */
  userLoginMustBeDomain: boolean;
}

export interface AddCustomOrgIAMPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomOrgIAMPolicyRequest {
  orgId: string;
  userLoginMustBeDomain: boolean;
}

export interface UpdateCustomOrgIAMPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomOrgIAMPolicyToDefaultRequest {
  orgId: string;
}

export interface ResetCustomOrgIAMPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDomainPolicyRequest {
}

export interface GetDomainPolicyResponse {
  policy: DomainPolicy | undefined;
}

export interface UpdateDomainPolicyRequest {
  userLoginMustBeDomain: boolean;
  validateOrgDomains: boolean;
  smtpSenderAddressMatchesInstanceDomain: boolean;
}

export interface UpdateDomainPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomDomainPolicyRequest {
  orgId: string;
}

export interface GetCustomDomainPolicyResponse {
  policy:
    | DomainPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.DomainPolicy */
  isDefault: boolean;
}

export interface AddCustomDomainPolicyRequest {
  orgId: string;
  /** the username has to end with the domain of its organization (uniqueness is organization based) */
  userLoginMustBeDomain: boolean;
  validateOrgDomains: boolean;
  smtpSenderAddressMatchesInstanceDomain: boolean;
}

export interface AddCustomDomainPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomDomainPolicyRequest {
  orgId: string;
  userLoginMustBeDomain: boolean;
  validateOrgDomains: boolean;
  smtpSenderAddressMatchesInstanceDomain: boolean;
}

export interface UpdateCustomDomainPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomDomainPolicyToDefaultRequest {
  orgId: string;
}

export interface ResetCustomDomainPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLabelPolicyRequest {
}

export interface GetLabelPolicyResponse {
  policy: LabelPolicy | undefined;
}

/** This is an empty request */
export interface GetPreviewLabelPolicyRequest {
}

export interface GetPreviewLabelPolicyResponse {
  policy: LabelPolicy | undefined;
}

export interface UpdateLabelPolicyRequest {
  primaryColor: string;
  hideLoginNameSuffix: boolean;
  warnColor: string;
  backgroundColor: string;
  fontColor: string;
  primaryColorDark: string;
  backgroundColorDark: string;
  warnColorDark: string;
  fontColorDark: string;
  disableWatermark: boolean;
}

export interface UpdateLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ActivateLabelPolicyRequest {
}

export interface ActivateLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyLogoRequest {
}

export interface RemoveLabelPolicyLogoResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyLogoDarkRequest {
}

export interface RemoveLabelPolicyLogoDarkResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyIconRequest {
}

export interface RemoveLabelPolicyIconResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyIconDarkRequest {
}

export interface RemoveLabelPolicyIconDarkResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyFontRequest {
}

export interface RemoveLabelPolicyFontResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLoginPolicyRequest {
}

export interface GetLoginPolicyResponse {
  policy: LoginPolicy | undefined;
}

export interface UpdateLoginPolicyRequest {
  allowUsernamePassword: boolean;
  allowRegister: boolean;
  allowExternalIdp: boolean;
  forceMfa: boolean;
  passwordlessType: PasswordlessType;
  hidePasswordReset: boolean;
  ignoreUnknownUsernames: boolean;
  defaultRedirectUri: string;
  passwordCheckLifetime: Duration | undefined;
  externalLoginCheckLifetime: Duration | undefined;
  mfaInitSkipLifetime: Duration | undefined;
  secondFactorCheckLifetime: Duration | undefined;
  multiFactorCheckLifetime:
    | Duration
    | undefined;
  /** If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success. */
  allowDomainDiscovery: boolean;
  disableLoginWithEmail: boolean;
  disableLoginWithPhone: boolean;
  forceMfaLocalOnly: boolean;
}

export interface UpdateLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ListLoginPolicyIDPsRequest {
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListLoginPolicyIDPsResponse {
  details: ListDetails | undefined;
  result: IDPLoginPolicyLink[];
}

export interface AddIDPToLoginPolicyRequest {
  idpId: string;
}

export interface AddIDPToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveIDPFromLoginPolicyRequest {
  idpId: string;
}

export interface RemoveIDPFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListLoginPolicySecondFactorsRequest {
}

export interface ListLoginPolicySecondFactorsResponse {
  details: ListDetails | undefined;
  result: SecondFactorType[];
}

export interface AddSecondFactorToLoginPolicyRequest {
  type: SecondFactorType;
}

export interface AddSecondFactorToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveSecondFactorFromLoginPolicyRequest {
  type: SecondFactorType;
}

export interface RemoveSecondFactorFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListLoginPolicyMultiFactorsRequest {
}

export interface ListLoginPolicyMultiFactorsResponse {
  details: ListDetails | undefined;
  result: MultiFactorType[];
}

export interface AddMultiFactorToLoginPolicyRequest {
  type: MultiFactorType;
}

export interface AddMultiFactorToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveMultiFactorFromLoginPolicyRequest {
  type: MultiFactorType;
}

export interface RemoveMultiFactorFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetPasswordComplexityPolicyRequest {
}

export interface GetPasswordComplexityPolicyResponse {
  policy: PasswordComplexityPolicy | undefined;
}

export interface UpdatePasswordComplexityPolicyRequest {
  minLength: number;
  hasUppercase: boolean;
  hasLowercase: boolean;
  hasNumber: boolean;
  hasSymbol: boolean;
}

export interface UpdatePasswordComplexityPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetPasswordAgePolicyRequest {
}

export interface GetPasswordAgePolicyResponse {
  policy: PasswordAgePolicy | undefined;
}

export interface UpdatePasswordAgePolicyRequest {
  maxAgeDays: number;
  expireWarnDays: number;
}

export interface UpdatePasswordAgePolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLockoutPolicyRequest {
}

export interface GetLockoutPolicyResponse {
  policy: LockoutPolicy | undefined;
}

export interface UpdateLockoutPolicyRequest {
  /** failed attempts until a user gets locked */
  maxPasswordAttempts: number;
}

export interface UpdateLockoutPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetPrivacyPolicyRequest {
}

export interface GetPrivacyPolicyResponse {
  policy: PrivacyPolicy | undefined;
}

export interface UpdatePrivacyPolicyRequest {
  tosLink: string;
  privacyLink: string;
  helpLink: string;
  supportEmail: string;
}

export interface UpdatePrivacyPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface AddNotificationPolicyRequest {
  passwordChange: boolean;
}

export interface AddNotificationPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetNotificationPolicyRequest {
}

export interface GetNotificationPolicyResponse {
  policy: NotificationPolicy | undefined;
}

export interface UpdateNotificationPolicyRequest {
  passwordChange: boolean;
}

export interface UpdateNotificationPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultInitMessageTextRequest {
  language: string;
}

export interface GetDefaultInitMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomInitMessageTextRequest {
  language: string;
}

export interface GetCustomInitMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultInitMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultInitMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomInitMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomInitMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultPasswordResetMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordResetMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomPasswordResetMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordResetMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultPasswordResetMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultPasswordResetMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordResetMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordResetMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultVerifyEmailMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyEmailMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomVerifyEmailMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyEmailMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultVerifyEmailMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultVerifyEmailMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyEmailMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyEmailMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultVerifyPhoneMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyPhoneMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomVerifyPhoneMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyPhoneMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultVerifyPhoneMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultVerifyPhoneMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyPhoneMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyPhoneMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultDomainClaimedMessageTextRequest {
  language: string;
}

export interface GetDefaultDomainClaimedMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomDomainClaimedMessageTextRequest {
  language: string;
}

export interface GetCustomDomainClaimedMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultDomainClaimedMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultDomainClaimedMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomDomainClaimedMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomDomainClaimedMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultPasswordChangeMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordChangeMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomPasswordChangeMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordChangeMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultPasswordChangeMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultPasswordChangeMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordChangeMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordChangeMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultPasswordlessRegistrationMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordlessRegistrationMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomPasswordlessRegistrationMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordlessRegistrationMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultPasswordlessRegistrationMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultPasswordlessRegistrationMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultLoginTextsRequest {
  language: string;
}

export interface GetDefaultLoginTextsResponse {
  customText: LoginCustomText | undefined;
}

export interface GetCustomLoginTextsRequest {
  language: string;
}

export interface GetCustomLoginTextsResponse {
  customText: LoginCustomText | undefined;
}

export interface SetCustomLoginTextsRequest {
  language: string;
  selectAccountText: SelectAccountScreenText | undefined;
  loginText: LoginScreenText | undefined;
  passwordText: PasswordScreenText | undefined;
  usernameChangeText: UsernameChangeScreenText | undefined;
  usernameChangeDoneText: UsernameChangeDoneScreenText | undefined;
  initPasswordText: InitPasswordScreenText | undefined;
  initPasswordDoneText: InitPasswordDoneScreenText | undefined;
  emailVerificationText: EmailVerificationScreenText | undefined;
  emailVerificationDoneText: EmailVerificationDoneScreenText | undefined;
  initializeUserText: InitializeUserScreenText | undefined;
  initializeDoneText: InitializeUserDoneScreenText | undefined;
  initMfaPromptText: InitMFAPromptScreenText | undefined;
  initMfaOtpText: InitMFAOTPScreenText | undefined;
  initMfaU2fText: InitMFAU2FScreenText | undefined;
  initMfaDoneText: InitMFADoneScreenText | undefined;
  mfaProvidersText: MFAProvidersText | undefined;
  verifyMfaOtpText: VerifyMFAOTPScreenText | undefined;
  verifyMfaU2fText: VerifyMFAU2FScreenText | undefined;
  passwordlessText: PasswordlessScreenText | undefined;
  passwordChangeText: PasswordChangeScreenText | undefined;
  passwordChangeDoneText: PasswordChangeDoneScreenText | undefined;
  passwordResetDoneText: PasswordResetDoneScreenText | undefined;
  registrationOptionText: RegistrationOptionScreenText | undefined;
  registrationUserText: RegistrationUserScreenText | undefined;
  registrationOrgText: RegistrationOrgScreenText | undefined;
  linkingUserDoneText: LinkingUserDoneScreenText | undefined;
  externalUserNotFoundText: ExternalUserNotFoundScreenText | undefined;
  successLoginText: SuccessLoginScreenText | undefined;
  logoutText: LogoutDoneScreenText | undefined;
  footerText: FooterText | undefined;
  passwordlessPromptText: PasswordlessPromptScreenText | undefined;
  passwordlessRegistrationText: PasswordlessRegistrationScreenText | undefined;
  passwordlessRegistrationDoneText: PasswordlessRegistrationDoneScreenText | undefined;
  externalRegistrationUserOverviewText: ExternalRegistrationUserOverviewScreenText | undefined;
}

export interface SetCustomLoginTextsResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomLoginTextsToDefaultRequest {
  language: string;
}

export interface ResetCustomLoginTextsToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface AddIAMMemberRequest {
  userId: string;
  roles: string[];
}

export interface AddIAMMemberResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateIAMMemberRequest {
  userId: string;
  roles: string[];
}

export interface UpdateIAMMemberResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveIAMMemberRequest {
  userId: string;
}

export interface RemoveIAMMemberResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListIAMMemberRolesRequest {
}

export interface ListIAMMemberRolesResponse {
  details: ListDetails | undefined;
  roles: string[];
}

export interface ListIAMMembersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SearchQuery[];
}

export interface ListIAMMembersResponse {
  details: ListDetails | undefined;
  result: Member[];
}

/** This is an empty request */
export interface ListViewsRequest {
}

export interface ListViewsResponse {
  /** TODO: list details */
  result: View[];
}

/** This is an empty request */
export interface ListFailedEventsRequest {
}

export interface ListFailedEventsResponse {
  /** TODO: list details */
  result: FailedEvent[];
}

export interface RemoveFailedEventRequest {
  database: string;
  viewName: string;
  failedSequence: number;
}

/** This is an empty response */
export interface RemoveFailedEventResponse {
}

export interface View {
  database: string;
  viewName: string;
  processedSequence: number;
  /** The timestamp the event occurred */
  eventTimestamp: Date | undefined;
  lastSuccessfulSpoolerRun: Date | undefined;
}

export interface FailedEvent {
  database: string;
  viewName: string;
  failedSequence: number;
  failureCount: number;
  errorMessage: string;
  lastFailed: Date | undefined;
}

export interface ImportDataRequest {
  dataOrgs?: ImportDataOrg | undefined;
  dataOrgsv1?: ImportDataOrg | undefined;
  dataOrgsLocal?: ImportDataRequest_LocalInput | undefined;
  dataOrgsv1Local?: ImportDataRequest_LocalInput | undefined;
  dataOrgsS3?: ImportDataRequest_S3Input | undefined;
  dataOrgsv1S3?: ImportDataRequest_S3Input | undefined;
  dataOrgsGcs?: ImportDataRequest_GCSInput | undefined;
  dataOrgsv1Gcs?: ImportDataRequest_GCSInput | undefined;
  timeout: string;
}

export interface ImportDataRequest_LocalInput {
  path: string;
}

export interface ImportDataRequest_S3Input {
  path: string;
  endpoint: string;
  accessKeyId: string;
  secretAccessKey: string;
  ssl: boolean;
  bucket: string;
}

export interface ImportDataRequest_GCSInput {
  bucket: string;
  serviceaccountJson: string;
  path: string;
}

export interface ImportDataOrg {
  orgs: DataOrg[];
}

export interface DataOrg {
  orgId: string;
  org: AddOrgRequest | undefined;
  domainPolicy: AddCustomDomainPolicyRequest | undefined;
  labelPolicy: AddCustomLabelPolicyRequest | undefined;
  lockoutPolicy: AddCustomLockoutPolicyRequest | undefined;
  loginPolicy: AddCustomLoginPolicyRequest | undefined;
  passwordComplexityPolicy: AddCustomPasswordComplexityPolicyRequest | undefined;
  privacyPolicy: AddCustomPrivacyPolicyRequest | undefined;
  projects: DataProject[];
  projectRoles: AddProjectRoleRequest[];
  apiApps: DataAPIApplication[];
  oidcApps: DataOIDCApplication[];
  humanUsers: DataHumanUser[];
  machineUsers: DataMachineUser[];
  triggerActions: SetTriggerActionsRequest[];
  actions: DataAction[];
  projectGrants: DataProjectGrant[];
  userGrants: AddUserGrantRequest[];
  orgMembers: AddOrgMemberRequest[];
  projectMembers: AddProjectMemberRequest[];
  projectGrantMembers: AddProjectGrantMemberRequest[];
  userMetadata: SetUserMetadataRequest[];
  loginTexts: SetCustomLoginTextsRequest2[];
  initMessages: SetCustomInitMessageTextRequest[];
  passwordResetMessages: SetCustomPasswordResetMessageTextRequest[];
  verifyEmailMessages: SetCustomVerifyEmailMessageTextRequest[];
  verifyPhoneMessages: SetCustomVerifyPhoneMessageTextRequest[];
  domainClaimedMessages: SetCustomDomainClaimedMessageTextRequest[];
  passwordlessRegistrationMessages: SetCustomPasswordlessRegistrationMessageTextRequest[];
  oidcIdps: DataOIDCIDP[];
  jwtIdps: DataJWTIDP[];
  userLinks: IDPUserLink[];
  domains: Domain3[];
  appKeys: DataAppKey[];
  machineKeys: DataMachineKey[];
}

export interface ImportDataResponse {
  errors: ImportDataError[];
  success: ImportDataSuccess | undefined;
}

export interface ImportDataError {
  type: string;
  id: string;
  message: string;
}

export interface ImportDataSuccess {
  orgs: ImportDataSuccessOrg[];
}

export interface ImportDataSuccessOrg {
  orgId: string;
  projectIds: string[];
  projectRoles: string[];
  oidcAppIds: string[];
  apiAppIds: string[];
  humanUserIds: string[];
  machineUserIds: string[];
  actionIds: string[];
  triggerActions: SetTriggerActionsRequest[];
  projectGrants: ImportDataSuccessProjectGrant[];
  userGrants: ImportDataSuccessUserGrant[];
  orgMembers: string[];
  projectMembers: ImportDataSuccessProjectMember[];
  projectGrantMembers: ImportDataSuccessProjectGrantMember[];
  oidcIpds: string[];
  jwtIdps: string[];
  idpLinks: string[];
  userLinks: ImportDataSuccessUserLinks[];
  userMetadata: ImportDataSuccessUserMetadata[];
  domains: string[];
  appKeys: string[];
  machineKeys: string[];
}

export interface ImportDataSuccessProjectGrant {
  grantId: string;
  projectId: string;
  orgId: string;
}

export interface ImportDataSuccessUserGrant {
  projectId: string;
  userId: string;
}

export interface ImportDataSuccessProjectMember {
  projectId: string;
  userId: string;
}

export interface ImportDataSuccessProjectGrantMember {
  projectId: string;
  grantId: string;
  userId: string;
}

export interface ImportDataSuccessUserLinks {
  userId: string;
  externalUserId: string;
  displayName: string;
  idpId: string;
}

export interface ImportDataSuccessUserMetadata {
  userId: string;
  key: string;
}

export interface ExportDataRequest {
  orgIds: string[];
  excludedOrgIds: string[];
  withPasswords: boolean;
  withOtp: boolean;
  responseOutput: boolean;
  localOutput: ExportDataRequest_LocalOutput | undefined;
  s3Output: ExportDataRequest_S3Output | undefined;
  gcsOutput: ExportDataRequest_GCSOutput | undefined;
  timeout: string;
}

export interface ExportDataRequest_LocalOutput {
  path: string;
}

export interface ExportDataRequest_S3Output {
  path: string;
  endpoint: string;
  accessKeyId: string;
  secretAccessKey: string;
  ssl: boolean;
  bucket: string;
}

export interface ExportDataRequest_GCSOutput {
  bucket: string;
  serviceaccountJson: string;
  path: string;
}

export interface ExportDataResponse {
  orgs: DataOrg[];
}

export interface ListEventsRequest {
  sequence: number;
  limit: number;
  asc: boolean;
  editorUserId: string;
  eventTypes: string[];
  aggregateId: string;
  aggregateTypes: string[];
  resourceOwner: string;
  creationDate: Date | undefined;
}

export interface ListEventsResponse {
  events: Event[];
}

export interface ListEventTypesRequest {
}

export interface ListEventTypesResponse {
  eventTypes: EventType[];
}

export interface ListAggregateTypesRequest {
}

export interface ListAggregateTypesResponse {
  aggregateTypes: AggregateType[];
}

function createBaseHealthzRequest(): HealthzRequest {
  return {};
}

export const HealthzRequest = {
  encode(_: HealthzRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthzRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthzRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HealthzRequest {
    return {};
  },

  toJSON(_: HealthzRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthzRequest>, I>>(base?: I): HealthzRequest {
    return HealthzRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthzRequest>, I>>(_: I): HealthzRequest {
    const message = createBaseHealthzRequest();
    return message;
  },
};

function createBaseHealthzResponse(): HealthzResponse {
  return {};
}

export const HealthzResponse = {
  encode(_: HealthzResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthzResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthzResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HealthzResponse {
    return {};
  },

  toJSON(_: HealthzResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthzResponse>, I>>(base?: I): HealthzResponse {
    return HealthzResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthzResponse>, I>>(_: I): HealthzResponse {
    const message = createBaseHealthzResponse();
    return message;
  },
};

function createBaseGetSupportedLanguagesRequest(): GetSupportedLanguagesRequest {
  return {};
}

export const GetSupportedLanguagesRequest = {
  encode(_: GetSupportedLanguagesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSupportedLanguagesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSupportedLanguagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSupportedLanguagesRequest {
    return {};
  },

  toJSON(_: GetSupportedLanguagesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSupportedLanguagesRequest>, I>>(base?: I): GetSupportedLanguagesRequest {
    return GetSupportedLanguagesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSupportedLanguagesRequest>, I>>(_: I): GetSupportedLanguagesRequest {
    const message = createBaseGetSupportedLanguagesRequest();
    return message;
  },
};

function createBaseGetSupportedLanguagesResponse(): GetSupportedLanguagesResponse {
  return { languages: [] };
}

export const GetSupportedLanguagesResponse = {
  encode(message: GetSupportedLanguagesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.languages) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSupportedLanguagesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSupportedLanguagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSupportedLanguagesResponse {
    return { languages: Array.isArray(object?.languages) ? object.languages.map((e: any) => String(e)) : [] };
  },

  toJSON(message: GetSupportedLanguagesResponse): unknown {
    const obj: any = {};
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSupportedLanguagesResponse>, I>>(base?: I): GetSupportedLanguagesResponse {
    return GetSupportedLanguagesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSupportedLanguagesResponse>, I>>(
    object: I,
  ): GetSupportedLanguagesResponse {
    const message = createBaseGetSupportedLanguagesResponse();
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetDefaultLanguageRequest(): SetDefaultLanguageRequest {
  return { language: "" };
}

export const SetDefaultLanguageRequest = {
  encode(message: SetDefaultLanguageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultLanguageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultLanguageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultLanguageRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: SetDefaultLanguageRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultLanguageRequest>, I>>(base?: I): SetDefaultLanguageRequest {
    return SetDefaultLanguageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultLanguageRequest>, I>>(object: I): SetDefaultLanguageRequest {
    const message = createBaseSetDefaultLanguageRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseSetDefaultLanguageResponse(): SetDefaultLanguageResponse {
  return { details: undefined };
}

export const SetDefaultLanguageResponse = {
  encode(message: SetDefaultLanguageResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultLanguageResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultLanguageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultLanguageResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultLanguageResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultLanguageResponse>, I>>(base?: I): SetDefaultLanguageResponse {
    return SetDefaultLanguageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultLanguageResponse>, I>>(object: I): SetDefaultLanguageResponse {
    const message = createBaseSetDefaultLanguageResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultLanguageRequest(): GetDefaultLanguageRequest {
  return {};
}

export const GetDefaultLanguageRequest = {
  encode(_: GetDefaultLanguageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLanguageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLanguageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultLanguageRequest {
    return {};
  },

  toJSON(_: GetDefaultLanguageRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLanguageRequest>, I>>(base?: I): GetDefaultLanguageRequest {
    return GetDefaultLanguageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLanguageRequest>, I>>(_: I): GetDefaultLanguageRequest {
    const message = createBaseGetDefaultLanguageRequest();
    return message;
  },
};

function createBaseGetDefaultLanguageResponse(): GetDefaultLanguageResponse {
  return { language: "" };
}

export const GetDefaultLanguageResponse = {
  encode(message: GetDefaultLanguageResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLanguageResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLanguageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLanguageResponse {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultLanguageResponse): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLanguageResponse>, I>>(base?: I): GetDefaultLanguageResponse {
    return GetDefaultLanguageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLanguageResponse>, I>>(object: I): GetDefaultLanguageResponse {
    const message = createBaseGetDefaultLanguageResponse();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseSetDefaultOrgRequest(): SetDefaultOrgRequest {
  return { orgId: "" };
}

export const SetDefaultOrgRequest = {
  encode(message: SetDefaultOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultOrgRequest {
    return { orgId: isSet(object.orgId) ? String(object.orgId) : "" };
  },

  toJSON(message: SetDefaultOrgRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultOrgRequest>, I>>(base?: I): SetDefaultOrgRequest {
    return SetDefaultOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultOrgRequest>, I>>(object: I): SetDefaultOrgRequest {
    const message = createBaseSetDefaultOrgRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseSetDefaultOrgResponse(): SetDefaultOrgResponse {
  return { details: undefined };
}

export const SetDefaultOrgResponse = {
  encode(message: SetDefaultOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultOrgResponse>, I>>(base?: I): SetDefaultOrgResponse {
    return SetDefaultOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultOrgResponse>, I>>(object: I): SetDefaultOrgResponse {
    const message = createBaseSetDefaultOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultOrgRequest(): GetDefaultOrgRequest {
  return {};
}

export const GetDefaultOrgRequest = {
  encode(_: GetDefaultOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultOrgRequest {
    return {};
  },

  toJSON(_: GetDefaultOrgRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultOrgRequest>, I>>(base?: I): GetDefaultOrgRequest {
    return GetDefaultOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultOrgRequest>, I>>(_: I): GetDefaultOrgRequest {
    const message = createBaseGetDefaultOrgRequest();
    return message;
  },
};

function createBaseGetDefaultOrgResponse(): GetDefaultOrgResponse {
  return { org: undefined };
}

export const GetDefaultOrgResponse = {
  encode(message: GetDefaultOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.org !== undefined) {
      Org.encode(message.org, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = Org.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultOrgResponse {
    return { org: isSet(object.org) ? Org.fromJSON(object.org) : undefined };
  },

  toJSON(message: GetDefaultOrgResponse): unknown {
    const obj: any = {};
    if (message.org !== undefined) {
      obj.org = Org.toJSON(message.org);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultOrgResponse>, I>>(base?: I): GetDefaultOrgResponse {
    return GetDefaultOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultOrgResponse>, I>>(object: I): GetDefaultOrgResponse {
    const message = createBaseGetDefaultOrgResponse();
    message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
    return message;
  },
};

function createBaseGetMyInstanceRequest(): GetMyInstanceRequest {
  return {};
}

export const GetMyInstanceRequest = {
  encode(_: GetMyInstanceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMyInstanceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMyInstanceRequest {
    return {};
  },

  toJSON(_: GetMyInstanceRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMyInstanceRequest>, I>>(base?: I): GetMyInstanceRequest {
    return GetMyInstanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMyInstanceRequest>, I>>(_: I): GetMyInstanceRequest {
    const message = createBaseGetMyInstanceRequest();
    return message;
  },
};

function createBaseGetMyInstanceResponse(): GetMyInstanceResponse {
  return { instance: undefined };
}

export const GetMyInstanceResponse = {
  encode(message: GetMyInstanceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.instance !== undefined) {
      InstanceDetail.encode(message.instance, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMyInstanceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyInstanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = InstanceDetail.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMyInstanceResponse {
    return { instance: isSet(object.instance) ? InstanceDetail.fromJSON(object.instance) : undefined };
  },

  toJSON(message: GetMyInstanceResponse): unknown {
    const obj: any = {};
    if (message.instance !== undefined) {
      obj.instance = InstanceDetail.toJSON(message.instance);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMyInstanceResponse>, I>>(base?: I): GetMyInstanceResponse {
    return GetMyInstanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMyInstanceResponse>, I>>(object: I): GetMyInstanceResponse {
    const message = createBaseGetMyInstanceResponse();
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? InstanceDetail.fromPartial(object.instance)
      : undefined;
    return message;
  },
};

function createBaseListInstanceDomainsRequest(): ListInstanceDomainsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListInstanceDomainsRequest = {
  encode(message: ListInstanceDomainsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      DomainSearchQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListInstanceDomainsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstanceDomainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(DomainSearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstanceDomainsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => DomainSearchQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListInstanceDomainsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => DomainSearchQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListInstanceDomainsRequest>, I>>(base?: I): ListInstanceDomainsRequest {
    return ListInstanceDomainsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListInstanceDomainsRequest>, I>>(object: I): ListInstanceDomainsRequest {
    const message = createBaseListInstanceDomainsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => DomainSearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListInstanceDomainsResponse(): ListInstanceDomainsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListInstanceDomainsResponse = {
  encode(message: ListInstanceDomainsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      Domain.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListInstanceDomainsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstanceDomainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(Domain.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstanceDomainsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Domain.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListInstanceDomainsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Domain.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListInstanceDomainsResponse>, I>>(base?: I): ListInstanceDomainsResponse {
    return ListInstanceDomainsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListInstanceDomainsResponse>, I>>(object: I): ListInstanceDomainsResponse {
    const message = createBaseListInstanceDomainsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => Domain.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListSecretGeneratorsRequest(): ListSecretGeneratorsRequest {
  return { query: undefined, queries: [] };
}

export const ListSecretGeneratorsRequest = {
  encode(message: ListSecretGeneratorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      SecretGeneratorQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSecretGeneratorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecretGeneratorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(SecretGeneratorQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecretGeneratorsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => SecretGeneratorQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListSecretGeneratorsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SecretGeneratorQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSecretGeneratorsRequest>, I>>(base?: I): ListSecretGeneratorsRequest {
    return ListSecretGeneratorsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSecretGeneratorsRequest>, I>>(object: I): ListSecretGeneratorsRequest {
    const message = createBaseListSecretGeneratorsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SecretGeneratorQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListSecretGeneratorsResponse(): ListSecretGeneratorsResponse {
  return { details: undefined, result: [] };
}

export const ListSecretGeneratorsResponse = {
  encode(message: ListSecretGeneratorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      SecretGenerator.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSecretGeneratorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecretGeneratorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(SecretGenerator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecretGeneratorsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => SecretGenerator.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListSecretGeneratorsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => SecretGenerator.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSecretGeneratorsResponse>, I>>(base?: I): ListSecretGeneratorsResponse {
    return ListSecretGeneratorsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSecretGeneratorsResponse>, I>>(object: I): ListSecretGeneratorsResponse {
    const message = createBaseListSecretGeneratorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => SecretGenerator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetSecretGeneratorRequest(): GetSecretGeneratorRequest {
  return { generatorType: 0 };
}

export const GetSecretGeneratorRequest = {
  encode(message: GetSecretGeneratorRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.generatorType !== 0) {
      writer.uint32(8).int32(message.generatorType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSecretGeneratorRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.generatorType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretGeneratorRequest {
    return { generatorType: isSet(object.generatorType) ? secretGeneratorTypeFromJSON(object.generatorType) : 0 };
  },

  toJSON(message: GetSecretGeneratorRequest): unknown {
    const obj: any = {};
    if (message.generatorType !== 0) {
      obj.generatorType = secretGeneratorTypeToJSON(message.generatorType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSecretGeneratorRequest>, I>>(base?: I): GetSecretGeneratorRequest {
    return GetSecretGeneratorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSecretGeneratorRequest>, I>>(object: I): GetSecretGeneratorRequest {
    const message = createBaseGetSecretGeneratorRequest();
    message.generatorType = object.generatorType ?? 0;
    return message;
  },
};

function createBaseGetSecretGeneratorResponse(): GetSecretGeneratorResponse {
  return { secretGenerator: undefined };
}

export const GetSecretGeneratorResponse = {
  encode(message: GetSecretGeneratorResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.secretGenerator !== undefined) {
      SecretGenerator.encode(message.secretGenerator, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSecretGeneratorResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretGeneratorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.secretGenerator = SecretGenerator.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretGeneratorResponse {
    return {
      secretGenerator: isSet(object.secretGenerator) ? SecretGenerator.fromJSON(object.secretGenerator) : undefined,
    };
  },

  toJSON(message: GetSecretGeneratorResponse): unknown {
    const obj: any = {};
    if (message.secretGenerator !== undefined) {
      obj.secretGenerator = SecretGenerator.toJSON(message.secretGenerator);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSecretGeneratorResponse>, I>>(base?: I): GetSecretGeneratorResponse {
    return GetSecretGeneratorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSecretGeneratorResponse>, I>>(object: I): GetSecretGeneratorResponse {
    const message = createBaseGetSecretGeneratorResponse();
    message.secretGenerator = (object.secretGenerator !== undefined && object.secretGenerator !== null)
      ? SecretGenerator.fromPartial(object.secretGenerator)
      : undefined;
    return message;
  },
};

function createBaseUpdateSecretGeneratorRequest(): UpdateSecretGeneratorRequest {
  return {
    generatorType: 0,
    length: 0,
    expiry: undefined,
    includeLowerLetters: false,
    includeUpperLetters: false,
    includeDigits: false,
    includeSymbols: false,
  };
}

export const UpdateSecretGeneratorRequest = {
  encode(message: UpdateSecretGeneratorRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.generatorType !== 0) {
      writer.uint32(8).int32(message.generatorType);
    }
    if (message.length !== 0) {
      writer.uint32(16).uint32(message.length);
    }
    if (message.expiry !== undefined) {
      Duration.encode(message.expiry, writer.uint32(26).fork()).ldelim();
    }
    if (message.includeLowerLetters === true) {
      writer.uint32(32).bool(message.includeLowerLetters);
    }
    if (message.includeUpperLetters === true) {
      writer.uint32(40).bool(message.includeUpperLetters);
    }
    if (message.includeDigits === true) {
      writer.uint32(48).bool(message.includeDigits);
    }
    if (message.includeSymbols === true) {
      writer.uint32(56).bool(message.includeSymbols);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSecretGeneratorRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecretGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.generatorType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.length = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiry = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeLowerLetters = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeUpperLetters = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.includeDigits = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.includeSymbols = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecretGeneratorRequest {
    return {
      generatorType: isSet(object.generatorType) ? secretGeneratorTypeFromJSON(object.generatorType) : 0,
      length: isSet(object.length) ? Number(object.length) : 0,
      expiry: isSet(object.expiry) ? Duration.fromJSON(object.expiry) : undefined,
      includeLowerLetters: isSet(object.includeLowerLetters) ? Boolean(object.includeLowerLetters) : false,
      includeUpperLetters: isSet(object.includeUpperLetters) ? Boolean(object.includeUpperLetters) : false,
      includeDigits: isSet(object.includeDigits) ? Boolean(object.includeDigits) : false,
      includeSymbols: isSet(object.includeSymbols) ? Boolean(object.includeSymbols) : false,
    };
  },

  toJSON(message: UpdateSecretGeneratorRequest): unknown {
    const obj: any = {};
    if (message.generatorType !== 0) {
      obj.generatorType = secretGeneratorTypeToJSON(message.generatorType);
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    if (message.expiry !== undefined) {
      obj.expiry = Duration.toJSON(message.expiry);
    }
    if (message.includeLowerLetters === true) {
      obj.includeLowerLetters = message.includeLowerLetters;
    }
    if (message.includeUpperLetters === true) {
      obj.includeUpperLetters = message.includeUpperLetters;
    }
    if (message.includeDigits === true) {
      obj.includeDigits = message.includeDigits;
    }
    if (message.includeSymbols === true) {
      obj.includeSymbols = message.includeSymbols;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSecretGeneratorRequest>, I>>(base?: I): UpdateSecretGeneratorRequest {
    return UpdateSecretGeneratorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSecretGeneratorRequest>, I>>(object: I): UpdateSecretGeneratorRequest {
    const message = createBaseUpdateSecretGeneratorRequest();
    message.generatorType = object.generatorType ?? 0;
    message.length = object.length ?? 0;
    message.expiry = (object.expiry !== undefined && object.expiry !== null)
      ? Duration.fromPartial(object.expiry)
      : undefined;
    message.includeLowerLetters = object.includeLowerLetters ?? false;
    message.includeUpperLetters = object.includeUpperLetters ?? false;
    message.includeDigits = object.includeDigits ?? false;
    message.includeSymbols = object.includeSymbols ?? false;
    return message;
  },
};

function createBaseUpdateSecretGeneratorResponse(): UpdateSecretGeneratorResponse {
  return { details: undefined };
}

export const UpdateSecretGeneratorResponse = {
  encode(message: UpdateSecretGeneratorResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSecretGeneratorResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecretGeneratorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecretGeneratorResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSecretGeneratorResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSecretGeneratorResponse>, I>>(base?: I): UpdateSecretGeneratorResponse {
    return UpdateSecretGeneratorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSecretGeneratorResponse>, I>>(
    object: I,
  ): UpdateSecretGeneratorResponse {
    const message = createBaseUpdateSecretGeneratorResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetSMTPConfigRequest(): GetSMTPConfigRequest {
  return {};
}

export const GetSMTPConfigRequest = {
  encode(_: GetSMTPConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSMTPConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSMTPConfigRequest {
    return {};
  },

  toJSON(_: GetSMTPConfigRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSMTPConfigRequest>, I>>(base?: I): GetSMTPConfigRequest {
    return GetSMTPConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSMTPConfigRequest>, I>>(_: I): GetSMTPConfigRequest {
    const message = createBaseGetSMTPConfigRequest();
    return message;
  },
};

function createBaseGetSMTPConfigResponse(): GetSMTPConfigResponse {
  return { smtpConfig: undefined };
}

export const GetSMTPConfigResponse = {
  encode(message: GetSMTPConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.smtpConfig !== undefined) {
      SMTPConfig.encode(message.smtpConfig, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSMTPConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.smtpConfig = SMTPConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSMTPConfigResponse {
    return { smtpConfig: isSet(object.smtpConfig) ? SMTPConfig.fromJSON(object.smtpConfig) : undefined };
  },

  toJSON(message: GetSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.smtpConfig !== undefined) {
      obj.smtpConfig = SMTPConfig.toJSON(message.smtpConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSMTPConfigResponse>, I>>(base?: I): GetSMTPConfigResponse {
    return GetSMTPConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSMTPConfigResponse>, I>>(object: I): GetSMTPConfigResponse {
    const message = createBaseGetSMTPConfigResponse();
    message.smtpConfig = (object.smtpConfig !== undefined && object.smtpConfig !== null)
      ? SMTPConfig.fromPartial(object.smtpConfig)
      : undefined;
    return message;
  },
};

function createBaseAddSMTPConfigRequest(): AddSMTPConfigRequest {
  return { senderAddress: "", senderName: "", tls: false, host: "", user: "", password: "" };
}

export const AddSMTPConfigRequest = {
  encode(message: AddSMTPConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.senderAddress !== "") {
      writer.uint32(10).string(message.senderAddress);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.tls === true) {
      writer.uint32(24).bool(message.tls);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.user !== "") {
      writer.uint32(42).string(message.user);
    }
    if (message.password !== "") {
      writer.uint32(50).string(message.password);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSMTPConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.senderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMTPConfigRequest {
    return {
      senderAddress: isSet(object.senderAddress) ? String(object.senderAddress) : "",
      senderName: isSet(object.senderName) ? String(object.senderName) : "",
      tls: isSet(object.tls) ? Boolean(object.tls) : false,
      host: isSet(object.host) ? String(object.host) : "",
      user: isSet(object.user) ? String(object.user) : "",
      password: isSet(object.password) ? String(object.password) : "",
    };
  },

  toJSON(message: AddSMTPConfigRequest): unknown {
    const obj: any = {};
    if (message.senderAddress !== "") {
      obj.senderAddress = message.senderAddress;
    }
    if (message.senderName !== "") {
      obj.senderName = message.senderName;
    }
    if (message.tls === true) {
      obj.tls = message.tls;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSMTPConfigRequest>, I>>(base?: I): AddSMTPConfigRequest {
    return AddSMTPConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSMTPConfigRequest>, I>>(object: I): AddSMTPConfigRequest {
    const message = createBaseAddSMTPConfigRequest();
    message.senderAddress = object.senderAddress ?? "";
    message.senderName = object.senderName ?? "";
    message.tls = object.tls ?? false;
    message.host = object.host ?? "";
    message.user = object.user ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseAddSMTPConfigResponse(): AddSMTPConfigResponse {
  return { details: undefined };
}

export const AddSMTPConfigResponse = {
  encode(message: AddSMTPConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSMTPConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMTPConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSMTPConfigResponse>, I>>(base?: I): AddSMTPConfigResponse {
    return AddSMTPConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSMTPConfigResponse>, I>>(object: I): AddSMTPConfigResponse {
    const message = createBaseAddSMTPConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateSMTPConfigRequest(): UpdateSMTPConfigRequest {
  return { senderAddress: "", senderName: "", tls: false, host: "", user: "" };
}

export const UpdateSMTPConfigRequest = {
  encode(message: UpdateSMTPConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.senderAddress !== "") {
      writer.uint32(10).string(message.senderAddress);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.tls === true) {
      writer.uint32(24).bool(message.tls);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.user !== "") {
      writer.uint32(42).string(message.user);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSMTPConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.senderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMTPConfigRequest {
    return {
      senderAddress: isSet(object.senderAddress) ? String(object.senderAddress) : "",
      senderName: isSet(object.senderName) ? String(object.senderName) : "",
      tls: isSet(object.tls) ? Boolean(object.tls) : false,
      host: isSet(object.host) ? String(object.host) : "",
      user: isSet(object.user) ? String(object.user) : "",
    };
  },

  toJSON(message: UpdateSMTPConfigRequest): unknown {
    const obj: any = {};
    if (message.senderAddress !== "") {
      obj.senderAddress = message.senderAddress;
    }
    if (message.senderName !== "") {
      obj.senderName = message.senderName;
    }
    if (message.tls === true) {
      obj.tls = message.tls;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSMTPConfigRequest>, I>>(base?: I): UpdateSMTPConfigRequest {
    return UpdateSMTPConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSMTPConfigRequest>, I>>(object: I): UpdateSMTPConfigRequest {
    const message = createBaseUpdateSMTPConfigRequest();
    message.senderAddress = object.senderAddress ?? "";
    message.senderName = object.senderName ?? "";
    message.tls = object.tls ?? false;
    message.host = object.host ?? "";
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseUpdateSMTPConfigResponse(): UpdateSMTPConfigResponse {
  return { details: undefined };
}

export const UpdateSMTPConfigResponse = {
  encode(message: UpdateSMTPConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSMTPConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMTPConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSMTPConfigResponse>, I>>(base?: I): UpdateSMTPConfigResponse {
    return UpdateSMTPConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSMTPConfigResponse>, I>>(object: I): UpdateSMTPConfigResponse {
    const message = createBaseUpdateSMTPConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateSMTPConfigPasswordRequest(): UpdateSMTPConfigPasswordRequest {
  return { password: "" };
}

export const UpdateSMTPConfigPasswordRequest = {
  encode(message: UpdateSMTPConfigPasswordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.password !== "") {
      writer.uint32(10).string(message.password);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSMTPConfigPasswordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMTPConfigPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMTPConfigPasswordRequest {
    return { password: isSet(object.password) ? String(object.password) : "" };
  },

  toJSON(message: UpdateSMTPConfigPasswordRequest): unknown {
    const obj: any = {};
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSMTPConfigPasswordRequest>, I>>(base?: I): UpdateSMTPConfigPasswordRequest {
    return UpdateSMTPConfigPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSMTPConfigPasswordRequest>, I>>(
    object: I,
  ): UpdateSMTPConfigPasswordRequest {
    const message = createBaseUpdateSMTPConfigPasswordRequest();
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseUpdateSMTPConfigPasswordResponse(): UpdateSMTPConfigPasswordResponse {
  return { details: undefined };
}

export const UpdateSMTPConfigPasswordResponse = {
  encode(message: UpdateSMTPConfigPasswordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSMTPConfigPasswordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMTPConfigPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMTPConfigPasswordResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMTPConfigPasswordResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSMTPConfigPasswordResponse>, I>>(
    base?: I,
  ): UpdateSMTPConfigPasswordResponse {
    return UpdateSMTPConfigPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSMTPConfigPasswordResponse>, I>>(
    object: I,
  ): UpdateSMTPConfigPasswordResponse {
    const message = createBaseUpdateSMTPConfigPasswordResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveSMTPConfigRequest(): RemoveSMTPConfigRequest {
  return {};
}

export const RemoveSMTPConfigRequest = {
  encode(_: RemoveSMTPConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSMTPConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveSMTPConfigRequest {
    return {};
  },

  toJSON(_: RemoveSMTPConfigRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSMTPConfigRequest>, I>>(base?: I): RemoveSMTPConfigRequest {
    return RemoveSMTPConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSMTPConfigRequest>, I>>(_: I): RemoveSMTPConfigRequest {
    const message = createBaseRemoveSMTPConfigRequest();
    return message;
  },
};

function createBaseRemoveSMTPConfigResponse(): RemoveSMTPConfigResponse {
  return { details: undefined };
}

export const RemoveSMTPConfigResponse = {
  encode(message: RemoveSMTPConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSMTPConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSMTPConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSMTPConfigResponse>, I>>(base?: I): RemoveSMTPConfigResponse {
    return RemoveSMTPConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSMTPConfigResponse>, I>>(object: I): RemoveSMTPConfigResponse {
    const message = createBaseRemoveSMTPConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListSMSProvidersRequest(): ListSMSProvidersRequest {
  return { query: undefined };
}

export const ListSMSProvidersRequest = {
  encode(message: ListSMSProvidersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSMSProvidersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSMSProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSMSProvidersRequest {
    return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: ListSMSProvidersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSMSProvidersRequest>, I>>(base?: I): ListSMSProvidersRequest {
    return ListSMSProvidersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSMSProvidersRequest>, I>>(object: I): ListSMSProvidersRequest {
    const message = createBaseListSMSProvidersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListSMSProvidersResponse(): ListSMSProvidersResponse {
  return { details: undefined, result: [] };
}

export const ListSMSProvidersResponse = {
  encode(message: ListSMSProvidersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      SMSProvider.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSMSProvidersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSMSProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(SMSProvider.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSMSProvidersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => SMSProvider.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListSMSProvidersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => SMSProvider.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSMSProvidersResponse>, I>>(base?: I): ListSMSProvidersResponse {
    return ListSMSProvidersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSMSProvidersResponse>, I>>(object: I): ListSMSProvidersResponse {
    const message = createBaseListSMSProvidersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => SMSProvider.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetSMSProviderRequest(): GetSMSProviderRequest {
  return { id: "" };
}

export const GetSMSProviderRequest = {
  encode(message: GetSMSProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSMSProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMSProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSMSProviderRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetSMSProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSMSProviderRequest>, I>>(base?: I): GetSMSProviderRequest {
    return GetSMSProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSMSProviderRequest>, I>>(object: I): GetSMSProviderRequest {
    const message = createBaseGetSMSProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetSMSProviderResponse(): GetSMSProviderResponse {
  return { config: undefined };
}

export const GetSMSProviderResponse = {
  encode(message: GetSMSProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.config !== undefined) {
      SMSProvider.encode(message.config, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSMSProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMSProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = SMSProvider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSMSProviderResponse {
    return { config: isSet(object.config) ? SMSProvider.fromJSON(object.config) : undefined };
  },

  toJSON(message: GetSMSProviderResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = SMSProvider.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSMSProviderResponse>, I>>(base?: I): GetSMSProviderResponse {
    return GetSMSProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSMSProviderResponse>, I>>(object: I): GetSMSProviderResponse {
    const message = createBaseGetSMSProviderResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? SMSProvider.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseAddSMSProviderTwilioRequest(): AddSMSProviderTwilioRequest {
  return { sid: "", token: "", senderNumber: "" };
}

export const AddSMSProviderTwilioRequest = {
  encode(message: AddSMSProviderTwilioRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.senderNumber !== "") {
      writer.uint32(26).string(message.senderNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSMSProviderTwilioRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMSProviderTwilioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.senderNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMSProviderTwilioRequest {
    return {
      sid: isSet(object.sid) ? String(object.sid) : "",
      token: isSet(object.token) ? String(object.token) : "",
      senderNumber: isSet(object.senderNumber) ? String(object.senderNumber) : "",
    };
  },

  toJSON(message: AddSMSProviderTwilioRequest): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.senderNumber !== "") {
      obj.senderNumber = message.senderNumber;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSMSProviderTwilioRequest>, I>>(base?: I): AddSMSProviderTwilioRequest {
    return AddSMSProviderTwilioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSMSProviderTwilioRequest>, I>>(object: I): AddSMSProviderTwilioRequest {
    const message = createBaseAddSMSProviderTwilioRequest();
    message.sid = object.sid ?? "";
    message.token = object.token ?? "";
    message.senderNumber = object.senderNumber ?? "";
    return message;
  },
};

function createBaseAddSMSProviderTwilioResponse(): AddSMSProviderTwilioResponse {
  return { details: undefined, id: "" };
}

export const AddSMSProviderTwilioResponse = {
  encode(message: AddSMSProviderTwilioResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSMSProviderTwilioResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMSProviderTwilioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMSProviderTwilioResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddSMSProviderTwilioResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSMSProviderTwilioResponse>, I>>(base?: I): AddSMSProviderTwilioResponse {
    return AddSMSProviderTwilioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSMSProviderTwilioResponse>, I>>(object: I): AddSMSProviderTwilioResponse {
    const message = createBaseAddSMSProviderTwilioResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateSMSProviderTwilioRequest(): UpdateSMSProviderTwilioRequest {
  return { id: "", sid: "", senderNumber: "" };
}

export const UpdateSMSProviderTwilioRequest = {
  encode(message: UpdateSMSProviderTwilioRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.sid !== "") {
      writer.uint32(18).string(message.sid);
    }
    if (message.senderNumber !== "") {
      writer.uint32(26).string(message.senderNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSMSProviderTwilioRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderTwilioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.senderNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderTwilioRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      sid: isSet(object.sid) ? String(object.sid) : "",
      senderNumber: isSet(object.senderNumber) ? String(object.senderNumber) : "",
    };
  },

  toJSON(message: UpdateSMSProviderTwilioRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.senderNumber !== "") {
      obj.senderNumber = message.senderNumber;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSMSProviderTwilioRequest>, I>>(base?: I): UpdateSMSProviderTwilioRequest {
    return UpdateSMSProviderTwilioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSMSProviderTwilioRequest>, I>>(
    object: I,
  ): UpdateSMSProviderTwilioRequest {
    const message = createBaseUpdateSMSProviderTwilioRequest();
    message.id = object.id ?? "";
    message.sid = object.sid ?? "";
    message.senderNumber = object.senderNumber ?? "";
    return message;
  },
};

function createBaseUpdateSMSProviderTwilioResponse(): UpdateSMSProviderTwilioResponse {
  return { details: undefined };
}

export const UpdateSMSProviderTwilioResponse = {
  encode(message: UpdateSMSProviderTwilioResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSMSProviderTwilioResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderTwilioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderTwilioResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMSProviderTwilioResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSMSProviderTwilioResponse>, I>>(base?: I): UpdateSMSProviderTwilioResponse {
    return UpdateSMSProviderTwilioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSMSProviderTwilioResponse>, I>>(
    object: I,
  ): UpdateSMSProviderTwilioResponse {
    const message = createBaseUpdateSMSProviderTwilioResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateSMSProviderTwilioTokenRequest(): UpdateSMSProviderTwilioTokenRequest {
  return { id: "", token: "" };
}

export const UpdateSMSProviderTwilioTokenRequest = {
  encode(message: UpdateSMSProviderTwilioTokenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSMSProviderTwilioTokenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderTwilioTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderTwilioTokenRequest {
    return { id: isSet(object.id) ? String(object.id) : "", token: isSet(object.token) ? String(object.token) : "" };
  },

  toJSON(message: UpdateSMSProviderTwilioTokenRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSMSProviderTwilioTokenRequest>, I>>(
    base?: I,
  ): UpdateSMSProviderTwilioTokenRequest {
    return UpdateSMSProviderTwilioTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSMSProviderTwilioTokenRequest>, I>>(
    object: I,
  ): UpdateSMSProviderTwilioTokenRequest {
    const message = createBaseUpdateSMSProviderTwilioTokenRequest();
    message.id = object.id ?? "";
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseUpdateSMSProviderTwilioTokenResponse(): UpdateSMSProviderTwilioTokenResponse {
  return { details: undefined };
}

export const UpdateSMSProviderTwilioTokenResponse = {
  encode(message: UpdateSMSProviderTwilioTokenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSMSProviderTwilioTokenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderTwilioTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderTwilioTokenResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMSProviderTwilioTokenResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSMSProviderTwilioTokenResponse>, I>>(
    base?: I,
  ): UpdateSMSProviderTwilioTokenResponse {
    return UpdateSMSProviderTwilioTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSMSProviderTwilioTokenResponse>, I>>(
    object: I,
  ): UpdateSMSProviderTwilioTokenResponse {
    const message = createBaseUpdateSMSProviderTwilioTokenResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseActivateSMSProviderRequest(): ActivateSMSProviderRequest {
  return { id: "" };
}

export const ActivateSMSProviderRequest = {
  encode(message: ActivateSMSProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivateSMSProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateSMSProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateSMSProviderRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: ActivateSMSProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivateSMSProviderRequest>, I>>(base?: I): ActivateSMSProviderRequest {
    return ActivateSMSProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivateSMSProviderRequest>, I>>(object: I): ActivateSMSProviderRequest {
    const message = createBaseActivateSMSProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseActivateSMSProviderResponse(): ActivateSMSProviderResponse {
  return { details: undefined };
}

export const ActivateSMSProviderResponse = {
  encode(message: ActivateSMSProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivateSMSProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateSMSProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateSMSProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ActivateSMSProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivateSMSProviderResponse>, I>>(base?: I): ActivateSMSProviderResponse {
    return ActivateSMSProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivateSMSProviderResponse>, I>>(object: I): ActivateSMSProviderResponse {
    const message = createBaseActivateSMSProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateSMSProviderRequest(): DeactivateSMSProviderRequest {
  return { id: "" };
}

export const DeactivateSMSProviderRequest = {
  encode(message: DeactivateSMSProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateSMSProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateSMSProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateSMSProviderRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: DeactivateSMSProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateSMSProviderRequest>, I>>(base?: I): DeactivateSMSProviderRequest {
    return DeactivateSMSProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateSMSProviderRequest>, I>>(object: I): DeactivateSMSProviderRequest {
    const message = createBaseDeactivateSMSProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateSMSProviderResponse(): DeactivateSMSProviderResponse {
  return { details: undefined };
}

export const DeactivateSMSProviderResponse = {
  encode(message: DeactivateSMSProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateSMSProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateSMSProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateSMSProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateSMSProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateSMSProviderResponse>, I>>(base?: I): DeactivateSMSProviderResponse {
    return DeactivateSMSProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateSMSProviderResponse>, I>>(
    object: I,
  ): DeactivateSMSProviderResponse {
    const message = createBaseDeactivateSMSProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveSMSProviderRequest(): RemoveSMSProviderRequest {
  return { id: "" };
}

export const RemoveSMSProviderRequest = {
  encode(message: RemoveSMSProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSMSProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSMSProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSMSProviderRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: RemoveSMSProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSMSProviderRequest>, I>>(base?: I): RemoveSMSProviderRequest {
    return RemoveSMSProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSMSProviderRequest>, I>>(object: I): RemoveSMSProviderRequest {
    const message = createBaseRemoveSMSProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveSMSProviderResponse(): RemoveSMSProviderResponse {
  return { details: undefined };
}

export const RemoveSMSProviderResponse = {
  encode(message: RemoveSMSProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSMSProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSMSProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSMSProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveSMSProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSMSProviderResponse>, I>>(base?: I): RemoveSMSProviderResponse {
    return RemoveSMSProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSMSProviderResponse>, I>>(object: I): RemoveSMSProviderResponse {
    const message = createBaseRemoveSMSProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetFileSystemNotificationProviderRequest(): GetFileSystemNotificationProviderRequest {
  return {};
}

export const GetFileSystemNotificationProviderRequest = {
  encode(_: GetFileSystemNotificationProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFileSystemNotificationProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFileSystemNotificationProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetFileSystemNotificationProviderRequest {
    return {};
  },

  toJSON(_: GetFileSystemNotificationProviderRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFileSystemNotificationProviderRequest>, I>>(
    base?: I,
  ): GetFileSystemNotificationProviderRequest {
    return GetFileSystemNotificationProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFileSystemNotificationProviderRequest>, I>>(
    _: I,
  ): GetFileSystemNotificationProviderRequest {
    const message = createBaseGetFileSystemNotificationProviderRequest();
    return message;
  },
};

function createBaseGetFileSystemNotificationProviderResponse(): GetFileSystemNotificationProviderResponse {
  return { provider: undefined };
}

export const GetFileSystemNotificationProviderResponse = {
  encode(message: GetFileSystemNotificationProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.provider !== undefined) {
      DebugNotificationProvider.encode(message.provider, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFileSystemNotificationProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFileSystemNotificationProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.provider = DebugNotificationProvider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFileSystemNotificationProviderResponse {
    return { provider: isSet(object.provider) ? DebugNotificationProvider.fromJSON(object.provider) : undefined };
  },

  toJSON(message: GetFileSystemNotificationProviderResponse): unknown {
    const obj: any = {};
    if (message.provider !== undefined) {
      obj.provider = DebugNotificationProvider.toJSON(message.provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFileSystemNotificationProviderResponse>, I>>(
    base?: I,
  ): GetFileSystemNotificationProviderResponse {
    return GetFileSystemNotificationProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFileSystemNotificationProviderResponse>, I>>(
    object: I,
  ): GetFileSystemNotificationProviderResponse {
    const message = createBaseGetFileSystemNotificationProviderResponse();
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? DebugNotificationProvider.fromPartial(object.provider)
      : undefined;
    return message;
  },
};

function createBaseGetLogNotificationProviderRequest(): GetLogNotificationProviderRequest {
  return {};
}

export const GetLogNotificationProviderRequest = {
  encode(_: GetLogNotificationProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLogNotificationProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLogNotificationProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLogNotificationProviderRequest {
    return {};
  },

  toJSON(_: GetLogNotificationProviderRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLogNotificationProviderRequest>, I>>(
    base?: I,
  ): GetLogNotificationProviderRequest {
    return GetLogNotificationProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLogNotificationProviderRequest>, I>>(
    _: I,
  ): GetLogNotificationProviderRequest {
    const message = createBaseGetLogNotificationProviderRequest();
    return message;
  },
};

function createBaseGetLogNotificationProviderResponse(): GetLogNotificationProviderResponse {
  return { provider: undefined };
}

export const GetLogNotificationProviderResponse = {
  encode(message: GetLogNotificationProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.provider !== undefined) {
      DebugNotificationProvider.encode(message.provider, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLogNotificationProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLogNotificationProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.provider = DebugNotificationProvider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLogNotificationProviderResponse {
    return { provider: isSet(object.provider) ? DebugNotificationProvider.fromJSON(object.provider) : undefined };
  },

  toJSON(message: GetLogNotificationProviderResponse): unknown {
    const obj: any = {};
    if (message.provider !== undefined) {
      obj.provider = DebugNotificationProvider.toJSON(message.provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLogNotificationProviderResponse>, I>>(
    base?: I,
  ): GetLogNotificationProviderResponse {
    return GetLogNotificationProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLogNotificationProviderResponse>, I>>(
    object: I,
  ): GetLogNotificationProviderResponse {
    const message = createBaseGetLogNotificationProviderResponse();
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? DebugNotificationProvider.fromPartial(object.provider)
      : undefined;
    return message;
  },
};

function createBaseGetOIDCSettingsRequest(): GetOIDCSettingsRequest {
  return {};
}

export const GetOIDCSettingsRequest = {
  encode(_: GetOIDCSettingsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOIDCSettingsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOIDCSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetOIDCSettingsRequest {
    return {};
  },

  toJSON(_: GetOIDCSettingsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOIDCSettingsRequest>, I>>(base?: I): GetOIDCSettingsRequest {
    return GetOIDCSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOIDCSettingsRequest>, I>>(_: I): GetOIDCSettingsRequest {
    const message = createBaseGetOIDCSettingsRequest();
    return message;
  },
};

function createBaseGetOIDCSettingsResponse(): GetOIDCSettingsResponse {
  return { settings: undefined };
}

export const GetOIDCSettingsResponse = {
  encode(message: GetOIDCSettingsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.settings !== undefined) {
      OIDCSettings.encode(message.settings, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOIDCSettingsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOIDCSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.settings = OIDCSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOIDCSettingsResponse {
    return { settings: isSet(object.settings) ? OIDCSettings.fromJSON(object.settings) : undefined };
  },

  toJSON(message: GetOIDCSettingsResponse): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = OIDCSettings.toJSON(message.settings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOIDCSettingsResponse>, I>>(base?: I): GetOIDCSettingsResponse {
    return GetOIDCSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOIDCSettingsResponse>, I>>(object: I): GetOIDCSettingsResponse {
    const message = createBaseGetOIDCSettingsResponse();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? OIDCSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

function createBaseAddOIDCSettingsRequest(): AddOIDCSettingsRequest {
  return {
    accessTokenLifetime: undefined,
    idTokenLifetime: undefined,
    refreshTokenIdleExpiration: undefined,
    refreshTokenExpiration: undefined,
  };
}

export const AddOIDCSettingsRequest = {
  encode(message: AddOIDCSettingsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accessTokenLifetime !== undefined) {
      Duration.encode(message.accessTokenLifetime, writer.uint32(10).fork()).ldelim();
    }
    if (message.idTokenLifetime !== undefined) {
      Duration.encode(message.idTokenLifetime, writer.uint32(18).fork()).ldelim();
    }
    if (message.refreshTokenIdleExpiration !== undefined) {
      Duration.encode(message.refreshTokenIdleExpiration, writer.uint32(26).fork()).ldelim();
    }
    if (message.refreshTokenExpiration !== undefined) {
      Duration.encode(message.refreshTokenExpiration, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOIDCSettingsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessTokenLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idTokenLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.refreshTokenIdleExpiration = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.refreshTokenExpiration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCSettingsRequest {
    return {
      accessTokenLifetime: isSet(object.accessTokenLifetime)
        ? Duration.fromJSON(object.accessTokenLifetime)
        : undefined,
      idTokenLifetime: isSet(object.idTokenLifetime) ? Duration.fromJSON(object.idTokenLifetime) : undefined,
      refreshTokenIdleExpiration: isSet(object.refreshTokenIdleExpiration)
        ? Duration.fromJSON(object.refreshTokenIdleExpiration)
        : undefined,
      refreshTokenExpiration: isSet(object.refreshTokenExpiration)
        ? Duration.fromJSON(object.refreshTokenExpiration)
        : undefined,
    };
  },

  toJSON(message: AddOIDCSettingsRequest): unknown {
    const obj: any = {};
    if (message.accessTokenLifetime !== undefined) {
      obj.accessTokenLifetime = Duration.toJSON(message.accessTokenLifetime);
    }
    if (message.idTokenLifetime !== undefined) {
      obj.idTokenLifetime = Duration.toJSON(message.idTokenLifetime);
    }
    if (message.refreshTokenIdleExpiration !== undefined) {
      obj.refreshTokenIdleExpiration = Duration.toJSON(message.refreshTokenIdleExpiration);
    }
    if (message.refreshTokenExpiration !== undefined) {
      obj.refreshTokenExpiration = Duration.toJSON(message.refreshTokenExpiration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOIDCSettingsRequest>, I>>(base?: I): AddOIDCSettingsRequest {
    return AddOIDCSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOIDCSettingsRequest>, I>>(object: I): AddOIDCSettingsRequest {
    const message = createBaseAddOIDCSettingsRequest();
    message.accessTokenLifetime = (object.accessTokenLifetime !== undefined && object.accessTokenLifetime !== null)
      ? Duration.fromPartial(object.accessTokenLifetime)
      : undefined;
    message.idTokenLifetime = (object.idTokenLifetime !== undefined && object.idTokenLifetime !== null)
      ? Duration.fromPartial(object.idTokenLifetime)
      : undefined;
    message.refreshTokenIdleExpiration =
      (object.refreshTokenIdleExpiration !== undefined && object.refreshTokenIdleExpiration !== null)
        ? Duration.fromPartial(object.refreshTokenIdleExpiration)
        : undefined;
    message.refreshTokenExpiration =
      (object.refreshTokenExpiration !== undefined && object.refreshTokenExpiration !== null)
        ? Duration.fromPartial(object.refreshTokenExpiration)
        : undefined;
    return message;
  },
};

function createBaseAddOIDCSettingsResponse(): AddOIDCSettingsResponse {
  return { details: undefined };
}

export const AddOIDCSettingsResponse = {
  encode(message: AddOIDCSettingsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOIDCSettingsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCSettingsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddOIDCSettingsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOIDCSettingsResponse>, I>>(base?: I): AddOIDCSettingsResponse {
    return AddOIDCSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOIDCSettingsResponse>, I>>(object: I): AddOIDCSettingsResponse {
    const message = createBaseAddOIDCSettingsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOIDCSettingsRequest(): UpdateOIDCSettingsRequest {
  return {
    accessTokenLifetime: undefined,
    idTokenLifetime: undefined,
    refreshTokenIdleExpiration: undefined,
    refreshTokenExpiration: undefined,
  };
}

export const UpdateOIDCSettingsRequest = {
  encode(message: UpdateOIDCSettingsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accessTokenLifetime !== undefined) {
      Duration.encode(message.accessTokenLifetime, writer.uint32(10).fork()).ldelim();
    }
    if (message.idTokenLifetime !== undefined) {
      Duration.encode(message.idTokenLifetime, writer.uint32(18).fork()).ldelim();
    }
    if (message.refreshTokenIdleExpiration !== undefined) {
      Duration.encode(message.refreshTokenIdleExpiration, writer.uint32(26).fork()).ldelim();
    }
    if (message.refreshTokenExpiration !== undefined) {
      Duration.encode(message.refreshTokenExpiration, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOIDCSettingsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOIDCSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessTokenLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idTokenLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.refreshTokenIdleExpiration = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.refreshTokenExpiration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOIDCSettingsRequest {
    return {
      accessTokenLifetime: isSet(object.accessTokenLifetime)
        ? Duration.fromJSON(object.accessTokenLifetime)
        : undefined,
      idTokenLifetime: isSet(object.idTokenLifetime) ? Duration.fromJSON(object.idTokenLifetime) : undefined,
      refreshTokenIdleExpiration: isSet(object.refreshTokenIdleExpiration)
        ? Duration.fromJSON(object.refreshTokenIdleExpiration)
        : undefined,
      refreshTokenExpiration: isSet(object.refreshTokenExpiration)
        ? Duration.fromJSON(object.refreshTokenExpiration)
        : undefined,
    };
  },

  toJSON(message: UpdateOIDCSettingsRequest): unknown {
    const obj: any = {};
    if (message.accessTokenLifetime !== undefined) {
      obj.accessTokenLifetime = Duration.toJSON(message.accessTokenLifetime);
    }
    if (message.idTokenLifetime !== undefined) {
      obj.idTokenLifetime = Duration.toJSON(message.idTokenLifetime);
    }
    if (message.refreshTokenIdleExpiration !== undefined) {
      obj.refreshTokenIdleExpiration = Duration.toJSON(message.refreshTokenIdleExpiration);
    }
    if (message.refreshTokenExpiration !== undefined) {
      obj.refreshTokenExpiration = Duration.toJSON(message.refreshTokenExpiration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOIDCSettingsRequest>, I>>(base?: I): UpdateOIDCSettingsRequest {
    return UpdateOIDCSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOIDCSettingsRequest>, I>>(object: I): UpdateOIDCSettingsRequest {
    const message = createBaseUpdateOIDCSettingsRequest();
    message.accessTokenLifetime = (object.accessTokenLifetime !== undefined && object.accessTokenLifetime !== null)
      ? Duration.fromPartial(object.accessTokenLifetime)
      : undefined;
    message.idTokenLifetime = (object.idTokenLifetime !== undefined && object.idTokenLifetime !== null)
      ? Duration.fromPartial(object.idTokenLifetime)
      : undefined;
    message.refreshTokenIdleExpiration =
      (object.refreshTokenIdleExpiration !== undefined && object.refreshTokenIdleExpiration !== null)
        ? Duration.fromPartial(object.refreshTokenIdleExpiration)
        : undefined;
    message.refreshTokenExpiration =
      (object.refreshTokenExpiration !== undefined && object.refreshTokenExpiration !== null)
        ? Duration.fromPartial(object.refreshTokenExpiration)
        : undefined;
    return message;
  },
};

function createBaseUpdateOIDCSettingsResponse(): UpdateOIDCSettingsResponse {
  return { details: undefined };
}

export const UpdateOIDCSettingsResponse = {
  encode(message: UpdateOIDCSettingsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOIDCSettingsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOIDCSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOIDCSettingsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOIDCSettingsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOIDCSettingsResponse>, I>>(base?: I): UpdateOIDCSettingsResponse {
    return UpdateOIDCSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOIDCSettingsResponse>, I>>(object: I): UpdateOIDCSettingsResponse {
    const message = createBaseUpdateOIDCSettingsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetSecurityPolicyRequest(): GetSecurityPolicyRequest {
  return {};
}

export const GetSecurityPolicyRequest = {
  encode(_: GetSecurityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSecurityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecurityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSecurityPolicyRequest {
    return {};
  },

  toJSON(_: GetSecurityPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSecurityPolicyRequest>, I>>(base?: I): GetSecurityPolicyRequest {
    return GetSecurityPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSecurityPolicyRequest>, I>>(_: I): GetSecurityPolicyRequest {
    const message = createBaseGetSecurityPolicyRequest();
    return message;
  },
};

function createBaseGetSecurityPolicyResponse(): GetSecurityPolicyResponse {
  return { policy: undefined };
}

export const GetSecurityPolicyResponse = {
  encode(message: GetSecurityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      SecurityPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSecurityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecurityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = SecurityPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecurityPolicyResponse {
    return { policy: isSet(object.policy) ? SecurityPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetSecurityPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = SecurityPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSecurityPolicyResponse>, I>>(base?: I): GetSecurityPolicyResponse {
    return GetSecurityPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSecurityPolicyResponse>, I>>(object: I): GetSecurityPolicyResponse {
    const message = createBaseGetSecurityPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? SecurityPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseSetSecurityPolicyRequest(): SetSecurityPolicyRequest {
  return { enableIframeEmbedding: false, allowedOrigins: [] };
}

export const SetSecurityPolicyRequest = {
  encode(message: SetSecurityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.enableIframeEmbedding === true) {
      writer.uint32(8).bool(message.enableIframeEmbedding);
    }
    for (const v of message.allowedOrigins) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSecurityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSecurityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableIframeEmbedding = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.allowedOrigins.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSecurityPolicyRequest {
    return {
      enableIframeEmbedding: isSet(object.enableIframeEmbedding) ? Boolean(object.enableIframeEmbedding) : false,
      allowedOrigins: Array.isArray(object?.allowedOrigins) ? object.allowedOrigins.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: SetSecurityPolicyRequest): unknown {
    const obj: any = {};
    if (message.enableIframeEmbedding === true) {
      obj.enableIframeEmbedding = message.enableIframeEmbedding;
    }
    if (message.allowedOrigins?.length) {
      obj.allowedOrigins = message.allowedOrigins;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSecurityPolicyRequest>, I>>(base?: I): SetSecurityPolicyRequest {
    return SetSecurityPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSecurityPolicyRequest>, I>>(object: I): SetSecurityPolicyRequest {
    const message = createBaseSetSecurityPolicyRequest();
    message.enableIframeEmbedding = object.enableIframeEmbedding ?? false;
    message.allowedOrigins = object.allowedOrigins?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetSecurityPolicyResponse(): SetSecurityPolicyResponse {
  return { details: undefined };
}

export const SetSecurityPolicyResponse = {
  encode(message: SetSecurityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSecurityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSecurityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSecurityPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetSecurityPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSecurityPolicyResponse>, I>>(base?: I): SetSecurityPolicyResponse {
    return SetSecurityPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSecurityPolicyResponse>, I>>(object: I): SetSecurityPolicyResponse {
    const message = createBaseSetSecurityPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseIsOrgUniqueRequest(): IsOrgUniqueRequest {
  return { name: "", domain: "" };
}

export const IsOrgUniqueRequest = {
  encode(message: IsOrgUniqueRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IsOrgUniqueRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsOrgUniqueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsOrgUniqueRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      domain: isSet(object.domain) ? String(object.domain) : "",
    };
  },

  toJSON(message: IsOrgUniqueRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IsOrgUniqueRequest>, I>>(base?: I): IsOrgUniqueRequest {
    return IsOrgUniqueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IsOrgUniqueRequest>, I>>(object: I): IsOrgUniqueRequest {
    const message = createBaseIsOrgUniqueRequest();
    message.name = object.name ?? "";
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseIsOrgUniqueResponse(): IsOrgUniqueResponse {
  return { isUnique: false };
}

export const IsOrgUniqueResponse = {
  encode(message: IsOrgUniqueResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isUnique === true) {
      writer.uint32(8).bool(message.isUnique);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IsOrgUniqueResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsOrgUniqueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isUnique = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsOrgUniqueResponse {
    return { isUnique: isSet(object.isUnique) ? Boolean(object.isUnique) : false };
  },

  toJSON(message: IsOrgUniqueResponse): unknown {
    const obj: any = {};
    if (message.isUnique === true) {
      obj.isUnique = message.isUnique;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IsOrgUniqueResponse>, I>>(base?: I): IsOrgUniqueResponse {
    return IsOrgUniqueResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IsOrgUniqueResponse>, I>>(object: I): IsOrgUniqueResponse {
    const message = createBaseIsOrgUniqueResponse();
    message.isUnique = object.isUnique ?? false;
    return message;
  },
};

function createBaseGetOrgByIDRequest(): GetOrgByIDRequest {
  return { id: "" };
}

export const GetOrgByIDRequest = {
  encode(message: GetOrgByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgByIDRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetOrgByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgByIDRequest>, I>>(base?: I): GetOrgByIDRequest {
    return GetOrgByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgByIDRequest>, I>>(object: I): GetOrgByIDRequest {
    const message = createBaseGetOrgByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetOrgByIDResponse(): GetOrgByIDResponse {
  return { org: undefined };
}

export const GetOrgByIDResponse = {
  encode(message: GetOrgByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.org !== undefined) {
      Org.encode(message.org, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = Org.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgByIDResponse {
    return { org: isSet(object.org) ? Org.fromJSON(object.org) : undefined };
  },

  toJSON(message: GetOrgByIDResponse): unknown {
    const obj: any = {};
    if (message.org !== undefined) {
      obj.org = Org.toJSON(message.org);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgByIDResponse>, I>>(base?: I): GetOrgByIDResponse {
    return GetOrgByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgByIDResponse>, I>>(object: I): GetOrgByIDResponse {
    const message = createBaseGetOrgByIDResponse();
    message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
    return message;
  },
};

function createBaseListOrgsRequest(): ListOrgsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListOrgsRequest = {
  encode(message: ListOrgsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      OrgQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(OrgQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? orgFieldNameFromJSON(object.sortingColumn) : 0,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => OrgQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = orgFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => OrgQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgsRequest>, I>>(base?: I): ListOrgsRequest {
    return ListOrgsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgsRequest>, I>>(object: I): ListOrgsRequest {
    const message = createBaseListOrgsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => OrgQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListOrgsResponse(): ListOrgsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListOrgsResponse = {
  encode(message: ListOrgsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      Org.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(Org.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? orgFieldNameFromJSON(object.sortingColumn) : 0,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Org.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = orgFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Org.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgsResponse>, I>>(base?: I): ListOrgsResponse {
    return ListOrgsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgsResponse>, I>>(object: I): ListOrgsResponse {
    const message = createBaseListOrgsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => Org.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSetUpOrgRequest(): SetUpOrgRequest {
  return { org: undefined, human: undefined, roles: [] };
}

export const SetUpOrgRequest = {
  encode(message: SetUpOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.org !== undefined) {
      SetUpOrgRequest_Org.encode(message.org, writer.uint32(10).fork()).ldelim();
    }
    if (message.human !== undefined) {
      SetUpOrgRequest_Human.encode(message.human, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.roles) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUpOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = SetUpOrgRequest_Org.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.human = SetUpOrgRequest_Human.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest {
    return {
      org: isSet(object.org) ? SetUpOrgRequest_Org.fromJSON(object.org) : undefined,
      human: isSet(object.human) ? SetUpOrgRequest_Human.fromJSON(object.human) : undefined,
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: SetUpOrgRequest): unknown {
    const obj: any = {};
    if (message.org !== undefined) {
      obj.org = SetUpOrgRequest_Org.toJSON(message.org);
    }
    if (message.human !== undefined) {
      obj.human = SetUpOrgRequest_Human.toJSON(message.human);
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUpOrgRequest>, I>>(base?: I): SetUpOrgRequest {
    return SetUpOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUpOrgRequest>, I>>(object: I): SetUpOrgRequest {
    const message = createBaseSetUpOrgRequest();
    message.org = (object.org !== undefined && object.org !== null)
      ? SetUpOrgRequest_Org.fromPartial(object.org)
      : undefined;
    message.human = (object.human !== undefined && object.human !== null)
      ? SetUpOrgRequest_Human.fromPartial(object.human)
      : undefined;
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetUpOrgRequest_Org(): SetUpOrgRequest_Org {
  return { name: "", domain: "" };
}

export const SetUpOrgRequest_Org = {
  encode(message: SetUpOrgRequest_Org, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUpOrgRequest_Org {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Org();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Org {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      domain: isSet(object.domain) ? String(object.domain) : "",
    };
  },

  toJSON(message: SetUpOrgRequest_Org): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUpOrgRequest_Org>, I>>(base?: I): SetUpOrgRequest_Org {
    return SetUpOrgRequest_Org.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUpOrgRequest_Org>, I>>(object: I): SetUpOrgRequest_Org {
    const message = createBaseSetUpOrgRequest_Org();
    message.name = object.name ?? "";
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseSetUpOrgRequest_Human(): SetUpOrgRequest_Human {
  return { userName: "", profile: undefined, email: undefined, phone: undefined, password: "" };
}

export const SetUpOrgRequest_Human = {
  encode(message: SetUpOrgRequest_Human, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.profile !== undefined) {
      SetUpOrgRequest_Human_Profile.encode(message.profile, writer.uint32(18).fork()).ldelim();
    }
    if (message.email !== undefined) {
      SetUpOrgRequest_Human_Email.encode(message.email, writer.uint32(26).fork()).ldelim();
    }
    if (message.phone !== undefined) {
      SetUpOrgRequest_Human_Phone.encode(message.phone, writer.uint32(34).fork()).ldelim();
    }
    if (message.password !== "") {
      writer.uint32(42).string(message.password);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUpOrgRequest_Human {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Human();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = SetUpOrgRequest_Human_Profile.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = SetUpOrgRequest_Human_Email.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.phone = SetUpOrgRequest_Human_Phone.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Human {
    return {
      userName: isSet(object.userName) ? String(object.userName) : "",
      profile: isSet(object.profile) ? SetUpOrgRequest_Human_Profile.fromJSON(object.profile) : undefined,
      email: isSet(object.email) ? SetUpOrgRequest_Human_Email.fromJSON(object.email) : undefined,
      phone: isSet(object.phone) ? SetUpOrgRequest_Human_Phone.fromJSON(object.phone) : undefined,
      password: isSet(object.password) ? String(object.password) : "",
    };
  },

  toJSON(message: SetUpOrgRequest_Human): unknown {
    const obj: any = {};
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.profile !== undefined) {
      obj.profile = SetUpOrgRequest_Human_Profile.toJSON(message.profile);
    }
    if (message.email !== undefined) {
      obj.email = SetUpOrgRequest_Human_Email.toJSON(message.email);
    }
    if (message.phone !== undefined) {
      obj.phone = SetUpOrgRequest_Human_Phone.toJSON(message.phone);
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUpOrgRequest_Human>, I>>(base?: I): SetUpOrgRequest_Human {
    return SetUpOrgRequest_Human.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUpOrgRequest_Human>, I>>(object: I): SetUpOrgRequest_Human {
    const message = createBaseSetUpOrgRequest_Human();
    message.userName = object.userName ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? SetUpOrgRequest_Human_Profile.fromPartial(object.profile)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null)
      ? SetUpOrgRequest_Human_Email.fromPartial(object.email)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null)
      ? SetUpOrgRequest_Human_Phone.fromPartial(object.phone)
      : undefined;
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSetUpOrgRequest_Human_Profile(): SetUpOrgRequest_Human_Profile {
  return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}

export const SetUpOrgRequest_Human_Profile = {
  encode(message: SetUpOrgRequest_Human_Profile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(42).string(message.preferredLanguage);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUpOrgRequest_Human_Profile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Human_Profile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Human_Profile {
    return {
      firstName: isSet(object.firstName) ? String(object.firstName) : "",
      lastName: isSet(object.lastName) ? String(object.lastName) : "",
      nickName: isSet(object.nickName) ? String(object.nickName) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      preferredLanguage: isSet(object.preferredLanguage) ? String(object.preferredLanguage) : "",
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
    };
  },

  toJSON(message: SetUpOrgRequest_Human_Profile): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.preferredLanguage !== "") {
      obj.preferredLanguage = message.preferredLanguage;
    }
    if (message.gender !== 0) {
      obj.gender = genderToJSON(message.gender);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUpOrgRequest_Human_Profile>, I>>(base?: I): SetUpOrgRequest_Human_Profile {
    return SetUpOrgRequest_Human_Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUpOrgRequest_Human_Profile>, I>>(
    object: I,
  ): SetUpOrgRequest_Human_Profile {
    const message = createBaseSetUpOrgRequest_Human_Profile();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.nickName = object.nickName ?? "";
    message.displayName = object.displayName ?? "";
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.gender = object.gender ?? 0;
    return message;
  },
};

function createBaseSetUpOrgRequest_Human_Email(): SetUpOrgRequest_Human_Email {
  return { email: "", isEmailVerified: false };
}

export const SetUpOrgRequest_Human_Email = {
  encode(message: SetUpOrgRequest_Human_Email, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.isEmailVerified === true) {
      writer.uint32(16).bool(message.isEmailVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUpOrgRequest_Human_Email {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Human_Email();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Human_Email {
    return {
      email: isSet(object.email) ? String(object.email) : "",
      isEmailVerified: isSet(object.isEmailVerified) ? Boolean(object.isEmailVerified) : false,
    };
  },

  toJSON(message: SetUpOrgRequest_Human_Email): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.isEmailVerified === true) {
      obj.isEmailVerified = message.isEmailVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUpOrgRequest_Human_Email>, I>>(base?: I): SetUpOrgRequest_Human_Email {
    return SetUpOrgRequest_Human_Email.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUpOrgRequest_Human_Email>, I>>(object: I): SetUpOrgRequest_Human_Email {
    const message = createBaseSetUpOrgRequest_Human_Email();
    message.email = object.email ?? "";
    message.isEmailVerified = object.isEmailVerified ?? false;
    return message;
  },
};

function createBaseSetUpOrgRequest_Human_Phone(): SetUpOrgRequest_Human_Phone {
  return { phone: "", isPhoneVerified: false };
}

export const SetUpOrgRequest_Human_Phone = {
  encode(message: SetUpOrgRequest_Human_Phone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.phone !== "") {
      writer.uint32(10).string(message.phone);
    }
    if (message.isPhoneVerified === true) {
      writer.uint32(16).bool(message.isPhoneVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUpOrgRequest_Human_Phone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Human_Phone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPhoneVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Human_Phone {
    return {
      phone: isSet(object.phone) ? String(object.phone) : "",
      isPhoneVerified: isSet(object.isPhoneVerified) ? Boolean(object.isPhoneVerified) : false,
    };
  },

  toJSON(message: SetUpOrgRequest_Human_Phone): unknown {
    const obj: any = {};
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.isPhoneVerified === true) {
      obj.isPhoneVerified = message.isPhoneVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUpOrgRequest_Human_Phone>, I>>(base?: I): SetUpOrgRequest_Human_Phone {
    return SetUpOrgRequest_Human_Phone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUpOrgRequest_Human_Phone>, I>>(object: I): SetUpOrgRequest_Human_Phone {
    const message = createBaseSetUpOrgRequest_Human_Phone();
    message.phone = object.phone ?? "";
    message.isPhoneVerified = object.isPhoneVerified ?? false;
    return message;
  },
};

function createBaseSetUpOrgResponse(): SetUpOrgResponse {
  return { details: undefined, orgId: "", userId: "" };
}

export const SetUpOrgResponse = {
  encode(message: SetUpOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.orgId !== "") {
      writer.uint32(18).string(message.orgId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUpOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      orgId: isSet(object.orgId) ? String(object.orgId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
    };
  },

  toJSON(message: SetUpOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUpOrgResponse>, I>>(base?: I): SetUpOrgResponse {
    return SetUpOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUpOrgResponse>, I>>(object: I): SetUpOrgResponse {
    const message = createBaseSetUpOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.orgId = object.orgId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveOrgRequest(): RemoveOrgRequest {
  return { orgId: "" };
}

export const RemoveOrgRequest = {
  encode(message: RemoveOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgRequest {
    return { orgId: isSet(object.orgId) ? String(object.orgId) : "" };
  },

  toJSON(message: RemoveOrgRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgRequest>, I>>(base?: I): RemoveOrgRequest {
    return RemoveOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgRequest>, I>>(object: I): RemoveOrgRequest {
    const message = createBaseRemoveOrgRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseRemoveOrgResponse(): RemoveOrgResponse {
  return { details: undefined };
}

export const RemoveOrgResponse = {
  encode(message: RemoveOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgResponse>, I>>(base?: I): RemoveOrgResponse {
    return RemoveOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgResponse>, I>>(object: I): RemoveOrgResponse {
    const message = createBaseRemoveOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetIDPByIDRequest(): GetIDPByIDRequest {
  return { id: "" };
}

export const GetIDPByIDRequest = {
  encode(message: GetIDPByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIDPByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIDPByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIDPByIDRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetIDPByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIDPByIDRequest>, I>>(base?: I): GetIDPByIDRequest {
    return GetIDPByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIDPByIDRequest>, I>>(object: I): GetIDPByIDRequest {
    const message = createBaseGetIDPByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetIDPByIDResponse(): GetIDPByIDResponse {
  return { idp: undefined };
}

export const GetIDPByIDResponse = {
  encode(message: GetIDPByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idp !== undefined) {
      IDP.encode(message.idp, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIDPByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIDPByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = IDP.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIDPByIDResponse {
    return { idp: isSet(object.idp) ? IDP.fromJSON(object.idp) : undefined };
  },

  toJSON(message: GetIDPByIDResponse): unknown {
    const obj: any = {};
    if (message.idp !== undefined) {
      obj.idp = IDP.toJSON(message.idp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIDPByIDResponse>, I>>(base?: I): GetIDPByIDResponse {
    return GetIDPByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIDPByIDResponse>, I>>(object: I): GetIDPByIDResponse {
    const message = createBaseGetIDPByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? IDP.fromPartial(object.idp) : undefined;
    return message;
  },
};

function createBaseListIDPsRequest(): ListIDPsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListIDPsRequest = {
  encode(message: ListIDPsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      IDPQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIDPsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(IDPQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIDPsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? iDPFieldNameFromJSON(object.sortingColumn) : 0,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => IDPQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIDPsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = iDPFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => IDPQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIDPsRequest>, I>>(base?: I): ListIDPsRequest {
    return ListIDPsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIDPsRequest>, I>>(object: I): ListIDPsRequest {
    const message = createBaseListIDPsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => IDPQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIDPQuery(): IDPQuery {
  return { idpIdQuery: undefined, idpNameQuery: undefined };
}

export const IDPQuery = {
  encode(message: IDPQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpIdQuery !== undefined) {
      IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpNameQuery !== undefined) {
      IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IDPQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIDPQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IDPQuery {
    return {
      idpIdQuery: isSet(object.idpIdQuery) ? IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
      idpNameQuery: isSet(object.idpNameQuery) ? IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
    };
  },

  toJSON(message: IDPQuery): unknown {
    const obj: any = {};
    if (message.idpIdQuery !== undefined) {
      obj.idpIdQuery = IDPIDQuery.toJSON(message.idpIdQuery);
    }
    if (message.idpNameQuery !== undefined) {
      obj.idpNameQuery = IDPNameQuery.toJSON(message.idpNameQuery);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IDPQuery>, I>>(base?: I): IDPQuery {
    return IDPQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IDPQuery>, I>>(object: I): IDPQuery {
    const message = createBaseIDPQuery();
    message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
      ? IDPIDQuery.fromPartial(object.idpIdQuery)
      : undefined;
    message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
      ? IDPNameQuery.fromPartial(object.idpNameQuery)
      : undefined;
    return message;
  },
};

function createBaseListIDPsResponse(): ListIDPsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListIDPsResponse = {
  encode(message: ListIDPsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      IDP.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIDPsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(IDP.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIDPsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? iDPFieldNameFromJSON(object.sortingColumn) : 0,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => IDP.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIDPsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = iDPFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => IDP.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIDPsResponse>, I>>(base?: I): ListIDPsResponse {
    return ListIDPsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIDPsResponse>, I>>(object: I): ListIDPsResponse {
    const message = createBaseListIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => IDP.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOIDCIDPRequest(): AddOIDCIDPRequest {
  return {
    name: "",
    stylingType: 0,
    clientId: "",
    clientSecret: "",
    issuer: "",
    scopes: [],
    displayNameMapping: 0,
    usernameMapping: 0,
    autoRegister: false,
  };
}

export const AddOIDCIDPRequest = {
  encode(message: AddOIDCIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(16).int32(message.stylingType);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.issuer !== "") {
      writer.uint32(42).string(message.issuer);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.displayNameMapping !== 0) {
      writer.uint32(56).int32(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      writer.uint32(64).int32(message.usernameMapping);
    }
    if (message.autoRegister === true) {
      writer.uint32(72).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOIDCIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.displayNameMapping = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.usernameMapping = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCIDPRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      displayNameMapping: isSet(object.displayNameMapping) ? oIDCMappingFieldFromJSON(object.displayNameMapping) : 0,
      usernameMapping: isSet(object.usernameMapping) ? oIDCMappingFieldFromJSON(object.usernameMapping) : 0,
      autoRegister: isSet(object.autoRegister) ? Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: AddOIDCIDPRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.displayNameMapping !== 0) {
      obj.displayNameMapping = oIDCMappingFieldToJSON(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      obj.usernameMapping = oIDCMappingFieldToJSON(message.usernameMapping);
    }
    if (message.autoRegister === true) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOIDCIDPRequest>, I>>(base?: I): AddOIDCIDPRequest {
    return AddOIDCIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOIDCIDPRequest>, I>>(object: I): AddOIDCIDPRequest {
    const message = createBaseAddOIDCIDPRequest();
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.issuer = object.issuer ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.displayNameMapping = object.displayNameMapping ?? 0;
    message.usernameMapping = object.usernameMapping ?? 0;
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseAddOIDCIDPResponse(): AddOIDCIDPResponse {
  return { details: undefined, idpId: "" };
}

export const AddOIDCIDPResponse = {
  encode(message: AddOIDCIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOIDCIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCIDPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
    };
  },

  toJSON(message: AddOIDCIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOIDCIDPResponse>, I>>(base?: I): AddOIDCIDPResponse {
    return AddOIDCIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOIDCIDPResponse>, I>>(object: I): AddOIDCIDPResponse {
    const message = createBaseAddOIDCIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseAddJWTIDPRequest(): AddJWTIDPRequest {
  return {
    name: "",
    stylingType: 0,
    jwtEndpoint: "",
    issuer: "",
    keysEndpoint: "",
    headerName: "",
    autoRegister: false,
  };
}

export const AddJWTIDPRequest = {
  encode(message: AddJWTIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(16).int32(message.stylingType);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(26).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(42).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(50).string(message.headerName);
    }
    if (message.autoRegister === true) {
      writer.uint32(56).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddJWTIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTIDPRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      jwtEndpoint: isSet(object.jwtEndpoint) ? String(object.jwtEndpoint) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? String(object.headerName) : "",
      autoRegister: isSet(object.autoRegister) ? Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: AddJWTIDPRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.autoRegister === true) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddJWTIDPRequest>, I>>(base?: I): AddJWTIDPRequest {
    return AddJWTIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddJWTIDPRequest>, I>>(object: I): AddJWTIDPRequest {
    const message = createBaseAddJWTIDPRequest();
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseAddJWTIDPResponse(): AddJWTIDPResponse {
  return { details: undefined, idpId: "" };
}

export const AddJWTIDPResponse = {
  encode(message: AddJWTIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddJWTIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTIDPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
    };
  },

  toJSON(message: AddJWTIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddJWTIDPResponse>, I>>(base?: I): AddJWTIDPResponse {
    return AddJWTIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddJWTIDPResponse>, I>>(object: I): AddJWTIDPResponse {
    const message = createBaseAddJWTIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseUpdateIDPRequest(): UpdateIDPRequest {
  return { idpId: "", name: "", stylingType: 0, autoRegister: false };
}

export const UpdateIDPRequest = {
  encode(message: UpdateIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(24).int32(message.stylingType);
    }
    if (message.autoRegister === true) {
      writer.uint32(32).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPRequest {
    return {
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      autoRegister: isSet(object.autoRegister) ? Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: UpdateIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.autoRegister === true) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIDPRequest>, I>>(base?: I): UpdateIDPRequest {
    return UpdateIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIDPRequest>, I>>(object: I): UpdateIDPRequest {
    const message = createBaseUpdateIDPRequest();
    message.idpId = object.idpId ?? "";
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseUpdateIDPResponse(): UpdateIDPResponse {
  return { details: undefined };
}

export const UpdateIDPResponse = {
  encode(message: UpdateIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIDPResponse>, I>>(base?: I): UpdateIDPResponse {
    return UpdateIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIDPResponse>, I>>(object: I): UpdateIDPResponse {
    const message = createBaseUpdateIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateIDPRequest(): DeactivateIDPRequest {
  return { idpId: "" };
}

export const DeactivateIDPRequest = {
  encode(message: DeactivateIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateIDPRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: DeactivateIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateIDPRequest>, I>>(base?: I): DeactivateIDPRequest {
    return DeactivateIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateIDPRequest>, I>>(object: I): DeactivateIDPRequest {
    const message = createBaseDeactivateIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseDeactivateIDPResponse(): DeactivateIDPResponse {
  return { details: undefined };
}

export const DeactivateIDPResponse = {
  encode(message: DeactivateIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateIDPResponse>, I>>(base?: I): DeactivateIDPResponse {
    return DeactivateIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateIDPResponse>, I>>(object: I): DeactivateIDPResponse {
    const message = createBaseDeactivateIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateIDPRequest(): ReactivateIDPRequest {
  return { idpId: "" };
}

export const ReactivateIDPRequest = {
  encode(message: ReactivateIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateIDPRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: ReactivateIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateIDPRequest>, I>>(base?: I): ReactivateIDPRequest {
    return ReactivateIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateIDPRequest>, I>>(object: I): ReactivateIDPRequest {
    const message = createBaseReactivateIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseReactivateIDPResponse(): ReactivateIDPResponse {
  return { details: undefined };
}

export const ReactivateIDPResponse = {
  encode(message: ReactivateIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateIDPResponse>, I>>(base?: I): ReactivateIDPResponse {
    return ReactivateIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateIDPResponse>, I>>(object: I): ReactivateIDPResponse {
    const message = createBaseReactivateIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveIDPRequest(): RemoveIDPRequest {
  return { idpId: "" };
}

export const RemoveIDPRequest = {
  encode(message: RemoveIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: RemoveIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveIDPRequest>, I>>(base?: I): RemoveIDPRequest {
    return RemoveIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveIDPRequest>, I>>(object: I): RemoveIDPRequest {
    const message = createBaseRemoveIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseRemoveIDPResponse(): RemoveIDPResponse {
  return { details: undefined };
}

export const RemoveIDPResponse = {
  encode(message: RemoveIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveIDPResponse>, I>>(base?: I): RemoveIDPResponse {
    return RemoveIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveIDPResponse>, I>>(object: I): RemoveIDPResponse {
    const message = createBaseRemoveIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateIDPOIDCConfigRequest(): UpdateIDPOIDCConfigRequest {
  return {
    idpId: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    displayNameMapping: 0,
    usernameMapping: 0,
  };
}

export const UpdateIDPOIDCConfigRequest = {
  encode(message: UpdateIDPOIDCConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.displayNameMapping !== 0) {
      writer.uint32(48).int32(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      writer.uint32(56).int32(message.usernameMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIDPOIDCConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPOIDCConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.displayNameMapping = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.usernameMapping = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPOIDCConfigRequest {
    return {
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      displayNameMapping: isSet(object.displayNameMapping) ? oIDCMappingFieldFromJSON(object.displayNameMapping) : 0,
      usernameMapping: isSet(object.usernameMapping) ? oIDCMappingFieldFromJSON(object.usernameMapping) : 0,
    };
  },

  toJSON(message: UpdateIDPOIDCConfigRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.displayNameMapping !== 0) {
      obj.displayNameMapping = oIDCMappingFieldToJSON(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      obj.usernameMapping = oIDCMappingFieldToJSON(message.usernameMapping);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIDPOIDCConfigRequest>, I>>(base?: I): UpdateIDPOIDCConfigRequest {
    return UpdateIDPOIDCConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIDPOIDCConfigRequest>, I>>(object: I): UpdateIDPOIDCConfigRequest {
    const message = createBaseUpdateIDPOIDCConfigRequest();
    message.idpId = object.idpId ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.displayNameMapping = object.displayNameMapping ?? 0;
    message.usernameMapping = object.usernameMapping ?? 0;
    return message;
  },
};

function createBaseUpdateIDPOIDCConfigResponse(): UpdateIDPOIDCConfigResponse {
  return { details: undefined };
}

export const UpdateIDPOIDCConfigResponse = {
  encode(message: UpdateIDPOIDCConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIDPOIDCConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPOIDCConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPOIDCConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateIDPOIDCConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIDPOIDCConfigResponse>, I>>(base?: I): UpdateIDPOIDCConfigResponse {
    return UpdateIDPOIDCConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIDPOIDCConfigResponse>, I>>(object: I): UpdateIDPOIDCConfigResponse {
    const message = createBaseUpdateIDPOIDCConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateIDPJWTConfigRequest(): UpdateIDPJWTConfigRequest {
  return { idpId: "", jwtEndpoint: "", issuer: "", keysEndpoint: "", headerName: "" };
}

export const UpdateIDPJWTConfigRequest = {
  encode(message: UpdateIDPJWTConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(18).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(34).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(42).string(message.headerName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIDPJWTConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPJWTConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headerName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPJWTConfigRequest {
    return {
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? String(object.jwtEndpoint) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? String(object.headerName) : "",
    };
  },

  toJSON(message: UpdateIDPJWTConfigRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIDPJWTConfigRequest>, I>>(base?: I): UpdateIDPJWTConfigRequest {
    return UpdateIDPJWTConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIDPJWTConfigRequest>, I>>(object: I): UpdateIDPJWTConfigRequest {
    const message = createBaseUpdateIDPJWTConfigRequest();
    message.idpId = object.idpId ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    return message;
  },
};

function createBaseUpdateIDPJWTConfigResponse(): UpdateIDPJWTConfigResponse {
  return { details: undefined };
}

export const UpdateIDPJWTConfigResponse = {
  encode(message: UpdateIDPJWTConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIDPJWTConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPJWTConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPJWTConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateIDPJWTConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIDPJWTConfigResponse>, I>>(base?: I): UpdateIDPJWTConfigResponse {
    return UpdateIDPJWTConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIDPJWTConfigResponse>, I>>(object: I): UpdateIDPJWTConfigResponse {
    const message = createBaseUpdateIDPJWTConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProvidersRequest(): ListProvidersRequest {
  return { query: undefined, queries: [] };
}

export const ListProvidersRequest = {
  encode(message: ListProvidersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProviderQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProvidersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(ProviderQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProvidersRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => ProviderQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProvidersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => ProviderQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProvidersRequest>, I>>(base?: I): ListProvidersRequest {
    return ListProvidersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProvidersRequest>, I>>(object: I): ListProvidersRequest {
    const message = createBaseListProvidersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProviderQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProviderQuery(): ProviderQuery {
  return { idpIdQuery: undefined, idpNameQuery: undefined };
}

export const ProviderQuery = {
  encode(message: ProviderQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpIdQuery !== undefined) {
      IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpNameQuery !== undefined) {
      IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProviderQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProviderQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProviderQuery {
    return {
      idpIdQuery: isSet(object.idpIdQuery) ? IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
      idpNameQuery: isSet(object.idpNameQuery) ? IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
    };
  },

  toJSON(message: ProviderQuery): unknown {
    const obj: any = {};
    if (message.idpIdQuery !== undefined) {
      obj.idpIdQuery = IDPIDQuery.toJSON(message.idpIdQuery);
    }
    if (message.idpNameQuery !== undefined) {
      obj.idpNameQuery = IDPNameQuery.toJSON(message.idpNameQuery);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProviderQuery>, I>>(base?: I): ProviderQuery {
    return ProviderQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProviderQuery>, I>>(object: I): ProviderQuery {
    const message = createBaseProviderQuery();
    message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
      ? IDPIDQuery.fromPartial(object.idpIdQuery)
      : undefined;
    message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
      ? IDPNameQuery.fromPartial(object.idpNameQuery)
      : undefined;
    return message;
  },
};

function createBaseListProvidersResponse(): ListProvidersResponse {
  return { details: undefined, result: [] };
}

export const ListProvidersResponse = {
  encode(message: ListProvidersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Provider.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProvidersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Provider.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProvidersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Provider.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProvidersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Provider.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProvidersResponse>, I>>(base?: I): ListProvidersResponse {
    return ListProvidersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProvidersResponse>, I>>(object: I): ListProvidersResponse {
    const message = createBaseListProvidersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Provider.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProviderByIDRequest(): GetProviderByIDRequest {
  return { id: "" };
}

export const GetProviderByIDRequest = {
  encode(message: GetProviderByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProviderByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProviderByIDRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetProviderByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProviderByIDRequest>, I>>(base?: I): GetProviderByIDRequest {
    return GetProviderByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProviderByIDRequest>, I>>(object: I): GetProviderByIDRequest {
    const message = createBaseGetProviderByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetProviderByIDResponse(): GetProviderByIDResponse {
  return { idp: undefined };
}

export const GetProviderByIDResponse = {
  encode(message: GetProviderByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idp !== undefined) {
      Provider.encode(message.idp, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProviderByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = Provider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProviderByIDResponse {
    return { idp: isSet(object.idp) ? Provider.fromJSON(object.idp) : undefined };
  },

  toJSON(message: GetProviderByIDResponse): unknown {
    const obj: any = {};
    if (message.idp !== undefined) {
      obj.idp = Provider.toJSON(message.idp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProviderByIDResponse>, I>>(base?: I): GetProviderByIDResponse {
    return GetProviderByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProviderByIDResponse>, I>>(object: I): GetProviderByIDResponse {
    const message = createBaseGetProviderByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? Provider.fromPartial(object.idp) : undefined;
    return message;
  },
};

function createBaseAddGenericOAuthProviderRequest(): AddGenericOAuthProviderRequest {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    idAttribute: "",
    providerOptions: undefined,
  };
}

export const AddGenericOAuthProviderRequest = {
  encode(message: AddGenericOAuthProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(34).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(42).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(50).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(66).string(message.idAttribute);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOAuthProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOAuthProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOAuthProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? String(object.userEndpoint) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      idAttribute: isSet(object.idAttribute) ? String(object.idAttribute) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGenericOAuthProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.idAttribute !== "") {
      obj.idAttribute = message.idAttribute;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGenericOAuthProviderRequest>, I>>(base?: I): AddGenericOAuthProviderRequest {
    return AddGenericOAuthProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGenericOAuthProviderRequest>, I>>(
    object: I,
  ): AddGenericOAuthProviderRequest {
    const message = createBaseAddGenericOAuthProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGenericOAuthProviderResponse(): AddGenericOAuthProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGenericOAuthProviderResponse = {
  encode(message: AddGenericOAuthProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOAuthProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOAuthProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOAuthProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGenericOAuthProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGenericOAuthProviderResponse>, I>>(base?: I): AddGenericOAuthProviderResponse {
    return AddGenericOAuthProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGenericOAuthProviderResponse>, I>>(
    object: I,
  ): AddGenericOAuthProviderResponse {
    const message = createBaseAddGenericOAuthProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGenericOAuthProviderRequest(): UpdateGenericOAuthProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    idAttribute: "",
    providerOptions: undefined,
  };
}

export const UpdateGenericOAuthProviderRequest = {
  encode(message: UpdateGenericOAuthProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(42).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(58).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(66).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(74).string(message.idAttribute);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOAuthProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOAuthProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOAuthProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? String(object.userEndpoint) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      idAttribute: isSet(object.idAttribute) ? String(object.idAttribute) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGenericOAuthProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.idAttribute !== "") {
      obj.idAttribute = message.idAttribute;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGenericOAuthProviderRequest>, I>>(
    base?: I,
  ): UpdateGenericOAuthProviderRequest {
    return UpdateGenericOAuthProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGenericOAuthProviderRequest>, I>>(
    object: I,
  ): UpdateGenericOAuthProviderRequest {
    const message = createBaseUpdateGenericOAuthProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGenericOAuthProviderResponse(): UpdateGenericOAuthProviderResponse {
  return { details: undefined };
}

export const UpdateGenericOAuthProviderResponse = {
  encode(message: UpdateGenericOAuthProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOAuthProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOAuthProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOAuthProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGenericOAuthProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGenericOAuthProviderResponse>, I>>(
    base?: I,
  ): UpdateGenericOAuthProviderResponse {
    return UpdateGenericOAuthProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGenericOAuthProviderResponse>, I>>(
    object: I,
  ): UpdateGenericOAuthProviderResponse {
    const message = createBaseUpdateGenericOAuthProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGenericOIDCProviderRequest(): AddGenericOIDCProviderRequest {
  return {
    name: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    providerOptions: undefined,
    isIdTokenMapping: false,
  };
}

export const AddGenericOIDCProviderRequest = {
  encode(message: AddGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    if (message.isIdTokenMapping === true) {
      writer.uint32(56).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOIDCProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
      isIdTokenMapping: isSet(object.isIdTokenMapping) ? Boolean(object.isIdTokenMapping) : false,
    };
  },

  toJSON(message: AddGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    if (message.isIdTokenMapping === true) {
      obj.isIdTokenMapping = message.isIdTokenMapping;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGenericOIDCProviderRequest>, I>>(base?: I): AddGenericOIDCProviderRequest {
    return AddGenericOIDCProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGenericOIDCProviderRequest>, I>>(
    object: I,
  ): AddGenericOIDCProviderRequest {
    const message = createBaseAddGenericOIDCProviderRequest();
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseAddGenericOIDCProviderResponse(): AddGenericOIDCProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGenericOIDCProviderResponse = {
  encode(message: AddGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOIDCProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGenericOIDCProviderResponse>, I>>(base?: I): AddGenericOIDCProviderResponse {
    return AddGenericOIDCProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGenericOIDCProviderResponse>, I>>(
    object: I,
  ): AddGenericOIDCProviderResponse {
    const message = createBaseAddGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGenericOIDCProviderRequest(): UpdateGenericOIDCProviderRequest {
  return {
    id: "",
    name: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    providerOptions: undefined,
    isIdTokenMapping: false,
  };
}

export const UpdateGenericOIDCProviderRequest = {
  encode(message: UpdateGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(34).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(42).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    if (message.isIdTokenMapping === true) {
      writer.uint32(64).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOIDCProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
      isIdTokenMapping: isSet(object.isIdTokenMapping) ? Boolean(object.isIdTokenMapping) : false,
    };
  },

  toJSON(message: UpdateGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    if (message.isIdTokenMapping === true) {
      obj.isIdTokenMapping = message.isIdTokenMapping;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGenericOIDCProviderRequest>, I>>(
    base?: I,
  ): UpdateGenericOIDCProviderRequest {
    return UpdateGenericOIDCProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGenericOIDCProviderRequest>, I>>(
    object: I,
  ): UpdateGenericOIDCProviderRequest {
    const message = createBaseUpdateGenericOIDCProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseUpdateGenericOIDCProviderResponse(): UpdateGenericOIDCProviderResponse {
  return { details: undefined };
}

export const UpdateGenericOIDCProviderResponse = {
  encode(message: UpdateGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOIDCProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGenericOIDCProviderResponse>, I>>(
    base?: I,
  ): UpdateGenericOIDCProviderResponse {
    return UpdateGenericOIDCProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGenericOIDCProviderResponse>, I>>(
    object: I,
  ): UpdateGenericOIDCProviderResponse {
    const message = createBaseUpdateGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseMigrateGenericOIDCProviderRequest(): MigrateGenericOIDCProviderRequest {
  return { id: "", azure: undefined, google: undefined };
}

export const MigrateGenericOIDCProviderRequest = {
  encode(message: MigrateGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.azure !== undefined) {
      AddAzureADProviderRequest.encode(message.azure, writer.uint32(18).fork()).ldelim();
    }
    if (message.google !== undefined) {
      AddGoogleProviderRequest.encode(message.google, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MigrateGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.azure = AddAzureADProviderRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.google = AddGoogleProviderRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateGenericOIDCProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      azure: isSet(object.azure) ? AddAzureADProviderRequest.fromJSON(object.azure) : undefined,
      google: isSet(object.google) ? AddGoogleProviderRequest.fromJSON(object.google) : undefined,
    };
  },

  toJSON(message: MigrateGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.azure !== undefined) {
      obj.azure = AddAzureADProviderRequest.toJSON(message.azure);
    }
    if (message.google !== undefined) {
      obj.google = AddGoogleProviderRequest.toJSON(message.google);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigrateGenericOIDCProviderRequest>, I>>(
    base?: I,
  ): MigrateGenericOIDCProviderRequest {
    return MigrateGenericOIDCProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigrateGenericOIDCProviderRequest>, I>>(
    object: I,
  ): MigrateGenericOIDCProviderRequest {
    const message = createBaseMigrateGenericOIDCProviderRequest();
    message.id = object.id ?? "";
    message.azure = (object.azure !== undefined && object.azure !== null)
      ? AddAzureADProviderRequest.fromPartial(object.azure)
      : undefined;
    message.google = (object.google !== undefined && object.google !== null)
      ? AddGoogleProviderRequest.fromPartial(object.google)
      : undefined;
    return message;
  },
};

function createBaseMigrateGenericOIDCProviderResponse(): MigrateGenericOIDCProviderResponse {
  return { details: undefined };
}

export const MigrateGenericOIDCProviderResponse = {
  encode(message: MigrateGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MigrateGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateGenericOIDCProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: MigrateGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigrateGenericOIDCProviderResponse>, I>>(
    base?: I,
  ): MigrateGenericOIDCProviderResponse {
    return MigrateGenericOIDCProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigrateGenericOIDCProviderResponse>, I>>(
    object: I,
  ): MigrateGenericOIDCProviderResponse {
    const message = createBaseMigrateGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddJWTProviderRequest(): AddJWTProviderRequest {
  return { name: "", issuer: "", jwtEndpoint: "", keysEndpoint: "", headerName: "", providerOptions: undefined };
}

export const AddJWTProviderRequest = {
  encode(message: AddJWTProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(26).string(message.jwtEndpoint);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(34).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(42).string(message.headerName);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddJWTProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? String(object.jwtEndpoint) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? String(object.headerName) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddJWTProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddJWTProviderRequest>, I>>(base?: I): AddJWTProviderRequest {
    return AddJWTProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddJWTProviderRequest>, I>>(object: I): AddJWTProviderRequest {
    const message = createBaseAddJWTProviderRequest();
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddJWTProviderResponse(): AddJWTProviderResponse {
  return { details: undefined, id: "" };
}

export const AddJWTProviderResponse = {
  encode(message: AddJWTProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddJWTProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddJWTProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddJWTProviderResponse>, I>>(base?: I): AddJWTProviderResponse {
    return AddJWTProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddJWTProviderResponse>, I>>(object: I): AddJWTProviderResponse {
    const message = createBaseAddJWTProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateJWTProviderRequest(): UpdateJWTProviderRequest {
  return {
    id: "",
    name: "",
    issuer: "",
    jwtEndpoint: "",
    keysEndpoint: "",
    headerName: "",
    providerOptions: undefined,
  };
}

export const UpdateJWTProviderRequest = {
  encode(message: UpdateJWTProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(34).string(message.jwtEndpoint);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(42).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(50).string(message.headerName);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateJWTProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJWTProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJWTProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? String(object.jwtEndpoint) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? String(object.headerName) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateJWTProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJWTProviderRequest>, I>>(base?: I): UpdateJWTProviderRequest {
    return UpdateJWTProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJWTProviderRequest>, I>>(object: I): UpdateJWTProviderRequest {
    const message = createBaseUpdateJWTProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateJWTProviderResponse(): UpdateJWTProviderResponse {
  return { details: undefined };
}

export const UpdateJWTProviderResponse = {
  encode(message: UpdateJWTProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateJWTProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJWTProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJWTProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateJWTProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJWTProviderResponse>, I>>(base?: I): UpdateJWTProviderResponse {
    return UpdateJWTProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJWTProviderResponse>, I>>(object: I): UpdateJWTProviderResponse {
    const message = createBaseUpdateJWTProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddAzureADProviderRequest(): AddAzureADProviderRequest {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    tenant: undefined,
    emailVerified: false,
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddAzureADProviderRequest = {
  encode(message: AddAzureADProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(34).fork()).ldelim();
    }
    if (message.emailVerified === true) {
      writer.uint32(40).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAzureADProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAzureADProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAzureADProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
      emailVerified: isSet(object.emailVerified) ? Boolean(object.emailVerified) : false,
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddAzureADProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.tenant !== undefined) {
      obj.tenant = AzureADTenant.toJSON(message.tenant);
    }
    if (message.emailVerified === true) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAzureADProviderRequest>, I>>(base?: I): AddAzureADProviderRequest {
    return AddAzureADProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAzureADProviderRequest>, I>>(object: I): AddAzureADProviderRequest {
    const message = createBaseAddAzureADProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddAzureADProviderResponse(): AddAzureADProviderResponse {
  return { details: undefined, id: "" };
}

export const AddAzureADProviderResponse = {
  encode(message: AddAzureADProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAzureADProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAzureADProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAzureADProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddAzureADProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAzureADProviderResponse>, I>>(base?: I): AddAzureADProviderResponse {
    return AddAzureADProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAzureADProviderResponse>, I>>(object: I): AddAzureADProviderResponse {
    const message = createBaseAddAzureADProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateAzureADProviderRequest(): UpdateAzureADProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    tenant: undefined,
    emailVerified: false,
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateAzureADProviderRequest = {
  encode(message: UpdateAzureADProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(42).fork()).ldelim();
    }
    if (message.emailVerified === true) {
      writer.uint32(48).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAzureADProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureADProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAzureADProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
      emailVerified: isSet(object.emailVerified) ? Boolean(object.emailVerified) : false,
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateAzureADProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.tenant !== undefined) {
      obj.tenant = AzureADTenant.toJSON(message.tenant);
    }
    if (message.emailVerified === true) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAzureADProviderRequest>, I>>(base?: I): UpdateAzureADProviderRequest {
    return UpdateAzureADProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAzureADProviderRequest>, I>>(object: I): UpdateAzureADProviderRequest {
    const message = createBaseUpdateAzureADProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateAzureADProviderResponse(): UpdateAzureADProviderResponse {
  return { details: undefined };
}

export const UpdateAzureADProviderResponse = {
  encode(message: UpdateAzureADProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAzureADProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureADProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAzureADProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateAzureADProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAzureADProviderResponse>, I>>(base?: I): UpdateAzureADProviderResponse {
    return UpdateAzureADProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAzureADProviderResponse>, I>>(
    object: I,
  ): UpdateAzureADProviderResponse {
    const message = createBaseUpdateAzureADProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubProviderRequest(): AddGitHubProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitHubProviderRequest = {
  encode(message: AddGitHubProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitHubProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitHubProviderRequest>, I>>(base?: I): AddGitHubProviderRequest {
    return AddGitHubProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitHubProviderRequest>, I>>(object: I): AddGitHubProviderRequest {
    const message = createBaseAddGitHubProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubProviderResponse(): AddGitHubProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitHubProviderResponse = {
  encode(message: AddGitHubProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGitHubProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitHubProviderResponse>, I>>(base?: I): AddGitHubProviderResponse {
    return AddGitHubProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitHubProviderResponse>, I>>(object: I): AddGitHubProviderResponse {
    const message = createBaseAddGitHubProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitHubProviderRequest(): UpdateGitHubProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitHubProviderRequest = {
  encode(message: UpdateGitHubProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitHubProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitHubProviderRequest>, I>>(base?: I): UpdateGitHubProviderRequest {
    return UpdateGitHubProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitHubProviderRequest>, I>>(object: I): UpdateGitHubProviderRequest {
    const message = createBaseUpdateGitHubProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitHubProviderResponse(): UpdateGitHubProviderResponse {
  return { details: undefined };
}

export const UpdateGitHubProviderResponse = {
  encode(message: UpdateGitHubProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitHubProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitHubProviderResponse>, I>>(base?: I): UpdateGitHubProviderResponse {
    return UpdateGitHubProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitHubProviderResponse>, I>>(object: I): UpdateGitHubProviderResponse {
    const message = createBaseUpdateGitHubProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubEnterpriseServerProviderRequest(): AddGitHubEnterpriseServerProviderRequest {
  return {
    clientId: "",
    name: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddGitHubEnterpriseServerProviderRequest = {
  encode(message: AddGitHubEnterpriseServerProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(34).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(42).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(50).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubEnterpriseServerProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubEnterpriseServerProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubEnterpriseServerProviderRequest {
    return {
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? String(object.userEndpoint) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitHubEnterpriseServerProviderRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitHubEnterpriseServerProviderRequest>, I>>(
    base?: I,
  ): AddGitHubEnterpriseServerProviderRequest {
    return AddGitHubEnterpriseServerProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitHubEnterpriseServerProviderRequest>, I>>(
    object: I,
  ): AddGitHubEnterpriseServerProviderRequest {
    const message = createBaseAddGitHubEnterpriseServerProviderRequest();
    message.clientId = object.clientId ?? "";
    message.name = object.name ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubEnterpriseServerProviderResponse(): AddGitHubEnterpriseServerProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitHubEnterpriseServerProviderResponse = {
  encode(message: AddGitHubEnterpriseServerProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubEnterpriseServerProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubEnterpriseServerProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubEnterpriseServerProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGitHubEnterpriseServerProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitHubEnterpriseServerProviderResponse>, I>>(
    base?: I,
  ): AddGitHubEnterpriseServerProviderResponse {
    return AddGitHubEnterpriseServerProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitHubEnterpriseServerProviderResponse>, I>>(
    object: I,
  ): AddGitHubEnterpriseServerProviderResponse {
    const message = createBaseAddGitHubEnterpriseServerProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitHubEnterpriseServerProviderRequest(): UpdateGitHubEnterpriseServerProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateGitHubEnterpriseServerProviderRequest = {
  encode(message: UpdateGitHubEnterpriseServerProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(42).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(58).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(66).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubEnterpriseServerProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubEnterpriseServerProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? String(object.userEndpoint) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitHubEnterpriseServerProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>, I>>(
    base?: I,
  ): UpdateGitHubEnterpriseServerProviderRequest {
    return UpdateGitHubEnterpriseServerProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>, I>>(
    object: I,
  ): UpdateGitHubEnterpriseServerProviderRequest {
    const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitHubEnterpriseServerProviderResponse(): UpdateGitHubEnterpriseServerProviderResponse {
  return { details: undefined };
}

export const UpdateGitHubEnterpriseServerProviderResponse = {
  encode(message: UpdateGitHubEnterpriseServerProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubEnterpriseServerProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubEnterpriseServerProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitHubEnterpriseServerProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>, I>>(
    base?: I,
  ): UpdateGitHubEnterpriseServerProviderResponse {
    return UpdateGitHubEnterpriseServerProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>, I>>(
    object: I,
  ): UpdateGitHubEnterpriseServerProviderResponse {
    const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabProviderRequest(): AddGitLabProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitLabProviderRequest = {
  encode(message: AddGitLabProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitLabProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitLabProviderRequest>, I>>(base?: I): AddGitLabProviderRequest {
    return AddGitLabProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitLabProviderRequest>, I>>(object: I): AddGitLabProviderRequest {
    const message = createBaseAddGitLabProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabProviderResponse(): AddGitLabProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitLabProviderResponse = {
  encode(message: AddGitLabProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGitLabProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitLabProviderResponse>, I>>(base?: I): AddGitLabProviderResponse {
    return AddGitLabProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitLabProviderResponse>, I>>(object: I): AddGitLabProviderResponse {
    const message = createBaseAddGitLabProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitLabProviderRequest(): UpdateGitLabProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitLabProviderRequest = {
  encode(message: UpdateGitLabProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitLabProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitLabProviderRequest>, I>>(base?: I): UpdateGitLabProviderRequest {
    return UpdateGitLabProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitLabProviderRequest>, I>>(object: I): UpdateGitLabProviderRequest {
    const message = createBaseUpdateGitLabProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitLabProviderResponse(): UpdateGitLabProviderResponse {
  return { details: undefined };
}

export const UpdateGitLabProviderResponse = {
  encode(message: UpdateGitLabProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitLabProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitLabProviderResponse>, I>>(base?: I): UpdateGitLabProviderResponse {
    return UpdateGitLabProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitLabProviderResponse>, I>>(object: I): UpdateGitLabProviderResponse {
    const message = createBaseUpdateGitLabProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabSelfHostedProviderRequest(): AddGitLabSelfHostedProviderRequest {
  return { issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitLabSelfHostedProviderRequest = {
  encode(message: AddGitLabSelfHostedProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabSelfHostedProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabSelfHostedProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabSelfHostedProviderRequest {
    return {
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitLabSelfHostedProviderRequest): unknown {
    const obj: any = {};
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitLabSelfHostedProviderRequest>, I>>(
    base?: I,
  ): AddGitLabSelfHostedProviderRequest {
    return AddGitLabSelfHostedProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitLabSelfHostedProviderRequest>, I>>(
    object: I,
  ): AddGitLabSelfHostedProviderRequest {
    const message = createBaseAddGitLabSelfHostedProviderRequest();
    message.issuer = object.issuer ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabSelfHostedProviderResponse(): AddGitLabSelfHostedProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitLabSelfHostedProviderResponse = {
  encode(message: AddGitLabSelfHostedProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabSelfHostedProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabSelfHostedProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabSelfHostedProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGitLabSelfHostedProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitLabSelfHostedProviderResponse>, I>>(
    base?: I,
  ): AddGitLabSelfHostedProviderResponse {
    return AddGitLabSelfHostedProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitLabSelfHostedProviderResponse>, I>>(
    object: I,
  ): AddGitLabSelfHostedProviderResponse {
    const message = createBaseAddGitLabSelfHostedProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitLabSelfHostedProviderRequest(): UpdateGitLabSelfHostedProviderRequest {
  return { id: "", issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitLabSelfHostedProviderRequest = {
  encode(message: UpdateGitLabSelfHostedProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(34).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(42).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabSelfHostedProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabSelfHostedProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabSelfHostedProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitLabSelfHostedProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitLabSelfHostedProviderRequest>, I>>(
    base?: I,
  ): UpdateGitLabSelfHostedProviderRequest {
    return UpdateGitLabSelfHostedProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitLabSelfHostedProviderRequest>, I>>(
    object: I,
  ): UpdateGitLabSelfHostedProviderRequest {
    const message = createBaseUpdateGitLabSelfHostedProviderRequest();
    message.id = object.id ?? "";
    message.issuer = object.issuer ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitLabSelfHostedProviderResponse(): UpdateGitLabSelfHostedProviderResponse {
  return { details: undefined };
}

export const UpdateGitLabSelfHostedProviderResponse = {
  encode(message: UpdateGitLabSelfHostedProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabSelfHostedProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabSelfHostedProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabSelfHostedProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitLabSelfHostedProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitLabSelfHostedProviderResponse>, I>>(
    base?: I,
  ): UpdateGitLabSelfHostedProviderResponse {
    return UpdateGitLabSelfHostedProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitLabSelfHostedProviderResponse>, I>>(
    object: I,
  ): UpdateGitLabSelfHostedProviderResponse {
    const message = createBaseUpdateGitLabSelfHostedProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGoogleProviderRequest(): AddGoogleProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGoogleProviderRequest = {
  encode(message: AddGoogleProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGoogleProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGoogleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGoogleProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGoogleProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGoogleProviderRequest>, I>>(base?: I): AddGoogleProviderRequest {
    return AddGoogleProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGoogleProviderRequest>, I>>(object: I): AddGoogleProviderRequest {
    const message = createBaseAddGoogleProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGoogleProviderResponse(): AddGoogleProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGoogleProviderResponse = {
  encode(message: AddGoogleProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGoogleProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGoogleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGoogleProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGoogleProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGoogleProviderResponse>, I>>(base?: I): AddGoogleProviderResponse {
    return AddGoogleProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGoogleProviderResponse>, I>>(object: I): AddGoogleProviderResponse {
    const message = createBaseAddGoogleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGoogleProviderRequest(): UpdateGoogleProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGoogleProviderRequest = {
  encode(message: UpdateGoogleProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGoogleProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGoogleProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGoogleProviderRequest>, I>>(base?: I): UpdateGoogleProviderRequest {
    return UpdateGoogleProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGoogleProviderRequest>, I>>(object: I): UpdateGoogleProviderRequest {
    const message = createBaseUpdateGoogleProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGoogleProviderResponse(): UpdateGoogleProviderResponse {
  return { details: undefined };
}

export const UpdateGoogleProviderResponse = {
  encode(message: UpdateGoogleProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGoogleProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGoogleProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGoogleProviderResponse>, I>>(base?: I): UpdateGoogleProviderResponse {
    return UpdateGoogleProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGoogleProviderResponse>, I>>(object: I): UpdateGoogleProviderResponse {
    const message = createBaseUpdateGoogleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddLDAPProviderRequest(): AddLDAPProviderRequest {
  return {
    name: "",
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    bindPassword: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
    providerOptions: undefined,
  };
}

export const AddLDAPProviderRequest = {
  encode(message: AddLDAPProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.servers) {
      writer.uint32(18).string(v!);
    }
    if (message.startTls === true) {
      writer.uint32(24).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(34).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(42).string(message.bindDn);
    }
    if (message.bindPassword !== "") {
      writer.uint32(50).string(message.bindPassword);
    }
    if (message.userBase !== "") {
      writer.uint32(58).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(74).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(82).fork()).ldelim();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(90).fork()).ldelim();
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddLDAPProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLDAPProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddLDAPProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      servers: Array.isArray(object?.servers) ? object.servers.map((e: any) => String(e)) : [],
      startTls: isSet(object.startTls) ? Boolean(object.startTls) : false,
      baseDn: isSet(object.baseDn) ? String(object.baseDn) : "",
      bindDn: isSet(object.bindDn) ? String(object.bindDn) : "",
      bindPassword: isSet(object.bindPassword) ? String(object.bindPassword) : "",
      userBase: isSet(object.userBase) ? String(object.userBase) : "",
      userObjectClasses: Array.isArray(object?.userObjectClasses)
        ? object.userObjectClasses.map((e: any) => String(e))
        : [],
      userFilters: Array.isArray(object?.userFilters) ? object.userFilters.map((e: any) => String(e)) : [],
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddLDAPProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.servers?.length) {
      obj.servers = message.servers;
    }
    if (message.startTls === true) {
      obj.startTls = message.startTls;
    }
    if (message.baseDn !== "") {
      obj.baseDn = message.baseDn;
    }
    if (message.bindDn !== "") {
      obj.bindDn = message.bindDn;
    }
    if (message.bindPassword !== "") {
      obj.bindPassword = message.bindPassword;
    }
    if (message.userBase !== "") {
      obj.userBase = message.userBase;
    }
    if (message.userObjectClasses?.length) {
      obj.userObjectClasses = message.userObjectClasses;
    }
    if (message.userFilters?.length) {
      obj.userFilters = message.userFilters;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.attributes !== undefined) {
      obj.attributes = LDAPAttributes.toJSON(message.attributes);
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddLDAPProviderRequest>, I>>(base?: I): AddLDAPProviderRequest {
    return AddLDAPProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddLDAPProviderRequest>, I>>(object: I): AddLDAPProviderRequest {
    const message = createBaseAddLDAPProviderRequest();
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.bindPassword = object.bindPassword ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddLDAPProviderResponse(): AddLDAPProviderResponse {
  return { details: undefined, id: "" };
}

export const AddLDAPProviderResponse = {
  encode(message: AddLDAPProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddLDAPProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLDAPProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddLDAPProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddLDAPProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddLDAPProviderResponse>, I>>(base?: I): AddLDAPProviderResponse {
    return AddLDAPProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddLDAPProviderResponse>, I>>(object: I): AddLDAPProviderResponse {
    const message = createBaseAddLDAPProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateLDAPProviderRequest(): UpdateLDAPProviderRequest {
  return {
    id: "",
    name: "",
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    bindPassword: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
    providerOptions: undefined,
  };
}

export const UpdateLDAPProviderRequest = {
  encode(message: UpdateLDAPProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.servers) {
      writer.uint32(26).string(v!);
    }
    if (message.startTls === true) {
      writer.uint32(32).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(42).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(50).string(message.bindDn);
    }
    if (message.bindPassword !== "") {
      writer.uint32(58).string(message.bindPassword);
    }
    if (message.userBase !== "") {
      writer.uint32(66).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(82).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(90).fork()).ldelim();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(98).fork()).ldelim();
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(106).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLDAPProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLDAPProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLDAPProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      servers: Array.isArray(object?.servers) ? object.servers.map((e: any) => String(e)) : [],
      startTls: isSet(object.startTls) ? Boolean(object.startTls) : false,
      baseDn: isSet(object.baseDn) ? String(object.baseDn) : "",
      bindDn: isSet(object.bindDn) ? String(object.bindDn) : "",
      bindPassword: isSet(object.bindPassword) ? String(object.bindPassword) : "",
      userBase: isSet(object.userBase) ? String(object.userBase) : "",
      userObjectClasses: Array.isArray(object?.userObjectClasses)
        ? object.userObjectClasses.map((e: any) => String(e))
        : [],
      userFilters: Array.isArray(object?.userFilters) ? object.userFilters.map((e: any) => String(e)) : [],
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateLDAPProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.servers?.length) {
      obj.servers = message.servers;
    }
    if (message.startTls === true) {
      obj.startTls = message.startTls;
    }
    if (message.baseDn !== "") {
      obj.baseDn = message.baseDn;
    }
    if (message.bindDn !== "") {
      obj.bindDn = message.bindDn;
    }
    if (message.bindPassword !== "") {
      obj.bindPassword = message.bindPassword;
    }
    if (message.userBase !== "") {
      obj.userBase = message.userBase;
    }
    if (message.userObjectClasses?.length) {
      obj.userObjectClasses = message.userObjectClasses;
    }
    if (message.userFilters?.length) {
      obj.userFilters = message.userFilters;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.attributes !== undefined) {
      obj.attributes = LDAPAttributes.toJSON(message.attributes);
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLDAPProviderRequest>, I>>(base?: I): UpdateLDAPProviderRequest {
    return UpdateLDAPProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLDAPProviderRequest>, I>>(object: I): UpdateLDAPProviderRequest {
    const message = createBaseUpdateLDAPProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.bindPassword = object.bindPassword ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateLDAPProviderResponse(): UpdateLDAPProviderResponse {
  return { details: undefined };
}

export const UpdateLDAPProviderResponse = {
  encode(message: UpdateLDAPProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLDAPProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLDAPProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLDAPProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLDAPProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLDAPProviderResponse>, I>>(base?: I): UpdateLDAPProviderResponse {
    return UpdateLDAPProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLDAPProviderResponse>, I>>(object: I): UpdateLDAPProviderResponse {
    const message = createBaseUpdateLDAPProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeleteProviderRequest(): DeleteProviderRequest {
  return { id: "" };
}

export const DeleteProviderRequest = {
  encode(message: DeleteProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProviderRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: DeleteProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProviderRequest>, I>>(base?: I): DeleteProviderRequest {
    return DeleteProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProviderRequest>, I>>(object: I): DeleteProviderRequest {
    const message = createBaseDeleteProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteProviderResponse(): DeleteProviderResponse {
  return { details: undefined };
}

export const DeleteProviderResponse = {
  encode(message: DeleteProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeleteProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProviderResponse>, I>>(base?: I): DeleteProviderResponse {
    return DeleteProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProviderResponse>, I>>(object: I): DeleteProviderResponse {
    const message = createBaseDeleteProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetOrgIAMPolicyRequest(): GetOrgIAMPolicyRequest {
  return {};
}

export const GetOrgIAMPolicyRequest = {
  encode(_: GetOrgIAMPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIAMPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetOrgIAMPolicyRequest {
    return {};
  },

  toJSON(_: GetOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgIAMPolicyRequest>, I>>(base?: I): GetOrgIAMPolicyRequest {
    return GetOrgIAMPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgIAMPolicyRequest>, I>>(_: I): GetOrgIAMPolicyRequest {
    const message = createBaseGetOrgIAMPolicyRequest();
    return message;
  },
};

function createBaseGetOrgIAMPolicyResponse(): GetOrgIAMPolicyResponse {
  return { policy: undefined };
}

export const GetOrgIAMPolicyResponse = {
  encode(message: GetOrgIAMPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIAMPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = OrgIAMPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgIAMPolicyResponse {
    return { policy: isSet(object.policy) ? OrgIAMPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = OrgIAMPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgIAMPolicyResponse>, I>>(base?: I): GetOrgIAMPolicyResponse {
    return GetOrgIAMPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgIAMPolicyResponse>, I>>(object: I): GetOrgIAMPolicyResponse {
    const message = createBaseGetOrgIAMPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? OrgIAMPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgIAMPolicyRequest(): UpdateOrgIAMPolicyRequest {
  return { userLoginMustBeDomain: false };
}

export const UpdateOrgIAMPolicyRequest = {
  encode(message: UpdateOrgIAMPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userLoginMustBeDomain === true) {
      writer.uint32(8).bool(message.userLoginMustBeDomain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIAMPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIAMPolicyRequest {
    return {
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain) ? Boolean(object.userLoginMustBeDomain) : false,
    };
  },

  toJSON(message: UpdateOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    if (message.userLoginMustBeDomain === true) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgIAMPolicyRequest>, I>>(base?: I): UpdateOrgIAMPolicyRequest {
    return UpdateOrgIAMPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgIAMPolicyRequest>, I>>(object: I): UpdateOrgIAMPolicyRequest {
    const message = createBaseUpdateOrgIAMPolicyRequest();
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    return message;
  },
};

function createBaseUpdateOrgIAMPolicyResponse(): UpdateOrgIAMPolicyResponse {
  return { details: undefined };
}

export const UpdateOrgIAMPolicyResponse = {
  encode(message: UpdateOrgIAMPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIAMPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIAMPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgIAMPolicyResponse>, I>>(base?: I): UpdateOrgIAMPolicyResponse {
    return UpdateOrgIAMPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgIAMPolicyResponse>, I>>(object: I): UpdateOrgIAMPolicyResponse {
    const message = createBaseUpdateOrgIAMPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomOrgIAMPolicyRequest(): GetCustomOrgIAMPolicyRequest {
  return { orgId: "" };
}

export const GetCustomOrgIAMPolicyRequest = {
  encode(message: GetCustomOrgIAMPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomOrgIAMPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomOrgIAMPolicyRequest {
    return { orgId: isSet(object.orgId) ? String(object.orgId) : "" };
  },

  toJSON(message: GetCustomOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomOrgIAMPolicyRequest>, I>>(base?: I): GetCustomOrgIAMPolicyRequest {
    return GetCustomOrgIAMPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomOrgIAMPolicyRequest>, I>>(object: I): GetCustomOrgIAMPolicyRequest {
    const message = createBaseGetCustomOrgIAMPolicyRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseGetCustomOrgIAMPolicyResponse(): GetCustomOrgIAMPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetCustomOrgIAMPolicyResponse = {
  encode(message: GetCustomOrgIAMPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomOrgIAMPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = OrgIAMPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomOrgIAMPolicyResponse {
    return {
      policy: isSet(object.policy) ? OrgIAMPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetCustomOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = OrgIAMPolicy.toJSON(message.policy);
    }
    if (message.isDefault === true) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomOrgIAMPolicyResponse>, I>>(base?: I): GetCustomOrgIAMPolicyResponse {
    return GetCustomOrgIAMPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomOrgIAMPolicyResponse>, I>>(
    object: I,
  ): GetCustomOrgIAMPolicyResponse {
    const message = createBaseGetCustomOrgIAMPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? OrgIAMPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseAddCustomOrgIAMPolicyRequest(): AddCustomOrgIAMPolicyRequest {
  return { orgId: "", userLoginMustBeDomain: false };
}

export const AddCustomOrgIAMPolicyRequest = {
  encode(message: AddCustomOrgIAMPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.userLoginMustBeDomain === true) {
      writer.uint32(16).bool(message.userLoginMustBeDomain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomOrgIAMPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomOrgIAMPolicyRequest {
    return {
      orgId: isSet(object.orgId) ? String(object.orgId) : "",
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain) ? Boolean(object.userLoginMustBeDomain) : false,
    };
  },

  toJSON(message: AddCustomOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userLoginMustBeDomain === true) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomOrgIAMPolicyRequest>, I>>(base?: I): AddCustomOrgIAMPolicyRequest {
    return AddCustomOrgIAMPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomOrgIAMPolicyRequest>, I>>(object: I): AddCustomOrgIAMPolicyRequest {
    const message = createBaseAddCustomOrgIAMPolicyRequest();
    message.orgId = object.orgId ?? "";
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    return message;
  },
};

function createBaseAddCustomOrgIAMPolicyResponse(): AddCustomOrgIAMPolicyResponse {
  return { details: undefined };
}

export const AddCustomOrgIAMPolicyResponse = {
  encode(message: AddCustomOrgIAMPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomOrgIAMPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomOrgIAMPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomOrgIAMPolicyResponse>, I>>(base?: I): AddCustomOrgIAMPolicyResponse {
    return AddCustomOrgIAMPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomOrgIAMPolicyResponse>, I>>(
    object: I,
  ): AddCustomOrgIAMPolicyResponse {
    const message = createBaseAddCustomOrgIAMPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomOrgIAMPolicyRequest(): UpdateCustomOrgIAMPolicyRequest {
  return { orgId: "", userLoginMustBeDomain: false };
}

export const UpdateCustomOrgIAMPolicyRequest = {
  encode(message: UpdateCustomOrgIAMPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.userLoginMustBeDomain === true) {
      writer.uint32(16).bool(message.userLoginMustBeDomain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomOrgIAMPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomOrgIAMPolicyRequest {
    return {
      orgId: isSet(object.orgId) ? String(object.orgId) : "",
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain) ? Boolean(object.userLoginMustBeDomain) : false,
    };
  },

  toJSON(message: UpdateCustomOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userLoginMustBeDomain === true) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomOrgIAMPolicyRequest>, I>>(base?: I): UpdateCustomOrgIAMPolicyRequest {
    return UpdateCustomOrgIAMPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomOrgIAMPolicyRequest>, I>>(
    object: I,
  ): UpdateCustomOrgIAMPolicyRequest {
    const message = createBaseUpdateCustomOrgIAMPolicyRequest();
    message.orgId = object.orgId ?? "";
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    return message;
  },
};

function createBaseUpdateCustomOrgIAMPolicyResponse(): UpdateCustomOrgIAMPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomOrgIAMPolicyResponse = {
  encode(message: UpdateCustomOrgIAMPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomOrgIAMPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomOrgIAMPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomOrgIAMPolicyResponse>, I>>(
    base?: I,
  ): UpdateCustomOrgIAMPolicyResponse {
    return UpdateCustomOrgIAMPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomOrgIAMPolicyResponse>, I>>(
    object: I,
  ): UpdateCustomOrgIAMPolicyResponse {
    const message = createBaseUpdateCustomOrgIAMPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomOrgIAMPolicyToDefaultRequest(): ResetCustomOrgIAMPolicyToDefaultRequest {
  return { orgId: "" };
}

export const ResetCustomOrgIAMPolicyToDefaultRequest = {
  encode(message: ResetCustomOrgIAMPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomOrgIAMPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomOrgIAMPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomOrgIAMPolicyToDefaultRequest {
    return { orgId: isSet(object.orgId) ? String(object.orgId) : "" };
  },

  toJSON(message: ResetCustomOrgIAMPolicyToDefaultRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomOrgIAMPolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomOrgIAMPolicyToDefaultRequest {
    return ResetCustomOrgIAMPolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomOrgIAMPolicyToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomOrgIAMPolicyToDefaultRequest {
    const message = createBaseResetCustomOrgIAMPolicyToDefaultRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseResetCustomOrgIAMPolicyToDefaultResponse(): ResetCustomOrgIAMPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomOrgIAMPolicyToDefaultResponse = {
  encode(message: ResetCustomOrgIAMPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomOrgIAMPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomOrgIAMPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomOrgIAMPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomOrgIAMPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomOrgIAMPolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomOrgIAMPolicyToDefaultResponse {
    return ResetCustomOrgIAMPolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomOrgIAMPolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomOrgIAMPolicyToDefaultResponse {
    const message = createBaseResetCustomOrgIAMPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDomainPolicyRequest(): GetDomainPolicyRequest {
  return {};
}

export const GetDomainPolicyRequest = {
  encode(_: GetDomainPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDomainPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDomainPolicyRequest {
    return {};
  },

  toJSON(_: GetDomainPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDomainPolicyRequest>, I>>(base?: I): GetDomainPolicyRequest {
    return GetDomainPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDomainPolicyRequest>, I>>(_: I): GetDomainPolicyRequest {
    const message = createBaseGetDomainPolicyRequest();
    return message;
  },
};

function createBaseGetDomainPolicyResponse(): GetDomainPolicyResponse {
  return { policy: undefined };
}

export const GetDomainPolicyResponse = {
  encode(message: GetDomainPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      DomainPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDomainPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = DomainPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDomainPolicyResponse {
    return { policy: isSet(object.policy) ? DomainPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = DomainPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDomainPolicyResponse>, I>>(base?: I): GetDomainPolicyResponse {
    return GetDomainPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDomainPolicyResponse>, I>>(object: I): GetDomainPolicyResponse {
    const message = createBaseGetDomainPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? DomainPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateDomainPolicyRequest(): UpdateDomainPolicyRequest {
  return { userLoginMustBeDomain: false, validateOrgDomains: false, smtpSenderAddressMatchesInstanceDomain: false };
}

export const UpdateDomainPolicyRequest = {
  encode(message: UpdateDomainPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userLoginMustBeDomain === true) {
      writer.uint32(8).bool(message.userLoginMustBeDomain);
    }
    if (message.validateOrgDomains === true) {
      writer.uint32(16).bool(message.validateOrgDomains);
    }
    if (message.smtpSenderAddressMatchesInstanceDomain === true) {
      writer.uint32(24).bool(message.smtpSenderAddressMatchesInstanceDomain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateDomainPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOrgDomains = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDomainPolicyRequest {
    return {
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain) ? Boolean(object.userLoginMustBeDomain) : false,
      validateOrgDomains: isSet(object.validateOrgDomains) ? Boolean(object.validateOrgDomains) : false,
      smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
        ? Boolean(object.smtpSenderAddressMatchesInstanceDomain)
        : false,
    };
  },

  toJSON(message: UpdateDomainPolicyRequest): unknown {
    const obj: any = {};
    if (message.userLoginMustBeDomain === true) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    if (message.validateOrgDomains === true) {
      obj.validateOrgDomains = message.validateOrgDomains;
    }
    if (message.smtpSenderAddressMatchesInstanceDomain === true) {
      obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateDomainPolicyRequest>, I>>(base?: I): UpdateDomainPolicyRequest {
    return UpdateDomainPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateDomainPolicyRequest>, I>>(object: I): UpdateDomainPolicyRequest {
    const message = createBaseUpdateDomainPolicyRequest();
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    message.validateOrgDomains = object.validateOrgDomains ?? false;
    message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
    return message;
  },
};

function createBaseUpdateDomainPolicyResponse(): UpdateDomainPolicyResponse {
  return { details: undefined };
}

export const UpdateDomainPolicyResponse = {
  encode(message: UpdateDomainPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateDomainPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDomainPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateDomainPolicyResponse>, I>>(base?: I): UpdateDomainPolicyResponse {
    return UpdateDomainPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateDomainPolicyResponse>, I>>(object: I): UpdateDomainPolicyResponse {
    const message = createBaseUpdateDomainPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomDomainPolicyRequest(): GetCustomDomainPolicyRequest {
  return { orgId: "" };
}

export const GetCustomDomainPolicyRequest = {
  encode(message: GetCustomDomainPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomDomainPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainPolicyRequest {
    return { orgId: isSet(object.orgId) ? String(object.orgId) : "" };
  },

  toJSON(message: GetCustomDomainPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomDomainPolicyRequest>, I>>(base?: I): GetCustomDomainPolicyRequest {
    return GetCustomDomainPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomDomainPolicyRequest>, I>>(object: I): GetCustomDomainPolicyRequest {
    const message = createBaseGetCustomDomainPolicyRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseGetCustomDomainPolicyResponse(): GetCustomDomainPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetCustomDomainPolicyResponse = {
  encode(message: GetCustomDomainPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      DomainPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomDomainPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = DomainPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainPolicyResponse {
    return {
      policy: isSet(object.policy) ? DomainPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetCustomDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = DomainPolicy.toJSON(message.policy);
    }
    if (message.isDefault === true) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomDomainPolicyResponse>, I>>(base?: I): GetCustomDomainPolicyResponse {
    return GetCustomDomainPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomDomainPolicyResponse>, I>>(
    object: I,
  ): GetCustomDomainPolicyResponse {
    const message = createBaseGetCustomDomainPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? DomainPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseAddCustomDomainPolicyRequest(): AddCustomDomainPolicyRequest {
  return {
    orgId: "",
    userLoginMustBeDomain: false,
    validateOrgDomains: false,
    smtpSenderAddressMatchesInstanceDomain: false,
  };
}

export const AddCustomDomainPolicyRequest = {
  encode(message: AddCustomDomainPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.userLoginMustBeDomain === true) {
      writer.uint32(16).bool(message.userLoginMustBeDomain);
    }
    if (message.validateOrgDomains === true) {
      writer.uint32(24).bool(message.validateOrgDomains);
    }
    if (message.smtpSenderAddressMatchesInstanceDomain === true) {
      writer.uint32(32).bool(message.smtpSenderAddressMatchesInstanceDomain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomDomainPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOrgDomains = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomDomainPolicyRequest {
    return {
      orgId: isSet(object.orgId) ? String(object.orgId) : "",
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain) ? Boolean(object.userLoginMustBeDomain) : false,
      validateOrgDomains: isSet(object.validateOrgDomains) ? Boolean(object.validateOrgDomains) : false,
      smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
        ? Boolean(object.smtpSenderAddressMatchesInstanceDomain)
        : false,
    };
  },

  toJSON(message: AddCustomDomainPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userLoginMustBeDomain === true) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    if (message.validateOrgDomains === true) {
      obj.validateOrgDomains = message.validateOrgDomains;
    }
    if (message.smtpSenderAddressMatchesInstanceDomain === true) {
      obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomDomainPolicyRequest>, I>>(base?: I): AddCustomDomainPolicyRequest {
    return AddCustomDomainPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomDomainPolicyRequest>, I>>(object: I): AddCustomDomainPolicyRequest {
    const message = createBaseAddCustomDomainPolicyRequest();
    message.orgId = object.orgId ?? "";
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    message.validateOrgDomains = object.validateOrgDomains ?? false;
    message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
    return message;
  },
};

function createBaseAddCustomDomainPolicyResponse(): AddCustomDomainPolicyResponse {
  return { details: undefined };
}

export const AddCustomDomainPolicyResponse = {
  encode(message: AddCustomDomainPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomDomainPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomDomainPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomDomainPolicyResponse>, I>>(base?: I): AddCustomDomainPolicyResponse {
    return AddCustomDomainPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomDomainPolicyResponse>, I>>(
    object: I,
  ): AddCustomDomainPolicyResponse {
    const message = createBaseAddCustomDomainPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomDomainPolicyRequest(): UpdateCustomDomainPolicyRequest {
  return {
    orgId: "",
    userLoginMustBeDomain: false,
    validateOrgDomains: false,
    smtpSenderAddressMatchesInstanceDomain: false,
  };
}

export const UpdateCustomDomainPolicyRequest = {
  encode(message: UpdateCustomDomainPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.userLoginMustBeDomain === true) {
      writer.uint32(16).bool(message.userLoginMustBeDomain);
    }
    if (message.validateOrgDomains === true) {
      writer.uint32(24).bool(message.validateOrgDomains);
    }
    if (message.smtpSenderAddressMatchesInstanceDomain === true) {
      writer.uint32(32).bool(message.smtpSenderAddressMatchesInstanceDomain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomDomainPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOrgDomains = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomDomainPolicyRequest {
    return {
      orgId: isSet(object.orgId) ? String(object.orgId) : "",
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain) ? Boolean(object.userLoginMustBeDomain) : false,
      validateOrgDomains: isSet(object.validateOrgDomains) ? Boolean(object.validateOrgDomains) : false,
      smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
        ? Boolean(object.smtpSenderAddressMatchesInstanceDomain)
        : false,
    };
  },

  toJSON(message: UpdateCustomDomainPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userLoginMustBeDomain === true) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    if (message.validateOrgDomains === true) {
      obj.validateOrgDomains = message.validateOrgDomains;
    }
    if (message.smtpSenderAddressMatchesInstanceDomain === true) {
      obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomDomainPolicyRequest>, I>>(base?: I): UpdateCustomDomainPolicyRequest {
    return UpdateCustomDomainPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomDomainPolicyRequest>, I>>(
    object: I,
  ): UpdateCustomDomainPolicyRequest {
    const message = createBaseUpdateCustomDomainPolicyRequest();
    message.orgId = object.orgId ?? "";
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    message.validateOrgDomains = object.validateOrgDomains ?? false;
    message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
    return message;
  },
};

function createBaseUpdateCustomDomainPolicyResponse(): UpdateCustomDomainPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomDomainPolicyResponse = {
  encode(message: UpdateCustomDomainPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomDomainPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomDomainPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomDomainPolicyResponse>, I>>(
    base?: I,
  ): UpdateCustomDomainPolicyResponse {
    return UpdateCustomDomainPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomDomainPolicyResponse>, I>>(
    object: I,
  ): UpdateCustomDomainPolicyResponse {
    const message = createBaseUpdateCustomDomainPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomDomainPolicyToDefaultRequest(): ResetCustomDomainPolicyToDefaultRequest {
  return { orgId: "" };
}

export const ResetCustomDomainPolicyToDefaultRequest = {
  encode(message: ResetCustomDomainPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomDomainPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainPolicyToDefaultRequest {
    return { orgId: isSet(object.orgId) ? String(object.orgId) : "" };
  },

  toJSON(message: ResetCustomDomainPolicyToDefaultRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomDomainPolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomDomainPolicyToDefaultRequest {
    return ResetCustomDomainPolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomDomainPolicyToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomDomainPolicyToDefaultRequest {
    const message = createBaseResetCustomDomainPolicyToDefaultRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseResetCustomDomainPolicyToDefaultResponse(): ResetCustomDomainPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomDomainPolicyToDefaultResponse = {
  encode(message: ResetCustomDomainPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomDomainPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomDomainPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomDomainPolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomDomainPolicyToDefaultResponse {
    return ResetCustomDomainPolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomDomainPolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomDomainPolicyToDefaultResponse {
    const message = createBaseResetCustomDomainPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLabelPolicyRequest(): GetLabelPolicyRequest {
  return {};
}

export const GetLabelPolicyRequest = {
  encode(_: GetLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLabelPolicyRequest {
    return {};
  },

  toJSON(_: GetLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLabelPolicyRequest>, I>>(base?: I): GetLabelPolicyRequest {
    return GetLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLabelPolicyRequest>, I>>(_: I): GetLabelPolicyRequest {
    const message = createBaseGetLabelPolicyRequest();
    return message;
  },
};

function createBaseGetLabelPolicyResponse(): GetLabelPolicyResponse {
  return { policy: undefined };
}

export const GetLabelPolicyResponse = {
  encode(message: GetLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLabelPolicyResponse {
    return { policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LabelPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLabelPolicyResponse>, I>>(base?: I): GetLabelPolicyResponse {
    return GetLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLabelPolicyResponse>, I>>(object: I): GetLabelPolicyResponse {
    const message = createBaseGetLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetPreviewLabelPolicyRequest(): GetPreviewLabelPolicyRequest {
  return {};
}

export const GetPreviewLabelPolicyRequest = {
  encode(_: GetPreviewLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPreviewLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPreviewLabelPolicyRequest {
    return {};
  },

  toJSON(_: GetPreviewLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPreviewLabelPolicyRequest>, I>>(base?: I): GetPreviewLabelPolicyRequest {
    return GetPreviewLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPreviewLabelPolicyRequest>, I>>(_: I): GetPreviewLabelPolicyRequest {
    const message = createBaseGetPreviewLabelPolicyRequest();
    return message;
  },
};

function createBaseGetPreviewLabelPolicyResponse(): GetPreviewLabelPolicyResponse {
  return { policy: undefined };
}

export const GetPreviewLabelPolicyResponse = {
  encode(message: GetPreviewLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPreviewLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPreviewLabelPolicyResponse {
    return { policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPreviewLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LabelPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPreviewLabelPolicyResponse>, I>>(base?: I): GetPreviewLabelPolicyResponse {
    return GetPreviewLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPreviewLabelPolicyResponse>, I>>(
    object: I,
  ): GetPreviewLabelPolicyResponse {
    const message = createBaseGetPreviewLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateLabelPolicyRequest(): UpdateLabelPolicyRequest {
  return {
    primaryColor: "",
    hideLoginNameSuffix: false,
    warnColor: "",
    backgroundColor: "",
    fontColor: "",
    primaryColorDark: "",
    backgroundColorDark: "",
    warnColorDark: "",
    fontColorDark: "",
    disableWatermark: false,
  };
}

export const UpdateLabelPolicyRequest = {
  encode(message: UpdateLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.primaryColor !== "") {
      writer.uint32(10).string(message.primaryColor);
    }
    if (message.hideLoginNameSuffix === true) {
      writer.uint32(24).bool(message.hideLoginNameSuffix);
    }
    if (message.warnColor !== "") {
      writer.uint32(34).string(message.warnColor);
    }
    if (message.backgroundColor !== "") {
      writer.uint32(42).string(message.backgroundColor);
    }
    if (message.fontColor !== "") {
      writer.uint32(50).string(message.fontColor);
    }
    if (message.primaryColorDark !== "") {
      writer.uint32(58).string(message.primaryColorDark);
    }
    if (message.backgroundColorDark !== "") {
      writer.uint32(66).string(message.backgroundColorDark);
    }
    if (message.warnColorDark !== "") {
      writer.uint32(74).string(message.warnColorDark);
    }
    if (message.fontColorDark !== "") {
      writer.uint32(82).string(message.fontColorDark);
    }
    if (message.disableWatermark === true) {
      writer.uint32(88).bool(message.disableWatermark);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.primaryColor = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hideLoginNameSuffix = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.warnColor = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.primaryColorDark = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backgroundColorDark = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.warnColorDark = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.fontColorDark = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.disableWatermark = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLabelPolicyRequest {
    return {
      primaryColor: isSet(object.primaryColor) ? String(object.primaryColor) : "",
      hideLoginNameSuffix: isSet(object.hideLoginNameSuffix) ? Boolean(object.hideLoginNameSuffix) : false,
      warnColor: isSet(object.warnColor) ? String(object.warnColor) : "",
      backgroundColor: isSet(object.backgroundColor) ? String(object.backgroundColor) : "",
      fontColor: isSet(object.fontColor) ? String(object.fontColor) : "",
      primaryColorDark: isSet(object.primaryColorDark) ? String(object.primaryColorDark) : "",
      backgroundColorDark: isSet(object.backgroundColorDark) ? String(object.backgroundColorDark) : "",
      warnColorDark: isSet(object.warnColorDark) ? String(object.warnColorDark) : "",
      fontColorDark: isSet(object.fontColorDark) ? String(object.fontColorDark) : "",
      disableWatermark: isSet(object.disableWatermark) ? Boolean(object.disableWatermark) : false,
    };
  },

  toJSON(message: UpdateLabelPolicyRequest): unknown {
    const obj: any = {};
    if (message.primaryColor !== "") {
      obj.primaryColor = message.primaryColor;
    }
    if (message.hideLoginNameSuffix === true) {
      obj.hideLoginNameSuffix = message.hideLoginNameSuffix;
    }
    if (message.warnColor !== "") {
      obj.warnColor = message.warnColor;
    }
    if (message.backgroundColor !== "") {
      obj.backgroundColor = message.backgroundColor;
    }
    if (message.fontColor !== "") {
      obj.fontColor = message.fontColor;
    }
    if (message.primaryColorDark !== "") {
      obj.primaryColorDark = message.primaryColorDark;
    }
    if (message.backgroundColorDark !== "") {
      obj.backgroundColorDark = message.backgroundColorDark;
    }
    if (message.warnColorDark !== "") {
      obj.warnColorDark = message.warnColorDark;
    }
    if (message.fontColorDark !== "") {
      obj.fontColorDark = message.fontColorDark;
    }
    if (message.disableWatermark === true) {
      obj.disableWatermark = message.disableWatermark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLabelPolicyRequest>, I>>(base?: I): UpdateLabelPolicyRequest {
    return UpdateLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLabelPolicyRequest>, I>>(object: I): UpdateLabelPolicyRequest {
    const message = createBaseUpdateLabelPolicyRequest();
    message.primaryColor = object.primaryColor ?? "";
    message.hideLoginNameSuffix = object.hideLoginNameSuffix ?? false;
    message.warnColor = object.warnColor ?? "";
    message.backgroundColor = object.backgroundColor ?? "";
    message.fontColor = object.fontColor ?? "";
    message.primaryColorDark = object.primaryColorDark ?? "";
    message.backgroundColorDark = object.backgroundColorDark ?? "";
    message.warnColorDark = object.warnColorDark ?? "";
    message.fontColorDark = object.fontColorDark ?? "";
    message.disableWatermark = object.disableWatermark ?? false;
    return message;
  },
};

function createBaseUpdateLabelPolicyResponse(): UpdateLabelPolicyResponse {
  return { details: undefined };
}

export const UpdateLabelPolicyResponse = {
  encode(message: UpdateLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLabelPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLabelPolicyResponse>, I>>(base?: I): UpdateLabelPolicyResponse {
    return UpdateLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLabelPolicyResponse>, I>>(object: I): UpdateLabelPolicyResponse {
    const message = createBaseUpdateLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseActivateLabelPolicyRequest(): ActivateLabelPolicyRequest {
  return {};
}

export const ActivateLabelPolicyRequest = {
  encode(_: ActivateLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivateLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ActivateLabelPolicyRequest {
    return {};
  },

  toJSON(_: ActivateLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivateLabelPolicyRequest>, I>>(base?: I): ActivateLabelPolicyRequest {
    return ActivateLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivateLabelPolicyRequest>, I>>(_: I): ActivateLabelPolicyRequest {
    const message = createBaseActivateLabelPolicyRequest();
    return message;
  },
};

function createBaseActivateLabelPolicyResponse(): ActivateLabelPolicyResponse {
  return { details: undefined };
}

export const ActivateLabelPolicyResponse = {
  encode(message: ActivateLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivateLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateLabelPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ActivateLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivateLabelPolicyResponse>, I>>(base?: I): ActivateLabelPolicyResponse {
    return ActivateLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivateLabelPolicyResponse>, I>>(object: I): ActivateLabelPolicyResponse {
    const message = createBaseActivateLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyLogoRequest(): RemoveLabelPolicyLogoRequest {
  return {};
}

export const RemoveLabelPolicyLogoRequest = {
  encode(_: RemoveLabelPolicyLogoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyLogoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyLogoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyLogoRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyLogoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyLogoRequest>, I>>(base?: I): RemoveLabelPolicyLogoRequest {
    return RemoveLabelPolicyLogoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyLogoRequest>, I>>(_: I): RemoveLabelPolicyLogoRequest {
    const message = createBaseRemoveLabelPolicyLogoRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyLogoResponse(): RemoveLabelPolicyLogoResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyLogoResponse = {
  encode(message: RemoveLabelPolicyLogoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyLogoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyLogoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyLogoResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyLogoResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyLogoResponse>, I>>(base?: I): RemoveLabelPolicyLogoResponse {
    return RemoveLabelPolicyLogoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyLogoResponse>, I>>(
    object: I,
  ): RemoveLabelPolicyLogoResponse {
    const message = createBaseRemoveLabelPolicyLogoResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyLogoDarkRequest(): RemoveLabelPolicyLogoDarkRequest {
  return {};
}

export const RemoveLabelPolicyLogoDarkRequest = {
  encode(_: RemoveLabelPolicyLogoDarkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyLogoDarkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyLogoDarkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyLogoDarkRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyLogoDarkRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyLogoDarkRequest>, I>>(
    base?: I,
  ): RemoveLabelPolicyLogoDarkRequest {
    return RemoveLabelPolicyLogoDarkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyLogoDarkRequest>, I>>(
    _: I,
  ): RemoveLabelPolicyLogoDarkRequest {
    const message = createBaseRemoveLabelPolicyLogoDarkRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyLogoDarkResponse(): RemoveLabelPolicyLogoDarkResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyLogoDarkResponse = {
  encode(message: RemoveLabelPolicyLogoDarkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyLogoDarkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyLogoDarkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyLogoDarkResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyLogoDarkResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyLogoDarkResponse>, I>>(
    base?: I,
  ): RemoveLabelPolicyLogoDarkResponse {
    return RemoveLabelPolicyLogoDarkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyLogoDarkResponse>, I>>(
    object: I,
  ): RemoveLabelPolicyLogoDarkResponse {
    const message = createBaseRemoveLabelPolicyLogoDarkResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyIconRequest(): RemoveLabelPolicyIconRequest {
  return {};
}

export const RemoveLabelPolicyIconRequest = {
  encode(_: RemoveLabelPolicyIconRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyIconRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyIconRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyIconRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyIconRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyIconRequest>, I>>(base?: I): RemoveLabelPolicyIconRequest {
    return RemoveLabelPolicyIconRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyIconRequest>, I>>(_: I): RemoveLabelPolicyIconRequest {
    const message = createBaseRemoveLabelPolicyIconRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyIconResponse(): RemoveLabelPolicyIconResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyIconResponse = {
  encode(message: RemoveLabelPolicyIconResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyIconResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyIconResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyIconResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyIconResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyIconResponse>, I>>(base?: I): RemoveLabelPolicyIconResponse {
    return RemoveLabelPolicyIconResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyIconResponse>, I>>(
    object: I,
  ): RemoveLabelPolicyIconResponse {
    const message = createBaseRemoveLabelPolicyIconResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyIconDarkRequest(): RemoveLabelPolicyIconDarkRequest {
  return {};
}

export const RemoveLabelPolicyIconDarkRequest = {
  encode(_: RemoveLabelPolicyIconDarkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyIconDarkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyIconDarkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyIconDarkRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyIconDarkRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyIconDarkRequest>, I>>(
    base?: I,
  ): RemoveLabelPolicyIconDarkRequest {
    return RemoveLabelPolicyIconDarkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyIconDarkRequest>, I>>(
    _: I,
  ): RemoveLabelPolicyIconDarkRequest {
    const message = createBaseRemoveLabelPolicyIconDarkRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyIconDarkResponse(): RemoveLabelPolicyIconDarkResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyIconDarkResponse = {
  encode(message: RemoveLabelPolicyIconDarkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyIconDarkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyIconDarkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyIconDarkResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyIconDarkResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyIconDarkResponse>, I>>(
    base?: I,
  ): RemoveLabelPolicyIconDarkResponse {
    return RemoveLabelPolicyIconDarkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyIconDarkResponse>, I>>(
    object: I,
  ): RemoveLabelPolicyIconDarkResponse {
    const message = createBaseRemoveLabelPolicyIconDarkResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyFontRequest(): RemoveLabelPolicyFontRequest {
  return {};
}

export const RemoveLabelPolicyFontRequest = {
  encode(_: RemoveLabelPolicyFontRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyFontRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyFontRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyFontRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyFontRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyFontRequest>, I>>(base?: I): RemoveLabelPolicyFontRequest {
    return RemoveLabelPolicyFontRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyFontRequest>, I>>(_: I): RemoveLabelPolicyFontRequest {
    const message = createBaseRemoveLabelPolicyFontRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyFontResponse(): RemoveLabelPolicyFontResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyFontResponse = {
  encode(message: RemoveLabelPolicyFontResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveLabelPolicyFontResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyFontResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyFontResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyFontResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveLabelPolicyFontResponse>, I>>(base?: I): RemoveLabelPolicyFontResponse {
    return RemoveLabelPolicyFontResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveLabelPolicyFontResponse>, I>>(
    object: I,
  ): RemoveLabelPolicyFontResponse {
    const message = createBaseRemoveLabelPolicyFontResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLoginPolicyRequest(): GetLoginPolicyRequest {
  return {};
}

export const GetLoginPolicyRequest = {
  encode(_: GetLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLoginPolicyRequest {
    return {};
  },

  toJSON(_: GetLoginPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLoginPolicyRequest>, I>>(base?: I): GetLoginPolicyRequest {
    return GetLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLoginPolicyRequest>, I>>(_: I): GetLoginPolicyRequest {
    const message = createBaseGetLoginPolicyRequest();
    return message;
  },
};

function createBaseGetLoginPolicyResponse(): GetLoginPolicyResponse {
  return { policy: undefined };
}

export const GetLoginPolicyResponse = {
  encode(message: GetLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LoginPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LoginPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLoginPolicyResponse {
    return { policy: isSet(object.policy) ? LoginPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LoginPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLoginPolicyResponse>, I>>(base?: I): GetLoginPolicyResponse {
    return GetLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLoginPolicyResponse>, I>>(object: I): GetLoginPolicyResponse {
    const message = createBaseGetLoginPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LoginPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateLoginPolicyRequest(): UpdateLoginPolicyRequest {
  return {
    allowUsernamePassword: false,
    allowRegister: false,
    allowExternalIdp: false,
    forceMfa: false,
    passwordlessType: 0,
    hidePasswordReset: false,
    ignoreUnknownUsernames: false,
    defaultRedirectUri: "",
    passwordCheckLifetime: undefined,
    externalLoginCheckLifetime: undefined,
    mfaInitSkipLifetime: undefined,
    secondFactorCheckLifetime: undefined,
    multiFactorCheckLifetime: undefined,
    allowDomainDiscovery: false,
    disableLoginWithEmail: false,
    disableLoginWithPhone: false,
    forceMfaLocalOnly: false,
  };
}

export const UpdateLoginPolicyRequest = {
  encode(message: UpdateLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.allowUsernamePassword === true) {
      writer.uint32(8).bool(message.allowUsernamePassword);
    }
    if (message.allowRegister === true) {
      writer.uint32(16).bool(message.allowRegister);
    }
    if (message.allowExternalIdp === true) {
      writer.uint32(24).bool(message.allowExternalIdp);
    }
    if (message.forceMfa === true) {
      writer.uint32(32).bool(message.forceMfa);
    }
    if (message.passwordlessType !== 0) {
      writer.uint32(40).int32(message.passwordlessType);
    }
    if (message.hidePasswordReset === true) {
      writer.uint32(48).bool(message.hidePasswordReset);
    }
    if (message.ignoreUnknownUsernames === true) {
      writer.uint32(56).bool(message.ignoreUnknownUsernames);
    }
    if (message.defaultRedirectUri !== "") {
      writer.uint32(66).string(message.defaultRedirectUri);
    }
    if (message.passwordCheckLifetime !== undefined) {
      Duration.encode(message.passwordCheckLifetime, writer.uint32(74).fork()).ldelim();
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      Duration.encode(message.externalLoginCheckLifetime, writer.uint32(82).fork()).ldelim();
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      Duration.encode(message.mfaInitSkipLifetime, writer.uint32(90).fork()).ldelim();
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      Duration.encode(message.secondFactorCheckLifetime, writer.uint32(98).fork()).ldelim();
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      Duration.encode(message.multiFactorCheckLifetime, writer.uint32(106).fork()).ldelim();
    }
    if (message.allowDomainDiscovery === true) {
      writer.uint32(112).bool(message.allowDomainDiscovery);
    }
    if (message.disableLoginWithEmail === true) {
      writer.uint32(120).bool(message.disableLoginWithEmail);
    }
    if (message.disableLoginWithPhone === true) {
      writer.uint32(128).bool(message.disableLoginWithPhone);
    }
    if (message.forceMfaLocalOnly === true) {
      writer.uint32(136).bool(message.forceMfaLocalOnly);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowUsernamePassword = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowRegister = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowExternalIdp = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.forceMfa = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.passwordlessType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.hidePasswordReset = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ignoreUnknownUsernames = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.defaultRedirectUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.passwordCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.externalLoginCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.mfaInitSkipLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.secondFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.multiFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.allowDomainDiscovery = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.disableLoginWithEmail = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.disableLoginWithPhone = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.forceMfaLocalOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLoginPolicyRequest {
    return {
      allowUsernamePassword: isSet(object.allowUsernamePassword) ? Boolean(object.allowUsernamePassword) : false,
      allowRegister: isSet(object.allowRegister) ? Boolean(object.allowRegister) : false,
      allowExternalIdp: isSet(object.allowExternalIdp) ? Boolean(object.allowExternalIdp) : false,
      forceMfa: isSet(object.forceMfa) ? Boolean(object.forceMfa) : false,
      passwordlessType: isSet(object.passwordlessType) ? passwordlessTypeFromJSON(object.passwordlessType) : 0,
      hidePasswordReset: isSet(object.hidePasswordReset) ? Boolean(object.hidePasswordReset) : false,
      ignoreUnknownUsernames: isSet(object.ignoreUnknownUsernames) ? Boolean(object.ignoreUnknownUsernames) : false,
      defaultRedirectUri: isSet(object.defaultRedirectUri) ? String(object.defaultRedirectUri) : "",
      passwordCheckLifetime: isSet(object.passwordCheckLifetime)
        ? Duration.fromJSON(object.passwordCheckLifetime)
        : undefined,
      externalLoginCheckLifetime: isSet(object.externalLoginCheckLifetime)
        ? Duration.fromJSON(object.externalLoginCheckLifetime)
        : undefined,
      mfaInitSkipLifetime: isSet(object.mfaInitSkipLifetime)
        ? Duration.fromJSON(object.mfaInitSkipLifetime)
        : undefined,
      secondFactorCheckLifetime: isSet(object.secondFactorCheckLifetime)
        ? Duration.fromJSON(object.secondFactorCheckLifetime)
        : undefined,
      multiFactorCheckLifetime: isSet(object.multiFactorCheckLifetime)
        ? Duration.fromJSON(object.multiFactorCheckLifetime)
        : undefined,
      allowDomainDiscovery: isSet(object.allowDomainDiscovery) ? Boolean(object.allowDomainDiscovery) : false,
      disableLoginWithEmail: isSet(object.disableLoginWithEmail) ? Boolean(object.disableLoginWithEmail) : false,
      disableLoginWithPhone: isSet(object.disableLoginWithPhone) ? Boolean(object.disableLoginWithPhone) : false,
      forceMfaLocalOnly: isSet(object.forceMfaLocalOnly) ? Boolean(object.forceMfaLocalOnly) : false,
    };
  },

  toJSON(message: UpdateLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.allowUsernamePassword === true) {
      obj.allowUsernamePassword = message.allowUsernamePassword;
    }
    if (message.allowRegister === true) {
      obj.allowRegister = message.allowRegister;
    }
    if (message.allowExternalIdp === true) {
      obj.allowExternalIdp = message.allowExternalIdp;
    }
    if (message.forceMfa === true) {
      obj.forceMfa = message.forceMfa;
    }
    if (message.passwordlessType !== 0) {
      obj.passwordlessType = passwordlessTypeToJSON(message.passwordlessType);
    }
    if (message.hidePasswordReset === true) {
      obj.hidePasswordReset = message.hidePasswordReset;
    }
    if (message.ignoreUnknownUsernames === true) {
      obj.ignoreUnknownUsernames = message.ignoreUnknownUsernames;
    }
    if (message.defaultRedirectUri !== "") {
      obj.defaultRedirectUri = message.defaultRedirectUri;
    }
    if (message.passwordCheckLifetime !== undefined) {
      obj.passwordCheckLifetime = Duration.toJSON(message.passwordCheckLifetime);
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      obj.externalLoginCheckLifetime = Duration.toJSON(message.externalLoginCheckLifetime);
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      obj.mfaInitSkipLifetime = Duration.toJSON(message.mfaInitSkipLifetime);
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      obj.secondFactorCheckLifetime = Duration.toJSON(message.secondFactorCheckLifetime);
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      obj.multiFactorCheckLifetime = Duration.toJSON(message.multiFactorCheckLifetime);
    }
    if (message.allowDomainDiscovery === true) {
      obj.allowDomainDiscovery = message.allowDomainDiscovery;
    }
    if (message.disableLoginWithEmail === true) {
      obj.disableLoginWithEmail = message.disableLoginWithEmail;
    }
    if (message.disableLoginWithPhone === true) {
      obj.disableLoginWithPhone = message.disableLoginWithPhone;
    }
    if (message.forceMfaLocalOnly === true) {
      obj.forceMfaLocalOnly = message.forceMfaLocalOnly;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLoginPolicyRequest>, I>>(base?: I): UpdateLoginPolicyRequest {
    return UpdateLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLoginPolicyRequest>, I>>(object: I): UpdateLoginPolicyRequest {
    const message = createBaseUpdateLoginPolicyRequest();
    message.allowUsernamePassword = object.allowUsernamePassword ?? false;
    message.allowRegister = object.allowRegister ?? false;
    message.allowExternalIdp = object.allowExternalIdp ?? false;
    message.forceMfa = object.forceMfa ?? false;
    message.passwordlessType = object.passwordlessType ?? 0;
    message.hidePasswordReset = object.hidePasswordReset ?? false;
    message.ignoreUnknownUsernames = object.ignoreUnknownUsernames ?? false;
    message.defaultRedirectUri = object.defaultRedirectUri ?? "";
    message.passwordCheckLifetime =
      (object.passwordCheckLifetime !== undefined && object.passwordCheckLifetime !== null)
        ? Duration.fromPartial(object.passwordCheckLifetime)
        : undefined;
    message.externalLoginCheckLifetime =
      (object.externalLoginCheckLifetime !== undefined && object.externalLoginCheckLifetime !== null)
        ? Duration.fromPartial(object.externalLoginCheckLifetime)
        : undefined;
    message.mfaInitSkipLifetime = (object.mfaInitSkipLifetime !== undefined && object.mfaInitSkipLifetime !== null)
      ? Duration.fromPartial(object.mfaInitSkipLifetime)
      : undefined;
    message.secondFactorCheckLifetime =
      (object.secondFactorCheckLifetime !== undefined && object.secondFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.secondFactorCheckLifetime)
        : undefined;
    message.multiFactorCheckLifetime =
      (object.multiFactorCheckLifetime !== undefined && object.multiFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.multiFactorCheckLifetime)
        : undefined;
    message.allowDomainDiscovery = object.allowDomainDiscovery ?? false;
    message.disableLoginWithEmail = object.disableLoginWithEmail ?? false;
    message.disableLoginWithPhone = object.disableLoginWithPhone ?? false;
    message.forceMfaLocalOnly = object.forceMfaLocalOnly ?? false;
    return message;
  },
};

function createBaseUpdateLoginPolicyResponse(): UpdateLoginPolicyResponse {
  return { details: undefined };
}

export const UpdateLoginPolicyResponse = {
  encode(message: UpdateLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLoginPolicyResponse>, I>>(base?: I): UpdateLoginPolicyResponse {
    return UpdateLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLoginPolicyResponse>, I>>(object: I): UpdateLoginPolicyResponse {
    const message = createBaseUpdateLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyIDPsRequest(): ListLoginPolicyIDPsRequest {
  return { query: undefined };
}

export const ListLoginPolicyIDPsRequest = {
  encode(message: ListLoginPolicyIDPsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyIDPsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyIDPsRequest {
    return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: ListLoginPolicyIDPsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicyIDPsRequest>, I>>(base?: I): ListLoginPolicyIDPsRequest {
    return ListLoginPolicyIDPsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicyIDPsRequest>, I>>(object: I): ListLoginPolicyIDPsRequest {
    const message = createBaseListLoginPolicyIDPsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyIDPsResponse(): ListLoginPolicyIDPsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicyIDPsResponse = {
  encode(message: ListLoginPolicyIDPsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      IDPLoginPolicyLink.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyIDPsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(IDPLoginPolicyLink.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyIDPsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => IDPLoginPolicyLink.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListLoginPolicyIDPsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => IDPLoginPolicyLink.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicyIDPsResponse>, I>>(base?: I): ListLoginPolicyIDPsResponse {
    return ListLoginPolicyIDPsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicyIDPsResponse>, I>>(object: I): ListLoginPolicyIDPsResponse {
    const message = createBaseListLoginPolicyIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => IDPLoginPolicyLink.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddIDPToLoginPolicyRequest(): AddIDPToLoginPolicyRequest {
  return { idpId: "" };
}

export const AddIDPToLoginPolicyRequest = {
  encode(message: AddIDPToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddIDPToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIDPToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIDPToLoginPolicyRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: AddIDPToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddIDPToLoginPolicyRequest>, I>>(base?: I): AddIDPToLoginPolicyRequest {
    return AddIDPToLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddIDPToLoginPolicyRequest>, I>>(object: I): AddIDPToLoginPolicyRequest {
    const message = createBaseAddIDPToLoginPolicyRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseAddIDPToLoginPolicyResponse(): AddIDPToLoginPolicyResponse {
  return { details: undefined };
}

export const AddIDPToLoginPolicyResponse = {
  encode(message: AddIDPToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddIDPToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIDPToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIDPToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddIDPToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddIDPToLoginPolicyResponse>, I>>(base?: I): AddIDPToLoginPolicyResponse {
    return AddIDPToLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddIDPToLoginPolicyResponse>, I>>(object: I): AddIDPToLoginPolicyResponse {
    const message = createBaseAddIDPToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveIDPFromLoginPolicyRequest(): RemoveIDPFromLoginPolicyRequest {
  return { idpId: "" };
}

export const RemoveIDPFromLoginPolicyRequest = {
  encode(message: RemoveIDPFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIDPFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPFromLoginPolicyRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: RemoveIDPFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveIDPFromLoginPolicyRequest>, I>>(base?: I): RemoveIDPFromLoginPolicyRequest {
    return RemoveIDPFromLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveIDPFromLoginPolicyRequest>, I>>(
    object: I,
  ): RemoveIDPFromLoginPolicyRequest {
    const message = createBaseRemoveIDPFromLoginPolicyRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseRemoveIDPFromLoginPolicyResponse(): RemoveIDPFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveIDPFromLoginPolicyResponse = {
  encode(message: RemoveIDPFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIDPFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveIDPFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveIDPFromLoginPolicyResponse>, I>>(
    base?: I,
  ): RemoveIDPFromLoginPolicyResponse {
    return RemoveIDPFromLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveIDPFromLoginPolicyResponse>, I>>(
    object: I,
  ): RemoveIDPFromLoginPolicyResponse {
    const message = createBaseRemoveIDPFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicySecondFactorsRequest(): ListLoginPolicySecondFactorsRequest {
  return {};
}

export const ListLoginPolicySecondFactorsRequest = {
  encode(_: ListLoginPolicySecondFactorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicySecondFactorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicySecondFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListLoginPolicySecondFactorsRequest {
    return {};
  },

  toJSON(_: ListLoginPolicySecondFactorsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicySecondFactorsRequest>, I>>(
    base?: I,
  ): ListLoginPolicySecondFactorsRequest {
    return ListLoginPolicySecondFactorsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicySecondFactorsRequest>, I>>(
    _: I,
  ): ListLoginPolicySecondFactorsRequest {
    const message = createBaseListLoginPolicySecondFactorsRequest();
    return message;
  },
};

function createBaseListLoginPolicySecondFactorsResponse(): ListLoginPolicySecondFactorsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicySecondFactorsResponse = {
  encode(message: ListLoginPolicySecondFactorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    writer.uint32(18).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicySecondFactorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicySecondFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.result.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicySecondFactorsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => secondFactorTypeFromJSON(e)) : [],
    };
  },

  toJSON(message: ListLoginPolicySecondFactorsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => secondFactorTypeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicySecondFactorsResponse>, I>>(
    base?: I,
  ): ListLoginPolicySecondFactorsResponse {
    return ListLoginPolicySecondFactorsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicySecondFactorsResponse>, I>>(
    object: I,
  ): ListLoginPolicySecondFactorsResponse {
    const message = createBaseListLoginPolicySecondFactorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddSecondFactorToLoginPolicyRequest(): AddSecondFactorToLoginPolicyRequest {
  return { type: 0 };
}

export const AddSecondFactorToLoginPolicyRequest = {
  encode(message: AddSecondFactorToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSecondFactorToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecondFactorToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSecondFactorToLoginPolicyRequest {
    return { type: isSet(object.type) ? secondFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: AddSecondFactorToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = secondFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSecondFactorToLoginPolicyRequest>, I>>(
    base?: I,
  ): AddSecondFactorToLoginPolicyRequest {
    return AddSecondFactorToLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSecondFactorToLoginPolicyRequest>, I>>(
    object: I,
  ): AddSecondFactorToLoginPolicyRequest {
    const message = createBaseAddSecondFactorToLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAddSecondFactorToLoginPolicyResponse(): AddSecondFactorToLoginPolicyResponse {
  return { details: undefined };
}

export const AddSecondFactorToLoginPolicyResponse = {
  encode(message: AddSecondFactorToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSecondFactorToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecondFactorToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSecondFactorToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddSecondFactorToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSecondFactorToLoginPolicyResponse>, I>>(
    base?: I,
  ): AddSecondFactorToLoginPolicyResponse {
    return AddSecondFactorToLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSecondFactorToLoginPolicyResponse>, I>>(
    object: I,
  ): AddSecondFactorToLoginPolicyResponse {
    const message = createBaseAddSecondFactorToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveSecondFactorFromLoginPolicyRequest(): RemoveSecondFactorFromLoginPolicyRequest {
  return { type: 0 };
}

export const RemoveSecondFactorFromLoginPolicyRequest = {
  encode(message: RemoveSecondFactorFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSecondFactorFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSecondFactorFromLoginPolicyRequest {
    return { type: isSet(object.type) ? secondFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: RemoveSecondFactorFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = secondFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>, I>>(
    base?: I,
  ): RemoveSecondFactorFromLoginPolicyRequest {
    return RemoveSecondFactorFromLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>, I>>(
    object: I,
  ): RemoveSecondFactorFromLoginPolicyRequest {
    const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRemoveSecondFactorFromLoginPolicyResponse(): RemoveSecondFactorFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveSecondFactorFromLoginPolicyResponse = {
  encode(message: RemoveSecondFactorFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSecondFactorFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSecondFactorFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveSecondFactorFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>, I>>(
    base?: I,
  ): RemoveSecondFactorFromLoginPolicyResponse {
    return RemoveSecondFactorFromLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>, I>>(
    object: I,
  ): RemoveSecondFactorFromLoginPolicyResponse {
    const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyMultiFactorsRequest(): ListLoginPolicyMultiFactorsRequest {
  return {};
}

export const ListLoginPolicyMultiFactorsRequest = {
  encode(_: ListLoginPolicyMultiFactorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyMultiFactorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyMultiFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListLoginPolicyMultiFactorsRequest {
    return {};
  },

  toJSON(_: ListLoginPolicyMultiFactorsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicyMultiFactorsRequest>, I>>(
    base?: I,
  ): ListLoginPolicyMultiFactorsRequest {
    return ListLoginPolicyMultiFactorsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicyMultiFactorsRequest>, I>>(
    _: I,
  ): ListLoginPolicyMultiFactorsRequest {
    const message = createBaseListLoginPolicyMultiFactorsRequest();
    return message;
  },
};

function createBaseListLoginPolicyMultiFactorsResponse(): ListLoginPolicyMultiFactorsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicyMultiFactorsResponse = {
  encode(message: ListLoginPolicyMultiFactorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    writer.uint32(18).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyMultiFactorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyMultiFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.result.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyMultiFactorsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => multiFactorTypeFromJSON(e)) : [],
    };
  },

  toJSON(message: ListLoginPolicyMultiFactorsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => multiFactorTypeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicyMultiFactorsResponse>, I>>(
    base?: I,
  ): ListLoginPolicyMultiFactorsResponse {
    return ListLoginPolicyMultiFactorsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicyMultiFactorsResponse>, I>>(
    object: I,
  ): ListLoginPolicyMultiFactorsResponse {
    const message = createBaseListLoginPolicyMultiFactorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddMultiFactorToLoginPolicyRequest(): AddMultiFactorToLoginPolicyRequest {
  return { type: 0 };
}

export const AddMultiFactorToLoginPolicyRequest = {
  encode(message: AddMultiFactorToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMultiFactorToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMultiFactorToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMultiFactorToLoginPolicyRequest {
    return { type: isSet(object.type) ? multiFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: AddMultiFactorToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = multiFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMultiFactorToLoginPolicyRequest>, I>>(
    base?: I,
  ): AddMultiFactorToLoginPolicyRequest {
    return AddMultiFactorToLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMultiFactorToLoginPolicyRequest>, I>>(
    object: I,
  ): AddMultiFactorToLoginPolicyRequest {
    const message = createBaseAddMultiFactorToLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAddMultiFactorToLoginPolicyResponse(): AddMultiFactorToLoginPolicyResponse {
  return { details: undefined };
}

export const AddMultiFactorToLoginPolicyResponse = {
  encode(message: AddMultiFactorToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMultiFactorToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMultiFactorToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMultiFactorToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddMultiFactorToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMultiFactorToLoginPolicyResponse>, I>>(
    base?: I,
  ): AddMultiFactorToLoginPolicyResponse {
    return AddMultiFactorToLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMultiFactorToLoginPolicyResponse>, I>>(
    object: I,
  ): AddMultiFactorToLoginPolicyResponse {
    const message = createBaseAddMultiFactorToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveMultiFactorFromLoginPolicyRequest(): RemoveMultiFactorFromLoginPolicyRequest {
  return { type: 0 };
}

export const RemoveMultiFactorFromLoginPolicyRequest = {
  encode(message: RemoveMultiFactorFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMultiFactorFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMultiFactorFromLoginPolicyRequest {
    return { type: isSet(object.type) ? multiFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: RemoveMultiFactorFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = multiFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>, I>>(
    base?: I,
  ): RemoveMultiFactorFromLoginPolicyRequest {
    return RemoveMultiFactorFromLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>, I>>(
    object: I,
  ): RemoveMultiFactorFromLoginPolicyRequest {
    const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRemoveMultiFactorFromLoginPolicyResponse(): RemoveMultiFactorFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveMultiFactorFromLoginPolicyResponse = {
  encode(message: RemoveMultiFactorFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMultiFactorFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMultiFactorFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveMultiFactorFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>, I>>(
    base?: I,
  ): RemoveMultiFactorFromLoginPolicyResponse {
    return RemoveMultiFactorFromLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>, I>>(
    object: I,
  ): RemoveMultiFactorFromLoginPolicyResponse {
    const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPasswordComplexityPolicyRequest(): GetPasswordComplexityPolicyRequest {
  return {};
}

export const GetPasswordComplexityPolicyRequest = {
  encode(_: GetPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPasswordComplexityPolicyRequest {
    return {};
  },

  toJSON(_: GetPasswordComplexityPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPasswordComplexityPolicyRequest>, I>>(
    base?: I,
  ): GetPasswordComplexityPolicyRequest {
    return GetPasswordComplexityPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPasswordComplexityPolicyRequest>, I>>(
    _: I,
  ): GetPasswordComplexityPolicyRequest {
    const message = createBaseGetPasswordComplexityPolicyRequest();
    return message;
  },
};

function createBaseGetPasswordComplexityPolicyResponse(): GetPasswordComplexityPolicyResponse {
  return { policy: undefined };
}

export const GetPasswordComplexityPolicyResponse = {
  encode(message: GetPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordComplexityPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPasswordComplexityPolicyResponse {
    return { policy: isSet(object.policy) ? PasswordComplexityPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPasswordComplexityPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PasswordComplexityPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPasswordComplexityPolicyResponse>, I>>(
    base?: I,
  ): GetPasswordComplexityPolicyResponse {
    return GetPasswordComplexityPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPasswordComplexityPolicyResponse>, I>>(
    object: I,
  ): GetPasswordComplexityPolicyResponse {
    const message = createBaseGetPasswordComplexityPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordComplexityPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdatePasswordComplexityPolicyRequest(): UpdatePasswordComplexityPolicyRequest {
  return { minLength: 0, hasUppercase: false, hasLowercase: false, hasNumber: false, hasSymbol: false };
}

export const UpdatePasswordComplexityPolicyRequest = {
  encode(message: UpdatePasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minLength !== 0) {
      writer.uint32(8).uint32(message.minLength);
    }
    if (message.hasUppercase === true) {
      writer.uint32(16).bool(message.hasUppercase);
    }
    if (message.hasLowercase === true) {
      writer.uint32(24).bool(message.hasLowercase);
    }
    if (message.hasNumber === true) {
      writer.uint32(32).bool(message.hasNumber);
    }
    if (message.hasSymbol === true) {
      writer.uint32(40).bool(message.hasSymbol);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hasUppercase = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasLowercase = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasNumber = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasSymbol = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePasswordComplexityPolicyRequest {
    return {
      minLength: isSet(object.minLength) ? Number(object.minLength) : 0,
      hasUppercase: isSet(object.hasUppercase) ? Boolean(object.hasUppercase) : false,
      hasLowercase: isSet(object.hasLowercase) ? Boolean(object.hasLowercase) : false,
      hasNumber: isSet(object.hasNumber) ? Boolean(object.hasNumber) : false,
      hasSymbol: isSet(object.hasSymbol) ? Boolean(object.hasSymbol) : false,
    };
  },

  toJSON(message: UpdatePasswordComplexityPolicyRequest): unknown {
    const obj: any = {};
    if (message.minLength !== 0) {
      obj.minLength = Math.round(message.minLength);
    }
    if (message.hasUppercase === true) {
      obj.hasUppercase = message.hasUppercase;
    }
    if (message.hasLowercase === true) {
      obj.hasLowercase = message.hasLowercase;
    }
    if (message.hasNumber === true) {
      obj.hasNumber = message.hasNumber;
    }
    if (message.hasSymbol === true) {
      obj.hasSymbol = message.hasSymbol;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePasswordComplexityPolicyRequest>, I>>(
    base?: I,
  ): UpdatePasswordComplexityPolicyRequest {
    return UpdatePasswordComplexityPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePasswordComplexityPolicyRequest>, I>>(
    object: I,
  ): UpdatePasswordComplexityPolicyRequest {
    const message = createBaseUpdatePasswordComplexityPolicyRequest();
    message.minLength = object.minLength ?? 0;
    message.hasUppercase = object.hasUppercase ?? false;
    message.hasLowercase = object.hasLowercase ?? false;
    message.hasNumber = object.hasNumber ?? false;
    message.hasSymbol = object.hasSymbol ?? false;
    return message;
  },
};

function createBaseUpdatePasswordComplexityPolicyResponse(): UpdatePasswordComplexityPolicyResponse {
  return { details: undefined };
}

export const UpdatePasswordComplexityPolicyResponse = {
  encode(message: UpdatePasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePasswordComplexityPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdatePasswordComplexityPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePasswordComplexityPolicyResponse>, I>>(
    base?: I,
  ): UpdatePasswordComplexityPolicyResponse {
    return UpdatePasswordComplexityPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePasswordComplexityPolicyResponse>, I>>(
    object: I,
  ): UpdatePasswordComplexityPolicyResponse {
    const message = createBaseUpdatePasswordComplexityPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPasswordAgePolicyRequest(): GetPasswordAgePolicyRequest {
  return {};
}

export const GetPasswordAgePolicyRequest = {
  encode(_: GetPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPasswordAgePolicyRequest {
    return {};
  },

  toJSON(_: GetPasswordAgePolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPasswordAgePolicyRequest>, I>>(base?: I): GetPasswordAgePolicyRequest {
    return GetPasswordAgePolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPasswordAgePolicyRequest>, I>>(_: I): GetPasswordAgePolicyRequest {
    const message = createBaseGetPasswordAgePolicyRequest();
    return message;
  },
};

function createBaseGetPasswordAgePolicyResponse(): GetPasswordAgePolicyResponse {
  return { policy: undefined };
}

export const GetPasswordAgePolicyResponse = {
  encode(message: GetPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordAgePolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordAgePolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPasswordAgePolicyResponse {
    return { policy: isSet(object.policy) ? PasswordAgePolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPasswordAgePolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PasswordAgePolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPasswordAgePolicyResponse>, I>>(base?: I): GetPasswordAgePolicyResponse {
    return GetPasswordAgePolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPasswordAgePolicyResponse>, I>>(object: I): GetPasswordAgePolicyResponse {
    const message = createBaseGetPasswordAgePolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordAgePolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdatePasswordAgePolicyRequest(): UpdatePasswordAgePolicyRequest {
  return { maxAgeDays: 0, expireWarnDays: 0 };
}

export const UpdatePasswordAgePolicyRequest = {
  encode(message: UpdatePasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxAgeDays !== 0) {
      writer.uint32(8).uint32(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      writer.uint32(16).uint32(message.expireWarnDays);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxAgeDays = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireWarnDays = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePasswordAgePolicyRequest {
    return {
      maxAgeDays: isSet(object.maxAgeDays) ? Number(object.maxAgeDays) : 0,
      expireWarnDays: isSet(object.expireWarnDays) ? Number(object.expireWarnDays) : 0,
    };
  },

  toJSON(message: UpdatePasswordAgePolicyRequest): unknown {
    const obj: any = {};
    if (message.maxAgeDays !== 0) {
      obj.maxAgeDays = Math.round(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      obj.expireWarnDays = Math.round(message.expireWarnDays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePasswordAgePolicyRequest>, I>>(base?: I): UpdatePasswordAgePolicyRequest {
    return UpdatePasswordAgePolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePasswordAgePolicyRequest>, I>>(
    object: I,
  ): UpdatePasswordAgePolicyRequest {
    const message = createBaseUpdatePasswordAgePolicyRequest();
    message.maxAgeDays = object.maxAgeDays ?? 0;
    message.expireWarnDays = object.expireWarnDays ?? 0;
    return message;
  },
};

function createBaseUpdatePasswordAgePolicyResponse(): UpdatePasswordAgePolicyResponse {
  return { details: undefined };
}

export const UpdatePasswordAgePolicyResponse = {
  encode(message: UpdatePasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePasswordAgePolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdatePasswordAgePolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePasswordAgePolicyResponse>, I>>(base?: I): UpdatePasswordAgePolicyResponse {
    return UpdatePasswordAgePolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePasswordAgePolicyResponse>, I>>(
    object: I,
  ): UpdatePasswordAgePolicyResponse {
    const message = createBaseUpdatePasswordAgePolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLockoutPolicyRequest(): GetLockoutPolicyRequest {
  return {};
}

export const GetLockoutPolicyRequest = {
  encode(_: GetLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLockoutPolicyRequest {
    return {};
  },

  toJSON(_: GetLockoutPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLockoutPolicyRequest>, I>>(base?: I): GetLockoutPolicyRequest {
    return GetLockoutPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLockoutPolicyRequest>, I>>(_: I): GetLockoutPolicyRequest {
    const message = createBaseGetLockoutPolicyRequest();
    return message;
  },
};

function createBaseGetLockoutPolicyResponse(): GetLockoutPolicyResponse {
  return { policy: undefined };
}

export const GetLockoutPolicyResponse = {
  encode(message: GetLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LockoutPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LockoutPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLockoutPolicyResponse {
    return { policy: isSet(object.policy) ? LockoutPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetLockoutPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LockoutPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLockoutPolicyResponse>, I>>(base?: I): GetLockoutPolicyResponse {
    return GetLockoutPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLockoutPolicyResponse>, I>>(object: I): GetLockoutPolicyResponse {
    const message = createBaseGetLockoutPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LockoutPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateLockoutPolicyRequest(): UpdateLockoutPolicyRequest {
  return { maxPasswordAttempts: 0 };
}

export const UpdateLockoutPolicyRequest = {
  encode(message: UpdateLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxPasswordAttempts !== 0) {
      writer.uint32(8).uint32(message.maxPasswordAttempts);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxPasswordAttempts = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLockoutPolicyRequest {
    return { maxPasswordAttempts: isSet(object.maxPasswordAttempts) ? Number(object.maxPasswordAttempts) : 0 };
  },

  toJSON(message: UpdateLockoutPolicyRequest): unknown {
    const obj: any = {};
    if (message.maxPasswordAttempts !== 0) {
      obj.maxPasswordAttempts = Math.round(message.maxPasswordAttempts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLockoutPolicyRequest>, I>>(base?: I): UpdateLockoutPolicyRequest {
    return UpdateLockoutPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLockoutPolicyRequest>, I>>(object: I): UpdateLockoutPolicyRequest {
    const message = createBaseUpdateLockoutPolicyRequest();
    message.maxPasswordAttempts = object.maxPasswordAttempts ?? 0;
    return message;
  },
};

function createBaseUpdateLockoutPolicyResponse(): UpdateLockoutPolicyResponse {
  return { details: undefined };
}

export const UpdateLockoutPolicyResponse = {
  encode(message: UpdateLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLockoutPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLockoutPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLockoutPolicyResponse>, I>>(base?: I): UpdateLockoutPolicyResponse {
    return UpdateLockoutPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLockoutPolicyResponse>, I>>(object: I): UpdateLockoutPolicyResponse {
    const message = createBaseUpdateLockoutPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPrivacyPolicyRequest(): GetPrivacyPolicyRequest {
  return {};
}

export const GetPrivacyPolicyRequest = {
  encode(_: GetPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPrivacyPolicyRequest {
    return {};
  },

  toJSON(_: GetPrivacyPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPrivacyPolicyRequest>, I>>(base?: I): GetPrivacyPolicyRequest {
    return GetPrivacyPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPrivacyPolicyRequest>, I>>(_: I): GetPrivacyPolicyRequest {
    const message = createBaseGetPrivacyPolicyRequest();
    return message;
  },
};

function createBaseGetPrivacyPolicyResponse(): GetPrivacyPolicyResponse {
  return { policy: undefined };
}

export const GetPrivacyPolicyResponse = {
  encode(message: GetPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PrivacyPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPrivacyPolicyResponse {
    return { policy: isSet(object.policy) ? PrivacyPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPrivacyPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PrivacyPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPrivacyPolicyResponse>, I>>(base?: I): GetPrivacyPolicyResponse {
    return GetPrivacyPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPrivacyPolicyResponse>, I>>(object: I): GetPrivacyPolicyResponse {
    const message = createBaseGetPrivacyPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PrivacyPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdatePrivacyPolicyRequest(): UpdatePrivacyPolicyRequest {
  return { tosLink: "", privacyLink: "", helpLink: "", supportEmail: "" };
}

export const UpdatePrivacyPolicyRequest = {
  encode(message: UpdatePrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tosLink !== "") {
      writer.uint32(10).string(message.tosLink);
    }
    if (message.privacyLink !== "") {
      writer.uint32(18).string(message.privacyLink);
    }
    if (message.helpLink !== "") {
      writer.uint32(26).string(message.helpLink);
    }
    if (message.supportEmail !== "") {
      writer.uint32(34).string(message.supportEmail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tosLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privacyLink = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.helpLink = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supportEmail = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePrivacyPolicyRequest {
    return {
      tosLink: isSet(object.tosLink) ? String(object.tosLink) : "",
      privacyLink: isSet(object.privacyLink) ? String(object.privacyLink) : "",
      helpLink: isSet(object.helpLink) ? String(object.helpLink) : "",
      supportEmail: isSet(object.supportEmail) ? String(object.supportEmail) : "",
    };
  },

  toJSON(message: UpdatePrivacyPolicyRequest): unknown {
    const obj: any = {};
    if (message.tosLink !== "") {
      obj.tosLink = message.tosLink;
    }
    if (message.privacyLink !== "") {
      obj.privacyLink = message.privacyLink;
    }
    if (message.helpLink !== "") {
      obj.helpLink = message.helpLink;
    }
    if (message.supportEmail !== "") {
      obj.supportEmail = message.supportEmail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePrivacyPolicyRequest>, I>>(base?: I): UpdatePrivacyPolicyRequest {
    return UpdatePrivacyPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePrivacyPolicyRequest>, I>>(object: I): UpdatePrivacyPolicyRequest {
    const message = createBaseUpdatePrivacyPolicyRequest();
    message.tosLink = object.tosLink ?? "";
    message.privacyLink = object.privacyLink ?? "";
    message.helpLink = object.helpLink ?? "";
    message.supportEmail = object.supportEmail ?? "";
    return message;
  },
};

function createBaseUpdatePrivacyPolicyResponse(): UpdatePrivacyPolicyResponse {
  return { details: undefined };
}

export const UpdatePrivacyPolicyResponse = {
  encode(message: UpdatePrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePrivacyPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdatePrivacyPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePrivacyPolicyResponse>, I>>(base?: I): UpdatePrivacyPolicyResponse {
    return UpdatePrivacyPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePrivacyPolicyResponse>, I>>(object: I): UpdatePrivacyPolicyResponse {
    const message = createBaseUpdatePrivacyPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddNotificationPolicyRequest(): AddNotificationPolicyRequest {
  return { passwordChange: false };
}

export const AddNotificationPolicyRequest = {
  encode(message: AddNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.passwordChange === true) {
      writer.uint32(8).bool(message.passwordChange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.passwordChange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddNotificationPolicyRequest {
    return { passwordChange: isSet(object.passwordChange) ? Boolean(object.passwordChange) : false };
  },

  toJSON(message: AddNotificationPolicyRequest): unknown {
    const obj: any = {};
    if (message.passwordChange === true) {
      obj.passwordChange = message.passwordChange;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddNotificationPolicyRequest>, I>>(base?: I): AddNotificationPolicyRequest {
    return AddNotificationPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddNotificationPolicyRequest>, I>>(object: I): AddNotificationPolicyRequest {
    const message = createBaseAddNotificationPolicyRequest();
    message.passwordChange = object.passwordChange ?? false;
    return message;
  },
};

function createBaseAddNotificationPolicyResponse(): AddNotificationPolicyResponse {
  return { details: undefined };
}

export const AddNotificationPolicyResponse = {
  encode(message: AddNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddNotificationPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddNotificationPolicyResponse>, I>>(base?: I): AddNotificationPolicyResponse {
    return AddNotificationPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddNotificationPolicyResponse>, I>>(
    object: I,
  ): AddNotificationPolicyResponse {
    const message = createBaseAddNotificationPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetNotificationPolicyRequest(): GetNotificationPolicyRequest {
  return {};
}

export const GetNotificationPolicyRequest = {
  encode(_: GetNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetNotificationPolicyRequest {
    return {};
  },

  toJSON(_: GetNotificationPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetNotificationPolicyRequest>, I>>(base?: I): GetNotificationPolicyRequest {
    return GetNotificationPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetNotificationPolicyRequest>, I>>(_: I): GetNotificationPolicyRequest {
    const message = createBaseGetNotificationPolicyRequest();
    return message;
  },
};

function createBaseGetNotificationPolicyResponse(): GetNotificationPolicyResponse {
  return { policy: undefined };
}

export const GetNotificationPolicyResponse = {
  encode(message: GetNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      NotificationPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = NotificationPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotificationPolicyResponse {
    return { policy: isSet(object.policy) ? NotificationPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = NotificationPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetNotificationPolicyResponse>, I>>(base?: I): GetNotificationPolicyResponse {
    return GetNotificationPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetNotificationPolicyResponse>, I>>(
    object: I,
  ): GetNotificationPolicyResponse {
    const message = createBaseGetNotificationPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? NotificationPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateNotificationPolicyRequest(): UpdateNotificationPolicyRequest {
  return { passwordChange: false };
}

export const UpdateNotificationPolicyRequest = {
  encode(message: UpdateNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.passwordChange === true) {
      writer.uint32(8).bool(message.passwordChange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.passwordChange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNotificationPolicyRequest {
    return { passwordChange: isSet(object.passwordChange) ? Boolean(object.passwordChange) : false };
  },

  toJSON(message: UpdateNotificationPolicyRequest): unknown {
    const obj: any = {};
    if (message.passwordChange === true) {
      obj.passwordChange = message.passwordChange;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateNotificationPolicyRequest>, I>>(base?: I): UpdateNotificationPolicyRequest {
    return UpdateNotificationPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateNotificationPolicyRequest>, I>>(
    object: I,
  ): UpdateNotificationPolicyRequest {
    const message = createBaseUpdateNotificationPolicyRequest();
    message.passwordChange = object.passwordChange ?? false;
    return message;
  },
};

function createBaseUpdateNotificationPolicyResponse(): UpdateNotificationPolicyResponse {
  return { details: undefined };
}

export const UpdateNotificationPolicyResponse = {
  encode(message: UpdateNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNotificationPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateNotificationPolicyResponse>, I>>(
    base?: I,
  ): UpdateNotificationPolicyResponse {
    return UpdateNotificationPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateNotificationPolicyResponse>, I>>(
    object: I,
  ): UpdateNotificationPolicyResponse {
    const message = createBaseUpdateNotificationPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultInitMessageTextRequest(): GetDefaultInitMessageTextRequest {
  return { language: "" };
}

export const GetDefaultInitMessageTextRequest = {
  encode(message: GetDefaultInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultInitMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultInitMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultInitMessageTextRequest {
    return GetDefaultInitMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultInitMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultInitMessageTextRequest {
    const message = createBaseGetDefaultInitMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultInitMessageTextResponse(): GetDefaultInitMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultInitMessageTextResponse = {
  encode(message: GetDefaultInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultInitMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultInitMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultInitMessageTextResponse {
    return GetDefaultInitMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultInitMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultInitMessageTextResponse {
    const message = createBaseGetDefaultInitMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomInitMessageTextRequest(): GetCustomInitMessageTextRequest {
  return { language: "" };
}

export const GetCustomInitMessageTextRequest = {
  encode(message: GetCustomInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomInitMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomInitMessageTextRequest>, I>>(base?: I): GetCustomInitMessageTextRequest {
    return GetCustomInitMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomInitMessageTextRequest>, I>>(
    object: I,
  ): GetCustomInitMessageTextRequest {
    const message = createBaseGetCustomInitMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomInitMessageTextResponse(): GetCustomInitMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomInitMessageTextResponse = {
  encode(message: GetCustomInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomInitMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomInitMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomInitMessageTextResponse {
    return GetCustomInitMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomInitMessageTextResponse>, I>>(
    object: I,
  ): GetCustomInitMessageTextResponse {
    const message = createBaseGetCustomInitMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultInitMessageTextRequest(): SetDefaultInitMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultInitMessageTextRequest = {
  encode(message: SetDefaultInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultInitMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultInitMessageTextRequest>, I>>(
    base?: I,
  ): SetDefaultInitMessageTextRequest {
    return SetDefaultInitMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultInitMessageTextRequest>, I>>(
    object: I,
  ): SetDefaultInitMessageTextRequest {
    const message = createBaseSetDefaultInitMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultInitMessageTextResponse(): SetDefaultInitMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultInitMessageTextResponse = {
  encode(message: SetDefaultInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultInitMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultInitMessageTextResponse>, I>>(
    base?: I,
  ): SetDefaultInitMessageTextResponse {
    return SetDefaultInitMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultInitMessageTextResponse>, I>>(
    object: I,
  ): SetDefaultInitMessageTextResponse {
    const message = createBaseSetDefaultInitMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomInitMessageTextToDefaultRequest(): ResetCustomInitMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomInitMessageTextToDefaultRequest = {
  encode(message: ResetCustomInitMessageTextToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomInitMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInitMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomInitMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomInitMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomInitMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomInitMessageTextToDefaultRequest {
    return ResetCustomInitMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomInitMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomInitMessageTextToDefaultRequest {
    const message = createBaseResetCustomInitMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomInitMessageTextToDefaultResponse(): ResetCustomInitMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomInitMessageTextToDefaultResponse = {
  encode(message: ResetCustomInitMessageTextToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomInitMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInitMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomInitMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomInitMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomInitMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomInitMessageTextToDefaultResponse {
    return ResetCustomInitMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomInitMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomInitMessageTextToDefaultResponse {
    const message = createBaseResetCustomInitMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordResetMessageTextRequest(): GetDefaultPasswordResetMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordResetMessageTextRequest = {
  encode(message: GetDefaultPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordResetMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordResetMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultPasswordResetMessageTextRequest {
    return GetDefaultPasswordResetMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordResetMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultPasswordResetMessageTextRequest {
    const message = createBaseGetDefaultPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordResetMessageTextResponse(): GetDefaultPasswordResetMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordResetMessageTextResponse = {
  encode(message: GetDefaultPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordResetMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordResetMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultPasswordResetMessageTextResponse {
    return GetDefaultPasswordResetMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordResetMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultPasswordResetMessageTextResponse {
    const message = createBaseGetDefaultPasswordResetMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordResetMessageTextRequest(): GetCustomPasswordResetMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordResetMessageTextRequest = {
  encode(message: GetCustomPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordResetMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordResetMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomPasswordResetMessageTextRequest {
    return GetCustomPasswordResetMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordResetMessageTextRequest>, I>>(
    object: I,
  ): GetCustomPasswordResetMessageTextRequest {
    const message = createBaseGetCustomPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordResetMessageTextResponse(): GetCustomPasswordResetMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordResetMessageTextResponse = {
  encode(message: GetCustomPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordResetMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordResetMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomPasswordResetMessageTextResponse {
    return GetCustomPasswordResetMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordResetMessageTextResponse>, I>>(
    object: I,
  ): GetCustomPasswordResetMessageTextResponse {
    const message = createBaseGetCustomPasswordResetMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultPasswordResetMessageTextRequest(): SetDefaultPasswordResetMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultPasswordResetMessageTextRequest = {
  encode(message: SetDefaultPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordResetMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultPasswordResetMessageTextRequest>, I>>(
    base?: I,
  ): SetDefaultPasswordResetMessageTextRequest {
    return SetDefaultPasswordResetMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultPasswordResetMessageTextRequest>, I>>(
    object: I,
  ): SetDefaultPasswordResetMessageTextRequest {
    const message = createBaseSetDefaultPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultPasswordResetMessageTextResponse(): SetDefaultPasswordResetMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultPasswordResetMessageTextResponse = {
  encode(message: SetDefaultPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordResetMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultPasswordResetMessageTextResponse>, I>>(
    base?: I,
  ): SetDefaultPasswordResetMessageTextResponse {
    return SetDefaultPasswordResetMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultPasswordResetMessageTextResponse>, I>>(
    object: I,
  ): SetDefaultPasswordResetMessageTextResponse {
    const message = createBaseSetDefaultPasswordResetMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordResetMessageTextToDefaultRequest(): ResetCustomPasswordResetMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordResetMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordResetMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordResetMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordResetMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordResetMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomPasswordResetMessageTextToDefaultRequest {
    return ResetCustomPasswordResetMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomPasswordResetMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordResetMessageTextToDefaultResponse(): ResetCustomPasswordResetMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordResetMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordResetMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordResetMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordResetMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordResetMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomPasswordResetMessageTextToDefaultResponse {
    return ResetCustomPasswordResetMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomPasswordResetMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyEmailMessageTextRequest(): GetDefaultVerifyEmailMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyEmailMessageTextRequest = {
  encode(message: GetDefaultVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyEmailMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultVerifyEmailMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultVerifyEmailMessageTextRequest {
    return GetDefaultVerifyEmailMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultVerifyEmailMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultVerifyEmailMessageTextRequest {
    const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyEmailMessageTextResponse(): GetDefaultVerifyEmailMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyEmailMessageTextResponse = {
  encode(message: GetDefaultVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyEmailMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultVerifyEmailMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultVerifyEmailMessageTextResponse {
    return GetDefaultVerifyEmailMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultVerifyEmailMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultVerifyEmailMessageTextResponse {
    const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyEmailMessageTextRequest(): GetCustomVerifyEmailMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyEmailMessageTextRequest = {
  encode(message: GetCustomVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyEmailMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomVerifyEmailMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomVerifyEmailMessageTextRequest {
    return GetCustomVerifyEmailMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomVerifyEmailMessageTextRequest>, I>>(
    object: I,
  ): GetCustomVerifyEmailMessageTextRequest {
    const message = createBaseGetCustomVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyEmailMessageTextResponse(): GetCustomVerifyEmailMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyEmailMessageTextResponse = {
  encode(message: GetCustomVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyEmailMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomVerifyEmailMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomVerifyEmailMessageTextResponse {
    return GetCustomVerifyEmailMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomVerifyEmailMessageTextResponse>, I>>(
    object: I,
  ): GetCustomVerifyEmailMessageTextResponse {
    const message = createBaseGetCustomVerifyEmailMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultVerifyEmailMessageTextRequest(): SetDefaultVerifyEmailMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultVerifyEmailMessageTextRequest = {
  encode(message: SetDefaultVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyEmailMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultVerifyEmailMessageTextRequest>, I>>(
    base?: I,
  ): SetDefaultVerifyEmailMessageTextRequest {
    return SetDefaultVerifyEmailMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultVerifyEmailMessageTextRequest>, I>>(
    object: I,
  ): SetDefaultVerifyEmailMessageTextRequest {
    const message = createBaseSetDefaultVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultVerifyEmailMessageTextResponse(): SetDefaultVerifyEmailMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultVerifyEmailMessageTextResponse = {
  encode(message: SetDefaultVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyEmailMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultVerifyEmailMessageTextResponse>, I>>(
    base?: I,
  ): SetDefaultVerifyEmailMessageTextResponse {
    return SetDefaultVerifyEmailMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultVerifyEmailMessageTextResponse>, I>>(
    object: I,
  ): SetDefaultVerifyEmailMessageTextResponse {
    const message = createBaseSetDefaultVerifyEmailMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyEmailMessageTextToDefaultRequest(): ResetCustomVerifyEmailMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyEmailMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomVerifyEmailMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomVerifyEmailMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    return ResetCustomVerifyEmailMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyEmailMessageTextToDefaultResponse(): ResetCustomVerifyEmailMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyEmailMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomVerifyEmailMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomVerifyEmailMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    return ResetCustomVerifyEmailMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyPhoneMessageTextRequest(): GetDefaultVerifyPhoneMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyPhoneMessageTextRequest = {
  encode(message: GetDefaultVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyPhoneMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultVerifyPhoneMessageTextRequest {
    return GetDefaultVerifyPhoneMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultVerifyPhoneMessageTextRequest {
    const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyPhoneMessageTextResponse(): GetDefaultVerifyPhoneMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyPhoneMessageTextResponse = {
  encode(message: GetDefaultVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyPhoneMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultVerifyPhoneMessageTextResponse {
    return GetDefaultVerifyPhoneMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultVerifyPhoneMessageTextResponse {
    const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyPhoneMessageTextRequest(): GetCustomVerifyPhoneMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyPhoneMessageTextRequest = {
  encode(message: GetCustomVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyPhoneMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomVerifyPhoneMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomVerifyPhoneMessageTextRequest {
    return GetCustomVerifyPhoneMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomVerifyPhoneMessageTextRequest>, I>>(
    object: I,
  ): GetCustomVerifyPhoneMessageTextRequest {
    const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyPhoneMessageTextResponse(): GetCustomVerifyPhoneMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyPhoneMessageTextResponse = {
  encode(message: GetCustomVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyPhoneMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomVerifyPhoneMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomVerifyPhoneMessageTextResponse {
    return GetCustomVerifyPhoneMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomVerifyPhoneMessageTextResponse>, I>>(
    object: I,
  ): GetCustomVerifyPhoneMessageTextResponse {
    const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultVerifyPhoneMessageTextRequest(): SetDefaultVerifyPhoneMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultVerifyPhoneMessageTextRequest = {
  encode(message: SetDefaultVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyPhoneMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultVerifyPhoneMessageTextRequest>, I>>(
    base?: I,
  ): SetDefaultVerifyPhoneMessageTextRequest {
    return SetDefaultVerifyPhoneMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultVerifyPhoneMessageTextRequest>, I>>(
    object: I,
  ): SetDefaultVerifyPhoneMessageTextRequest {
    const message = createBaseSetDefaultVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultVerifyPhoneMessageTextResponse(): SetDefaultVerifyPhoneMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultVerifyPhoneMessageTextResponse = {
  encode(message: SetDefaultVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyPhoneMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultVerifyPhoneMessageTextResponse>, I>>(
    base?: I,
  ): SetDefaultVerifyPhoneMessageTextResponse {
    return SetDefaultVerifyPhoneMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultVerifyPhoneMessageTextResponse>, I>>(
    object: I,
  ): SetDefaultVerifyPhoneMessageTextResponse {
    const message = createBaseSetDefaultVerifyPhoneMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest(): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyPhoneMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomVerifyPhoneMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    return ResetCustomVerifyPhoneMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse(): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyPhoneMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomVerifyPhoneMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomVerifyPhoneMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    return ResetCustomVerifyPhoneMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultDomainClaimedMessageTextRequest(): GetDefaultDomainClaimedMessageTextRequest {
  return { language: "" };
}

export const GetDefaultDomainClaimedMessageTextRequest = {
  encode(message: GetDefaultDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultDomainClaimedMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultDomainClaimedMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultDomainClaimedMessageTextRequest {
    return GetDefaultDomainClaimedMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultDomainClaimedMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultDomainClaimedMessageTextRequest {
    const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultDomainClaimedMessageTextResponse(): GetDefaultDomainClaimedMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultDomainClaimedMessageTextResponse = {
  encode(message: GetDefaultDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultDomainClaimedMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultDomainClaimedMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultDomainClaimedMessageTextResponse {
    return GetDefaultDomainClaimedMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultDomainClaimedMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultDomainClaimedMessageTextResponse {
    const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomDomainClaimedMessageTextRequest(): GetCustomDomainClaimedMessageTextRequest {
  return { language: "" };
}

export const GetCustomDomainClaimedMessageTextRequest = {
  encode(message: GetCustomDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainClaimedMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomDomainClaimedMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomDomainClaimedMessageTextRequest {
    return GetCustomDomainClaimedMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomDomainClaimedMessageTextRequest>, I>>(
    object: I,
  ): GetCustomDomainClaimedMessageTextRequest {
    const message = createBaseGetCustomDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomDomainClaimedMessageTextResponse(): GetCustomDomainClaimedMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomDomainClaimedMessageTextResponse = {
  encode(message: GetCustomDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainClaimedMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomDomainClaimedMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomDomainClaimedMessageTextResponse {
    return GetCustomDomainClaimedMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomDomainClaimedMessageTextResponse>, I>>(
    object: I,
  ): GetCustomDomainClaimedMessageTextResponse {
    const message = createBaseGetCustomDomainClaimedMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultDomainClaimedMessageTextRequest(): SetDefaultDomainClaimedMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultDomainClaimedMessageTextRequest = {
  encode(message: SetDefaultDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultDomainClaimedMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultDomainClaimedMessageTextRequest>, I>>(
    base?: I,
  ): SetDefaultDomainClaimedMessageTextRequest {
    return SetDefaultDomainClaimedMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultDomainClaimedMessageTextRequest>, I>>(
    object: I,
  ): SetDefaultDomainClaimedMessageTextRequest {
    const message = createBaseSetDefaultDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultDomainClaimedMessageTextResponse(): SetDefaultDomainClaimedMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultDomainClaimedMessageTextResponse = {
  encode(message: SetDefaultDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultDomainClaimedMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultDomainClaimedMessageTextResponse>, I>>(
    base?: I,
  ): SetDefaultDomainClaimedMessageTextResponse {
    return SetDefaultDomainClaimedMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultDomainClaimedMessageTextResponse>, I>>(
    object: I,
  ): SetDefaultDomainClaimedMessageTextResponse {
    const message = createBaseSetDefaultDomainClaimedMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomDomainClaimedMessageTextToDefaultRequest(): ResetCustomDomainClaimedMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomDomainClaimedMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomDomainClaimedMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomDomainClaimedMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    return ResetCustomDomainClaimedMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomDomainClaimedMessageTextToDefaultResponse(): ResetCustomDomainClaimedMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomDomainClaimedMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomDomainClaimedMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomDomainClaimedMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    return ResetCustomDomainClaimedMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordChangeMessageTextRequest(): GetDefaultPasswordChangeMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordChangeMessageTextRequest = {
  encode(message: GetDefaultPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordChangeMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordChangeMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultPasswordChangeMessageTextRequest {
    return GetDefaultPasswordChangeMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordChangeMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultPasswordChangeMessageTextRequest {
    const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordChangeMessageTextResponse(): GetDefaultPasswordChangeMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordChangeMessageTextResponse = {
  encode(message: GetDefaultPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordChangeMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordChangeMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultPasswordChangeMessageTextResponse {
    return GetDefaultPasswordChangeMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordChangeMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultPasswordChangeMessageTextResponse {
    const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordChangeMessageTextRequest(): GetCustomPasswordChangeMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordChangeMessageTextRequest = {
  encode(message: GetCustomPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordChangeMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordChangeMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomPasswordChangeMessageTextRequest {
    return GetCustomPasswordChangeMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordChangeMessageTextRequest>, I>>(
    object: I,
  ): GetCustomPasswordChangeMessageTextRequest {
    const message = createBaseGetCustomPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordChangeMessageTextResponse(): GetCustomPasswordChangeMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordChangeMessageTextResponse = {
  encode(message: GetCustomPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordChangeMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordChangeMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomPasswordChangeMessageTextResponse {
    return GetCustomPasswordChangeMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordChangeMessageTextResponse>, I>>(
    object: I,
  ): GetCustomPasswordChangeMessageTextResponse {
    const message = createBaseGetCustomPasswordChangeMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultPasswordChangeMessageTextRequest(): SetDefaultPasswordChangeMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultPasswordChangeMessageTextRequest = {
  encode(message: SetDefaultPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordChangeMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultPasswordChangeMessageTextRequest>, I>>(
    base?: I,
  ): SetDefaultPasswordChangeMessageTextRequest {
    return SetDefaultPasswordChangeMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultPasswordChangeMessageTextRequest>, I>>(
    object: I,
  ): SetDefaultPasswordChangeMessageTextRequest {
    const message = createBaseSetDefaultPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultPasswordChangeMessageTextResponse(): SetDefaultPasswordChangeMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultPasswordChangeMessageTextResponse = {
  encode(message: SetDefaultPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordChangeMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultPasswordChangeMessageTextResponse>, I>>(
    base?: I,
  ): SetDefaultPasswordChangeMessageTextResponse {
    return SetDefaultPasswordChangeMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultPasswordChangeMessageTextResponse>, I>>(
    object: I,
  ): SetDefaultPasswordChangeMessageTextResponse {
    const message = createBaseSetDefaultPasswordChangeMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordChangeMessageTextToDefaultRequest(): ResetCustomPasswordChangeMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordChangeMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordChangeMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordChangeMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    return ResetCustomPasswordChangeMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordChangeMessageTextToDefaultResponse(): ResetCustomPasswordChangeMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordChangeMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordChangeMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordChangeMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    return ResetCustomPasswordChangeMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordlessRegistrationMessageTextRequest(): GetDefaultPasswordlessRegistrationMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: GetDefaultPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordlessRegistrationMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultPasswordlessRegistrationMessageTextRequest {
    return GetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultPasswordlessRegistrationMessageTextRequest {
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordlessRegistrationMessageTextResponse(): GetDefaultPasswordlessRegistrationMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: GetDefaultPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordlessRegistrationMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultPasswordlessRegistrationMessageTextResponse {
    return GetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultPasswordlessRegistrationMessageTextResponse {
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordlessRegistrationMessageTextRequest(): GetCustomPasswordlessRegistrationMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: GetCustomPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordlessRegistrationMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomPasswordlessRegistrationMessageTextRequest {
    return GetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>, I>>(
    object: I,
  ): GetCustomPasswordlessRegistrationMessageTextRequest {
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordlessRegistrationMessageTextResponse(): GetCustomPasswordlessRegistrationMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: GetCustomPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordlessRegistrationMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomPasswordlessRegistrationMessageTextResponse {
    return GetCustomPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>, I>>(
    object: I,
  ): GetCustomPasswordlessRegistrationMessageTextResponse {
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultPasswordlessRegistrationMessageTextRequest(): SetDefaultPasswordlessRegistrationMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: SetDefaultPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordlessRegistrationMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultPasswordlessRegistrationMessageTextRequest>, I>>(
    base?: I,
  ): SetDefaultPasswordlessRegistrationMessageTextRequest {
    return SetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultPasswordlessRegistrationMessageTextRequest>, I>>(
    object: I,
  ): SetDefaultPasswordlessRegistrationMessageTextRequest {
    const message = createBaseSetDefaultPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultPasswordlessRegistrationMessageTextResponse(): SetDefaultPasswordlessRegistrationMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: SetDefaultPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDefaultPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordlessRegistrationMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDefaultPasswordlessRegistrationMessageTextResponse>, I>>(
    base?: I,
  ): SetDefaultPasswordlessRegistrationMessageTextResponse {
    return SetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDefaultPasswordlessRegistrationMessageTextResponse>, I>>(
    object: I,
  ): SetDefaultPasswordlessRegistrationMessageTextResponse {
    const message = createBaseSetDefaultPasswordlessRegistrationMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest(): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse(): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    return ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultLoginTextsRequest(): GetDefaultLoginTextsRequest {
  return { language: "" };
}

export const GetDefaultLoginTextsRequest = {
  encode(message: GetDefaultLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLoginTextsRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLoginTextsRequest>, I>>(base?: I): GetDefaultLoginTextsRequest {
    return GetDefaultLoginTextsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLoginTextsRequest>, I>>(object: I): GetDefaultLoginTextsRequest {
    const message = createBaseGetDefaultLoginTextsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultLoginTextsResponse(): GetDefaultLoginTextsResponse {
  return { customText: undefined };
}

export const GetDefaultLoginTextsResponse = {
  encode(message: GetDefaultLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      LoginCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = LoginCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLoginTextsResponse {
    return { customText: isSet(object.customText) ? LoginCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = LoginCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLoginTextsResponse>, I>>(base?: I): GetDefaultLoginTextsResponse {
    return GetDefaultLoginTextsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLoginTextsResponse>, I>>(object: I): GetDefaultLoginTextsResponse {
    const message = createBaseGetDefaultLoginTextsResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? LoginCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomLoginTextsRequest(): GetCustomLoginTextsRequest {
  return { language: "" };
}

export const GetCustomLoginTextsRequest = {
  encode(message: GetCustomLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomLoginTextsRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomLoginTextsRequest>, I>>(base?: I): GetCustomLoginTextsRequest {
    return GetCustomLoginTextsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomLoginTextsRequest>, I>>(object: I): GetCustomLoginTextsRequest {
    const message = createBaseGetCustomLoginTextsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomLoginTextsResponse(): GetCustomLoginTextsResponse {
  return { customText: undefined };
}

export const GetCustomLoginTextsResponse = {
  encode(message: GetCustomLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      LoginCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = LoginCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomLoginTextsResponse {
    return { customText: isSet(object.customText) ? LoginCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = LoginCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomLoginTextsResponse>, I>>(base?: I): GetCustomLoginTextsResponse {
    return GetCustomLoginTextsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomLoginTextsResponse>, I>>(object: I): GetCustomLoginTextsResponse {
    const message = createBaseGetCustomLoginTextsResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? LoginCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomLoginTextsRequest(): SetCustomLoginTextsRequest {
  return {
    language: "",
    selectAccountText: undefined,
    loginText: undefined,
    passwordText: undefined,
    usernameChangeText: undefined,
    usernameChangeDoneText: undefined,
    initPasswordText: undefined,
    initPasswordDoneText: undefined,
    emailVerificationText: undefined,
    emailVerificationDoneText: undefined,
    initializeUserText: undefined,
    initializeDoneText: undefined,
    initMfaPromptText: undefined,
    initMfaOtpText: undefined,
    initMfaU2fText: undefined,
    initMfaDoneText: undefined,
    mfaProvidersText: undefined,
    verifyMfaOtpText: undefined,
    verifyMfaU2fText: undefined,
    passwordlessText: undefined,
    passwordChangeText: undefined,
    passwordChangeDoneText: undefined,
    passwordResetDoneText: undefined,
    registrationOptionText: undefined,
    registrationUserText: undefined,
    registrationOrgText: undefined,
    linkingUserDoneText: undefined,
    externalUserNotFoundText: undefined,
    successLoginText: undefined,
    logoutText: undefined,
    footerText: undefined,
    passwordlessPromptText: undefined,
    passwordlessRegistrationText: undefined,
    passwordlessRegistrationDoneText: undefined,
    externalRegistrationUserOverviewText: undefined,
  };
}

export const SetCustomLoginTextsRequest = {
  encode(message: SetCustomLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.selectAccountText !== undefined) {
      SelectAccountScreenText.encode(message.selectAccountText, writer.uint32(18).fork()).ldelim();
    }
    if (message.loginText !== undefined) {
      LoginScreenText.encode(message.loginText, writer.uint32(26).fork()).ldelim();
    }
    if (message.passwordText !== undefined) {
      PasswordScreenText.encode(message.passwordText, writer.uint32(34).fork()).ldelim();
    }
    if (message.usernameChangeText !== undefined) {
      UsernameChangeScreenText.encode(message.usernameChangeText, writer.uint32(42).fork()).ldelim();
    }
    if (message.usernameChangeDoneText !== undefined) {
      UsernameChangeDoneScreenText.encode(message.usernameChangeDoneText, writer.uint32(50).fork()).ldelim();
    }
    if (message.initPasswordText !== undefined) {
      InitPasswordScreenText.encode(message.initPasswordText, writer.uint32(58).fork()).ldelim();
    }
    if (message.initPasswordDoneText !== undefined) {
      InitPasswordDoneScreenText.encode(message.initPasswordDoneText, writer.uint32(66).fork()).ldelim();
    }
    if (message.emailVerificationText !== undefined) {
      EmailVerificationScreenText.encode(message.emailVerificationText, writer.uint32(74).fork()).ldelim();
    }
    if (message.emailVerificationDoneText !== undefined) {
      EmailVerificationDoneScreenText.encode(message.emailVerificationDoneText, writer.uint32(82).fork()).ldelim();
    }
    if (message.initializeUserText !== undefined) {
      InitializeUserScreenText.encode(message.initializeUserText, writer.uint32(90).fork()).ldelim();
    }
    if (message.initializeDoneText !== undefined) {
      InitializeUserDoneScreenText.encode(message.initializeDoneText, writer.uint32(98).fork()).ldelim();
    }
    if (message.initMfaPromptText !== undefined) {
      InitMFAPromptScreenText.encode(message.initMfaPromptText, writer.uint32(106).fork()).ldelim();
    }
    if (message.initMfaOtpText !== undefined) {
      InitMFAOTPScreenText.encode(message.initMfaOtpText, writer.uint32(114).fork()).ldelim();
    }
    if (message.initMfaU2fText !== undefined) {
      InitMFAU2FScreenText.encode(message.initMfaU2fText, writer.uint32(122).fork()).ldelim();
    }
    if (message.initMfaDoneText !== undefined) {
      InitMFADoneScreenText.encode(message.initMfaDoneText, writer.uint32(130).fork()).ldelim();
    }
    if (message.mfaProvidersText !== undefined) {
      MFAProvidersText.encode(message.mfaProvidersText, writer.uint32(138).fork()).ldelim();
    }
    if (message.verifyMfaOtpText !== undefined) {
      VerifyMFAOTPScreenText.encode(message.verifyMfaOtpText, writer.uint32(146).fork()).ldelim();
    }
    if (message.verifyMfaU2fText !== undefined) {
      VerifyMFAU2FScreenText.encode(message.verifyMfaU2fText, writer.uint32(154).fork()).ldelim();
    }
    if (message.passwordlessText !== undefined) {
      PasswordlessScreenText.encode(message.passwordlessText, writer.uint32(162).fork()).ldelim();
    }
    if (message.passwordChangeText !== undefined) {
      PasswordChangeScreenText.encode(message.passwordChangeText, writer.uint32(170).fork()).ldelim();
    }
    if (message.passwordChangeDoneText !== undefined) {
      PasswordChangeDoneScreenText.encode(message.passwordChangeDoneText, writer.uint32(178).fork()).ldelim();
    }
    if (message.passwordResetDoneText !== undefined) {
      PasswordResetDoneScreenText.encode(message.passwordResetDoneText, writer.uint32(186).fork()).ldelim();
    }
    if (message.registrationOptionText !== undefined) {
      RegistrationOptionScreenText.encode(message.registrationOptionText, writer.uint32(194).fork()).ldelim();
    }
    if (message.registrationUserText !== undefined) {
      RegistrationUserScreenText.encode(message.registrationUserText, writer.uint32(202).fork()).ldelim();
    }
    if (message.registrationOrgText !== undefined) {
      RegistrationOrgScreenText.encode(message.registrationOrgText, writer.uint32(210).fork()).ldelim();
    }
    if (message.linkingUserDoneText !== undefined) {
      LinkingUserDoneScreenText.encode(message.linkingUserDoneText, writer.uint32(218).fork()).ldelim();
    }
    if (message.externalUserNotFoundText !== undefined) {
      ExternalUserNotFoundScreenText.encode(message.externalUserNotFoundText, writer.uint32(226).fork()).ldelim();
    }
    if (message.successLoginText !== undefined) {
      SuccessLoginScreenText.encode(message.successLoginText, writer.uint32(234).fork()).ldelim();
    }
    if (message.logoutText !== undefined) {
      LogoutDoneScreenText.encode(message.logoutText, writer.uint32(242).fork()).ldelim();
    }
    if (message.footerText !== undefined) {
      FooterText.encode(message.footerText, writer.uint32(250).fork()).ldelim();
    }
    if (message.passwordlessPromptText !== undefined) {
      PasswordlessPromptScreenText.encode(message.passwordlessPromptText, writer.uint32(258).fork()).ldelim();
    }
    if (message.passwordlessRegistrationText !== undefined) {
      PasswordlessRegistrationScreenText.encode(message.passwordlessRegistrationText, writer.uint32(266).fork())
        .ldelim();
    }
    if (message.passwordlessRegistrationDoneText !== undefined) {
      PasswordlessRegistrationDoneScreenText.encode(message.passwordlessRegistrationDoneText, writer.uint32(274).fork())
        .ldelim();
    }
    if (message.externalRegistrationUserOverviewText !== undefined) {
      ExternalRegistrationUserOverviewScreenText.encode(
        message.externalRegistrationUserOverviewText,
        writer.uint32(282).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.selectAccountText = SelectAccountScreenText.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.loginText = LoginScreenText.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.passwordText = PasswordScreenText.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.usernameChangeText = UsernameChangeScreenText.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.usernameChangeDoneText = UsernameChangeDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.initPasswordText = InitPasswordScreenText.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.initPasswordDoneText = InitPasswordDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.emailVerificationText = EmailVerificationScreenText.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.emailVerificationDoneText = EmailVerificationDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.initializeUserText = InitializeUserScreenText.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.initializeDoneText = InitializeUserDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.initMfaPromptText = InitMFAPromptScreenText.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.initMfaOtpText = InitMFAOTPScreenText.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.initMfaU2fText = InitMFAU2FScreenText.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.initMfaDoneText = InitMFADoneScreenText.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.mfaProvidersText = MFAProvidersText.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.verifyMfaOtpText = VerifyMFAOTPScreenText.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.verifyMfaU2fText = VerifyMFAU2FScreenText.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.passwordlessText = PasswordlessScreenText.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.passwordChangeText = PasswordChangeScreenText.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.passwordChangeDoneText = PasswordChangeDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.passwordResetDoneText = PasswordResetDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.registrationOptionText = RegistrationOptionScreenText.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.registrationUserText = RegistrationUserScreenText.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.registrationOrgText = RegistrationOrgScreenText.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.linkingUserDoneText = LinkingUserDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.externalUserNotFoundText = ExternalUserNotFoundScreenText.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.successLoginText = SuccessLoginScreenText.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.logoutText = LogoutDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.footerText = FooterText.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.passwordlessPromptText = PasswordlessPromptScreenText.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.passwordlessRegistrationText = PasswordlessRegistrationScreenText.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomLoginTextsRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      selectAccountText: isSet(object.selectAccountText)
        ? SelectAccountScreenText.fromJSON(object.selectAccountText)
        : undefined,
      loginText: isSet(object.loginText) ? LoginScreenText.fromJSON(object.loginText) : undefined,
      passwordText: isSet(object.passwordText) ? PasswordScreenText.fromJSON(object.passwordText) : undefined,
      usernameChangeText: isSet(object.usernameChangeText)
        ? UsernameChangeScreenText.fromJSON(object.usernameChangeText)
        : undefined,
      usernameChangeDoneText: isSet(object.usernameChangeDoneText)
        ? UsernameChangeDoneScreenText.fromJSON(object.usernameChangeDoneText)
        : undefined,
      initPasswordText: isSet(object.initPasswordText)
        ? InitPasswordScreenText.fromJSON(object.initPasswordText)
        : undefined,
      initPasswordDoneText: isSet(object.initPasswordDoneText)
        ? InitPasswordDoneScreenText.fromJSON(object.initPasswordDoneText)
        : undefined,
      emailVerificationText: isSet(object.emailVerificationText)
        ? EmailVerificationScreenText.fromJSON(object.emailVerificationText)
        : undefined,
      emailVerificationDoneText: isSet(object.emailVerificationDoneText)
        ? EmailVerificationDoneScreenText.fromJSON(object.emailVerificationDoneText)
        : undefined,
      initializeUserText: isSet(object.initializeUserText)
        ? InitializeUserScreenText.fromJSON(object.initializeUserText)
        : undefined,
      initializeDoneText: isSet(object.initializeDoneText)
        ? InitializeUserDoneScreenText.fromJSON(object.initializeDoneText)
        : undefined,
      initMfaPromptText: isSet(object.initMfaPromptText)
        ? InitMFAPromptScreenText.fromJSON(object.initMfaPromptText)
        : undefined,
      initMfaOtpText: isSet(object.initMfaOtpText) ? InitMFAOTPScreenText.fromJSON(object.initMfaOtpText) : undefined,
      initMfaU2fText: isSet(object.initMfaU2fText) ? InitMFAU2FScreenText.fromJSON(object.initMfaU2fText) : undefined,
      initMfaDoneText: isSet(object.initMfaDoneText)
        ? InitMFADoneScreenText.fromJSON(object.initMfaDoneText)
        : undefined,
      mfaProvidersText: isSet(object.mfaProvidersText) ? MFAProvidersText.fromJSON(object.mfaProvidersText) : undefined,
      verifyMfaOtpText: isSet(object.verifyMfaOtpText)
        ? VerifyMFAOTPScreenText.fromJSON(object.verifyMfaOtpText)
        : undefined,
      verifyMfaU2fText: isSet(object.verifyMfaU2fText)
        ? VerifyMFAU2FScreenText.fromJSON(object.verifyMfaU2fText)
        : undefined,
      passwordlessText: isSet(object.passwordlessText)
        ? PasswordlessScreenText.fromJSON(object.passwordlessText)
        : undefined,
      passwordChangeText: isSet(object.passwordChangeText)
        ? PasswordChangeScreenText.fromJSON(object.passwordChangeText)
        : undefined,
      passwordChangeDoneText: isSet(object.passwordChangeDoneText)
        ? PasswordChangeDoneScreenText.fromJSON(object.passwordChangeDoneText)
        : undefined,
      passwordResetDoneText: isSet(object.passwordResetDoneText)
        ? PasswordResetDoneScreenText.fromJSON(object.passwordResetDoneText)
        : undefined,
      registrationOptionText: isSet(object.registrationOptionText)
        ? RegistrationOptionScreenText.fromJSON(object.registrationOptionText)
        : undefined,
      registrationUserText: isSet(object.registrationUserText)
        ? RegistrationUserScreenText.fromJSON(object.registrationUserText)
        : undefined,
      registrationOrgText: isSet(object.registrationOrgText)
        ? RegistrationOrgScreenText.fromJSON(object.registrationOrgText)
        : undefined,
      linkingUserDoneText: isSet(object.linkingUserDoneText)
        ? LinkingUserDoneScreenText.fromJSON(object.linkingUserDoneText)
        : undefined,
      externalUserNotFoundText: isSet(object.externalUserNotFoundText)
        ? ExternalUserNotFoundScreenText.fromJSON(object.externalUserNotFoundText)
        : undefined,
      successLoginText: isSet(object.successLoginText)
        ? SuccessLoginScreenText.fromJSON(object.successLoginText)
        : undefined,
      logoutText: isSet(object.logoutText) ? LogoutDoneScreenText.fromJSON(object.logoutText) : undefined,
      footerText: isSet(object.footerText) ? FooterText.fromJSON(object.footerText) : undefined,
      passwordlessPromptText: isSet(object.passwordlessPromptText)
        ? PasswordlessPromptScreenText.fromJSON(object.passwordlessPromptText)
        : undefined,
      passwordlessRegistrationText: isSet(object.passwordlessRegistrationText)
        ? PasswordlessRegistrationScreenText.fromJSON(object.passwordlessRegistrationText)
        : undefined,
      passwordlessRegistrationDoneText: isSet(object.passwordlessRegistrationDoneText)
        ? PasswordlessRegistrationDoneScreenText.fromJSON(object.passwordlessRegistrationDoneText)
        : undefined,
      externalRegistrationUserOverviewText: isSet(object.externalRegistrationUserOverviewText)
        ? ExternalRegistrationUserOverviewScreenText.fromJSON(object.externalRegistrationUserOverviewText)
        : undefined,
    };
  },

  toJSON(message: SetCustomLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.selectAccountText !== undefined) {
      obj.selectAccountText = SelectAccountScreenText.toJSON(message.selectAccountText);
    }
    if (message.loginText !== undefined) {
      obj.loginText = LoginScreenText.toJSON(message.loginText);
    }
    if (message.passwordText !== undefined) {
      obj.passwordText = PasswordScreenText.toJSON(message.passwordText);
    }
    if (message.usernameChangeText !== undefined) {
      obj.usernameChangeText = UsernameChangeScreenText.toJSON(message.usernameChangeText);
    }
    if (message.usernameChangeDoneText !== undefined) {
      obj.usernameChangeDoneText = UsernameChangeDoneScreenText.toJSON(message.usernameChangeDoneText);
    }
    if (message.initPasswordText !== undefined) {
      obj.initPasswordText = InitPasswordScreenText.toJSON(message.initPasswordText);
    }
    if (message.initPasswordDoneText !== undefined) {
      obj.initPasswordDoneText = InitPasswordDoneScreenText.toJSON(message.initPasswordDoneText);
    }
    if (message.emailVerificationText !== undefined) {
      obj.emailVerificationText = EmailVerificationScreenText.toJSON(message.emailVerificationText);
    }
    if (message.emailVerificationDoneText !== undefined) {
      obj.emailVerificationDoneText = EmailVerificationDoneScreenText.toJSON(message.emailVerificationDoneText);
    }
    if (message.initializeUserText !== undefined) {
      obj.initializeUserText = InitializeUserScreenText.toJSON(message.initializeUserText);
    }
    if (message.initializeDoneText !== undefined) {
      obj.initializeDoneText = InitializeUserDoneScreenText.toJSON(message.initializeDoneText);
    }
    if (message.initMfaPromptText !== undefined) {
      obj.initMfaPromptText = InitMFAPromptScreenText.toJSON(message.initMfaPromptText);
    }
    if (message.initMfaOtpText !== undefined) {
      obj.initMfaOtpText = InitMFAOTPScreenText.toJSON(message.initMfaOtpText);
    }
    if (message.initMfaU2fText !== undefined) {
      obj.initMfaU2fText = InitMFAU2FScreenText.toJSON(message.initMfaU2fText);
    }
    if (message.initMfaDoneText !== undefined) {
      obj.initMfaDoneText = InitMFADoneScreenText.toJSON(message.initMfaDoneText);
    }
    if (message.mfaProvidersText !== undefined) {
      obj.mfaProvidersText = MFAProvidersText.toJSON(message.mfaProvidersText);
    }
    if (message.verifyMfaOtpText !== undefined) {
      obj.verifyMfaOtpText = VerifyMFAOTPScreenText.toJSON(message.verifyMfaOtpText);
    }
    if (message.verifyMfaU2fText !== undefined) {
      obj.verifyMfaU2fText = VerifyMFAU2FScreenText.toJSON(message.verifyMfaU2fText);
    }
    if (message.passwordlessText !== undefined) {
      obj.passwordlessText = PasswordlessScreenText.toJSON(message.passwordlessText);
    }
    if (message.passwordChangeText !== undefined) {
      obj.passwordChangeText = PasswordChangeScreenText.toJSON(message.passwordChangeText);
    }
    if (message.passwordChangeDoneText !== undefined) {
      obj.passwordChangeDoneText = PasswordChangeDoneScreenText.toJSON(message.passwordChangeDoneText);
    }
    if (message.passwordResetDoneText !== undefined) {
      obj.passwordResetDoneText = PasswordResetDoneScreenText.toJSON(message.passwordResetDoneText);
    }
    if (message.registrationOptionText !== undefined) {
      obj.registrationOptionText = RegistrationOptionScreenText.toJSON(message.registrationOptionText);
    }
    if (message.registrationUserText !== undefined) {
      obj.registrationUserText = RegistrationUserScreenText.toJSON(message.registrationUserText);
    }
    if (message.registrationOrgText !== undefined) {
      obj.registrationOrgText = RegistrationOrgScreenText.toJSON(message.registrationOrgText);
    }
    if (message.linkingUserDoneText !== undefined) {
      obj.linkingUserDoneText = LinkingUserDoneScreenText.toJSON(message.linkingUserDoneText);
    }
    if (message.externalUserNotFoundText !== undefined) {
      obj.externalUserNotFoundText = ExternalUserNotFoundScreenText.toJSON(message.externalUserNotFoundText);
    }
    if (message.successLoginText !== undefined) {
      obj.successLoginText = SuccessLoginScreenText.toJSON(message.successLoginText);
    }
    if (message.logoutText !== undefined) {
      obj.logoutText = LogoutDoneScreenText.toJSON(message.logoutText);
    }
    if (message.footerText !== undefined) {
      obj.footerText = FooterText.toJSON(message.footerText);
    }
    if (message.passwordlessPromptText !== undefined) {
      obj.passwordlessPromptText = PasswordlessPromptScreenText.toJSON(message.passwordlessPromptText);
    }
    if (message.passwordlessRegistrationText !== undefined) {
      obj.passwordlessRegistrationText = PasswordlessRegistrationScreenText.toJSON(
        message.passwordlessRegistrationText,
      );
    }
    if (message.passwordlessRegistrationDoneText !== undefined) {
      obj.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.toJSON(
        message.passwordlessRegistrationDoneText,
      );
    }
    if (message.externalRegistrationUserOverviewText !== undefined) {
      obj.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.toJSON(
        message.externalRegistrationUserOverviewText,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomLoginTextsRequest>, I>>(base?: I): SetCustomLoginTextsRequest {
    return SetCustomLoginTextsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomLoginTextsRequest>, I>>(object: I): SetCustomLoginTextsRequest {
    const message = createBaseSetCustomLoginTextsRequest();
    message.language = object.language ?? "";
    message.selectAccountText = (object.selectAccountText !== undefined && object.selectAccountText !== null)
      ? SelectAccountScreenText.fromPartial(object.selectAccountText)
      : undefined;
    message.loginText = (object.loginText !== undefined && object.loginText !== null)
      ? LoginScreenText.fromPartial(object.loginText)
      : undefined;
    message.passwordText = (object.passwordText !== undefined && object.passwordText !== null)
      ? PasswordScreenText.fromPartial(object.passwordText)
      : undefined;
    message.usernameChangeText = (object.usernameChangeText !== undefined && object.usernameChangeText !== null)
      ? UsernameChangeScreenText.fromPartial(object.usernameChangeText)
      : undefined;
    message.usernameChangeDoneText =
      (object.usernameChangeDoneText !== undefined && object.usernameChangeDoneText !== null)
        ? UsernameChangeDoneScreenText.fromPartial(object.usernameChangeDoneText)
        : undefined;
    message.initPasswordText = (object.initPasswordText !== undefined && object.initPasswordText !== null)
      ? InitPasswordScreenText.fromPartial(object.initPasswordText)
      : undefined;
    message.initPasswordDoneText = (object.initPasswordDoneText !== undefined && object.initPasswordDoneText !== null)
      ? InitPasswordDoneScreenText.fromPartial(object.initPasswordDoneText)
      : undefined;
    message.emailVerificationText =
      (object.emailVerificationText !== undefined && object.emailVerificationText !== null)
        ? EmailVerificationScreenText.fromPartial(object.emailVerificationText)
        : undefined;
    message.emailVerificationDoneText =
      (object.emailVerificationDoneText !== undefined && object.emailVerificationDoneText !== null)
        ? EmailVerificationDoneScreenText.fromPartial(object.emailVerificationDoneText)
        : undefined;
    message.initializeUserText = (object.initializeUserText !== undefined && object.initializeUserText !== null)
      ? InitializeUserScreenText.fromPartial(object.initializeUserText)
      : undefined;
    message.initializeDoneText = (object.initializeDoneText !== undefined && object.initializeDoneText !== null)
      ? InitializeUserDoneScreenText.fromPartial(object.initializeDoneText)
      : undefined;
    message.initMfaPromptText = (object.initMfaPromptText !== undefined && object.initMfaPromptText !== null)
      ? InitMFAPromptScreenText.fromPartial(object.initMfaPromptText)
      : undefined;
    message.initMfaOtpText = (object.initMfaOtpText !== undefined && object.initMfaOtpText !== null)
      ? InitMFAOTPScreenText.fromPartial(object.initMfaOtpText)
      : undefined;
    message.initMfaU2fText = (object.initMfaU2fText !== undefined && object.initMfaU2fText !== null)
      ? InitMFAU2FScreenText.fromPartial(object.initMfaU2fText)
      : undefined;
    message.initMfaDoneText = (object.initMfaDoneText !== undefined && object.initMfaDoneText !== null)
      ? InitMFADoneScreenText.fromPartial(object.initMfaDoneText)
      : undefined;
    message.mfaProvidersText = (object.mfaProvidersText !== undefined && object.mfaProvidersText !== null)
      ? MFAProvidersText.fromPartial(object.mfaProvidersText)
      : undefined;
    message.verifyMfaOtpText = (object.verifyMfaOtpText !== undefined && object.verifyMfaOtpText !== null)
      ? VerifyMFAOTPScreenText.fromPartial(object.verifyMfaOtpText)
      : undefined;
    message.verifyMfaU2fText = (object.verifyMfaU2fText !== undefined && object.verifyMfaU2fText !== null)
      ? VerifyMFAU2FScreenText.fromPartial(object.verifyMfaU2fText)
      : undefined;
    message.passwordlessText = (object.passwordlessText !== undefined && object.passwordlessText !== null)
      ? PasswordlessScreenText.fromPartial(object.passwordlessText)
      : undefined;
    message.passwordChangeText = (object.passwordChangeText !== undefined && object.passwordChangeText !== null)
      ? PasswordChangeScreenText.fromPartial(object.passwordChangeText)
      : undefined;
    message.passwordChangeDoneText =
      (object.passwordChangeDoneText !== undefined && object.passwordChangeDoneText !== null)
        ? PasswordChangeDoneScreenText.fromPartial(object.passwordChangeDoneText)
        : undefined;
    message.passwordResetDoneText =
      (object.passwordResetDoneText !== undefined && object.passwordResetDoneText !== null)
        ? PasswordResetDoneScreenText.fromPartial(object.passwordResetDoneText)
        : undefined;
    message.registrationOptionText =
      (object.registrationOptionText !== undefined && object.registrationOptionText !== null)
        ? RegistrationOptionScreenText.fromPartial(object.registrationOptionText)
        : undefined;
    message.registrationUserText = (object.registrationUserText !== undefined && object.registrationUserText !== null)
      ? RegistrationUserScreenText.fromPartial(object.registrationUserText)
      : undefined;
    message.registrationOrgText = (object.registrationOrgText !== undefined && object.registrationOrgText !== null)
      ? RegistrationOrgScreenText.fromPartial(object.registrationOrgText)
      : undefined;
    message.linkingUserDoneText = (object.linkingUserDoneText !== undefined && object.linkingUserDoneText !== null)
      ? LinkingUserDoneScreenText.fromPartial(object.linkingUserDoneText)
      : undefined;
    message.externalUserNotFoundText =
      (object.externalUserNotFoundText !== undefined && object.externalUserNotFoundText !== null)
        ? ExternalUserNotFoundScreenText.fromPartial(object.externalUserNotFoundText)
        : undefined;
    message.successLoginText = (object.successLoginText !== undefined && object.successLoginText !== null)
      ? SuccessLoginScreenText.fromPartial(object.successLoginText)
      : undefined;
    message.logoutText = (object.logoutText !== undefined && object.logoutText !== null)
      ? LogoutDoneScreenText.fromPartial(object.logoutText)
      : undefined;
    message.footerText = (object.footerText !== undefined && object.footerText !== null)
      ? FooterText.fromPartial(object.footerText)
      : undefined;
    message.passwordlessPromptText =
      (object.passwordlessPromptText !== undefined && object.passwordlessPromptText !== null)
        ? PasswordlessPromptScreenText.fromPartial(object.passwordlessPromptText)
        : undefined;
    message.passwordlessRegistrationText =
      (object.passwordlessRegistrationText !== undefined && object.passwordlessRegistrationText !== null)
        ? PasswordlessRegistrationScreenText.fromPartial(object.passwordlessRegistrationText)
        : undefined;
    message.passwordlessRegistrationDoneText =
      (object.passwordlessRegistrationDoneText !== undefined && object.passwordlessRegistrationDoneText !== null)
        ? PasswordlessRegistrationDoneScreenText.fromPartial(object.passwordlessRegistrationDoneText)
        : undefined;
    message.externalRegistrationUserOverviewText =
      (object.externalRegistrationUserOverviewText !== undefined &&
          object.externalRegistrationUserOverviewText !== null)
        ? ExternalRegistrationUserOverviewScreenText.fromPartial(object.externalRegistrationUserOverviewText)
        : undefined;
    return message;
  },
};

function createBaseSetCustomLoginTextsResponse(): SetCustomLoginTextsResponse {
  return { details: undefined };
}

export const SetCustomLoginTextsResponse = {
  encode(message: SetCustomLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomLoginTextsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomLoginTextsResponse>, I>>(base?: I): SetCustomLoginTextsResponse {
    return SetCustomLoginTextsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomLoginTextsResponse>, I>>(object: I): SetCustomLoginTextsResponse {
    const message = createBaseSetCustomLoginTextsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomLoginTextsToDefaultRequest(): ResetCustomLoginTextsToDefaultRequest {
  return { language: "" };
}

export const ResetCustomLoginTextsToDefaultRequest = {
  encode(message: ResetCustomLoginTextsToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomLoginTextsToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomLoginTextsToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomLoginTextsToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomLoginTextsToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomLoginTextsToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomLoginTextsToDefaultRequest {
    return ResetCustomLoginTextsToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomLoginTextsToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomLoginTextsToDefaultRequest {
    const message = createBaseResetCustomLoginTextsToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomLoginTextsToDefaultResponse(): ResetCustomLoginTextsToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomLoginTextsToDefaultResponse = {
  encode(message: ResetCustomLoginTextsToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomLoginTextsToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomLoginTextsToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomLoginTextsToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomLoginTextsToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomLoginTextsToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomLoginTextsToDefaultResponse {
    return ResetCustomLoginTextsToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomLoginTextsToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomLoginTextsToDefaultResponse {
    const message = createBaseResetCustomLoginTextsToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddIAMMemberRequest(): AddIAMMemberRequest {
  return { userId: "", roles: [] };
}

export const AddIAMMemberRequest = {
  encode(message: AddIAMMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddIAMMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIAMMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIAMMemberRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: AddIAMMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddIAMMemberRequest>, I>>(base?: I): AddIAMMemberRequest {
    return AddIAMMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddIAMMemberRequest>, I>>(object: I): AddIAMMemberRequest {
    const message = createBaseAddIAMMemberRequest();
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddIAMMemberResponse(): AddIAMMemberResponse {
  return { details: undefined };
}

export const AddIAMMemberResponse = {
  encode(message: AddIAMMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddIAMMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIAMMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIAMMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddIAMMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddIAMMemberResponse>, I>>(base?: I): AddIAMMemberResponse {
    return AddIAMMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddIAMMemberResponse>, I>>(object: I): AddIAMMemberResponse {
    const message = createBaseAddIAMMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateIAMMemberRequest(): UpdateIAMMemberRequest {
  return { userId: "", roles: [] };
}

export const UpdateIAMMemberRequest = {
  encode(message: UpdateIAMMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIAMMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIAMMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIAMMemberRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: UpdateIAMMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIAMMemberRequest>, I>>(base?: I): UpdateIAMMemberRequest {
    return UpdateIAMMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIAMMemberRequest>, I>>(object: I): UpdateIAMMemberRequest {
    const message = createBaseUpdateIAMMemberRequest();
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateIAMMemberResponse(): UpdateIAMMemberResponse {
  return { details: undefined };
}

export const UpdateIAMMemberResponse = {
  encode(message: UpdateIAMMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIAMMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIAMMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIAMMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateIAMMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIAMMemberResponse>, I>>(base?: I): UpdateIAMMemberResponse {
    return UpdateIAMMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIAMMemberResponse>, I>>(object: I): UpdateIAMMemberResponse {
    const message = createBaseUpdateIAMMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveIAMMemberRequest(): RemoveIAMMemberRequest {
  return { userId: "" };
}

export const RemoveIAMMemberRequest = {
  encode(message: RemoveIAMMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIAMMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIAMMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIAMMemberRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: RemoveIAMMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveIAMMemberRequest>, I>>(base?: I): RemoveIAMMemberRequest {
    return RemoveIAMMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveIAMMemberRequest>, I>>(object: I): RemoveIAMMemberRequest {
    const message = createBaseRemoveIAMMemberRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveIAMMemberResponse(): RemoveIAMMemberResponse {
  return { details: undefined };
}

export const RemoveIAMMemberResponse = {
  encode(message: RemoveIAMMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIAMMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIAMMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIAMMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveIAMMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveIAMMemberResponse>, I>>(base?: I): RemoveIAMMemberResponse {
    return RemoveIAMMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveIAMMemberResponse>, I>>(object: I): RemoveIAMMemberResponse {
    const message = createBaseRemoveIAMMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListIAMMemberRolesRequest(): ListIAMMemberRolesRequest {
  return {};
}

export const ListIAMMemberRolesRequest = {
  encode(_: ListIAMMemberRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIAMMemberRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIAMMemberRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListIAMMemberRolesRequest {
    return {};
  },

  toJSON(_: ListIAMMemberRolesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIAMMemberRolesRequest>, I>>(base?: I): ListIAMMemberRolesRequest {
    return ListIAMMemberRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIAMMemberRolesRequest>, I>>(_: I): ListIAMMemberRolesRequest {
    const message = createBaseListIAMMemberRolesRequest();
    return message;
  },
};

function createBaseListIAMMemberRolesResponse(): ListIAMMemberRolesResponse {
  return { details: undefined, roles: [] };
}

export const ListIAMMemberRolesResponse = {
  encode(message: ListIAMMemberRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIAMMemberRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIAMMemberRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIAMMemberRolesResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: ListIAMMemberRolesResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIAMMemberRolesResponse>, I>>(base?: I): ListIAMMemberRolesResponse {
    return ListIAMMemberRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIAMMemberRolesResponse>, I>>(object: I): ListIAMMemberRolesResponse {
    const message = createBaseListIAMMemberRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseListIAMMembersRequest(): ListIAMMembersRequest {
  return { query: undefined, queries: [] };
}

export const ListIAMMembersRequest = {
  encode(message: ListIAMMembersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      SearchQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIAMMembersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIAMMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(SearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIAMMembersRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => SearchQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIAMMembersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIAMMembersRequest>, I>>(base?: I): ListIAMMembersRequest {
    return ListIAMMembersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIAMMembersRequest>, I>>(object: I): ListIAMMembersRequest {
    const message = createBaseListIAMMembersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListIAMMembersResponse(): ListIAMMembersResponse {
  return { details: undefined, result: [] };
}

export const ListIAMMembersResponse = {
  encode(message: ListIAMMembersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Member.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIAMMembersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIAMMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Member.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIAMMembersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Member.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIAMMembersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Member.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIAMMembersResponse>, I>>(base?: I): ListIAMMembersResponse {
    return ListIAMMembersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIAMMembersResponse>, I>>(object: I): ListIAMMembersResponse {
    const message = createBaseListIAMMembersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListViewsRequest(): ListViewsRequest {
  return {};
}

export const ListViewsRequest = {
  encode(_: ListViewsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListViewsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViewsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListViewsRequest {
    return {};
  },

  toJSON(_: ListViewsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListViewsRequest>, I>>(base?: I): ListViewsRequest {
    return ListViewsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListViewsRequest>, I>>(_: I): ListViewsRequest {
    const message = createBaseListViewsRequest();
    return message;
  },
};

function createBaseListViewsResponse(): ListViewsResponse {
  return { result: [] };
}

export const ListViewsResponse = {
  encode(message: ListViewsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      View.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListViewsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViewsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(View.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListViewsResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => View.fromJSON(e)) : [] };
  },

  toJSON(message: ListViewsResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => View.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListViewsResponse>, I>>(base?: I): ListViewsResponse {
    return ListViewsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListViewsResponse>, I>>(object: I): ListViewsResponse {
    const message = createBaseListViewsResponse();
    message.result = object.result?.map((e) => View.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFailedEventsRequest(): ListFailedEventsRequest {
  return {};
}

export const ListFailedEventsRequest = {
  encode(_: ListFailedEventsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFailedEventsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFailedEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListFailedEventsRequest {
    return {};
  },

  toJSON(_: ListFailedEventsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFailedEventsRequest>, I>>(base?: I): ListFailedEventsRequest {
    return ListFailedEventsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFailedEventsRequest>, I>>(_: I): ListFailedEventsRequest {
    const message = createBaseListFailedEventsRequest();
    return message;
  },
};

function createBaseListFailedEventsResponse(): ListFailedEventsResponse {
  return { result: [] };
}

export const ListFailedEventsResponse = {
  encode(message: ListFailedEventsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      FailedEvent.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFailedEventsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFailedEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(FailedEvent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFailedEventsResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => FailedEvent.fromJSON(e)) : [] };
  },

  toJSON(message: ListFailedEventsResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => FailedEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFailedEventsResponse>, I>>(base?: I): ListFailedEventsResponse {
    return ListFailedEventsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFailedEventsResponse>, I>>(object: I): ListFailedEventsResponse {
    const message = createBaseListFailedEventsResponse();
    message.result = object.result?.map((e) => FailedEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveFailedEventRequest(): RemoveFailedEventRequest {
  return { database: "", viewName: "", failedSequence: 0 };
}

export const RemoveFailedEventRequest = {
  encode(message: RemoveFailedEventRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.viewName !== "") {
      writer.uint32(18).string(message.viewName);
    }
    if (message.failedSequence !== 0) {
      writer.uint32(24).uint64(message.failedSequence);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFailedEventRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFailedEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.viewName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.failedSequence = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFailedEventRequest {
    return {
      database: isSet(object.database) ? String(object.database) : "",
      viewName: isSet(object.viewName) ? String(object.viewName) : "",
      failedSequence: isSet(object.failedSequence) ? Number(object.failedSequence) : 0,
    };
  },

  toJSON(message: RemoveFailedEventRequest): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.viewName !== "") {
      obj.viewName = message.viewName;
    }
    if (message.failedSequence !== 0) {
      obj.failedSequence = Math.round(message.failedSequence);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFailedEventRequest>, I>>(base?: I): RemoveFailedEventRequest {
    return RemoveFailedEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFailedEventRequest>, I>>(object: I): RemoveFailedEventRequest {
    const message = createBaseRemoveFailedEventRequest();
    message.database = object.database ?? "";
    message.viewName = object.viewName ?? "";
    message.failedSequence = object.failedSequence ?? 0;
    return message;
  },
};

function createBaseRemoveFailedEventResponse(): RemoveFailedEventResponse {
  return {};
}

export const RemoveFailedEventResponse = {
  encode(_: RemoveFailedEventResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFailedEventResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFailedEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveFailedEventResponse {
    return {};
  },

  toJSON(_: RemoveFailedEventResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFailedEventResponse>, I>>(base?: I): RemoveFailedEventResponse {
    return RemoveFailedEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFailedEventResponse>, I>>(_: I): RemoveFailedEventResponse {
    const message = createBaseRemoveFailedEventResponse();
    return message;
  },
};

function createBaseView(): View {
  return {
    database: "",
    viewName: "",
    processedSequence: 0,
    eventTimestamp: undefined,
    lastSuccessfulSpoolerRun: undefined,
  };
}

export const View = {
  encode(message: View, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.viewName !== "") {
      writer.uint32(18).string(message.viewName);
    }
    if (message.processedSequence !== 0) {
      writer.uint32(24).uint64(message.processedSequence);
    }
    if (message.eventTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTimestamp), writer.uint32(34).fork()).ldelim();
    }
    if (message.lastSuccessfulSpoolerRun !== undefined) {
      Timestamp.encode(toTimestamp(message.lastSuccessfulSpoolerRun), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): View {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.viewName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.processedSequence = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.eventTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastSuccessfulSpoolerRun = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): View {
    return {
      database: isSet(object.database) ? String(object.database) : "",
      viewName: isSet(object.viewName) ? String(object.viewName) : "",
      processedSequence: isSet(object.processedSequence) ? Number(object.processedSequence) : 0,
      eventTimestamp: isSet(object.eventTimestamp) ? fromJsonTimestamp(object.eventTimestamp) : undefined,
      lastSuccessfulSpoolerRun: isSet(object.lastSuccessfulSpoolerRun)
        ? fromJsonTimestamp(object.lastSuccessfulSpoolerRun)
        : undefined,
    };
  },

  toJSON(message: View): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.viewName !== "") {
      obj.viewName = message.viewName;
    }
    if (message.processedSequence !== 0) {
      obj.processedSequence = Math.round(message.processedSequence);
    }
    if (message.eventTimestamp !== undefined) {
      obj.eventTimestamp = message.eventTimestamp.toISOString();
    }
    if (message.lastSuccessfulSpoolerRun !== undefined) {
      obj.lastSuccessfulSpoolerRun = message.lastSuccessfulSpoolerRun.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<View>, I>>(base?: I): View {
    return View.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<View>, I>>(object: I): View {
    const message = createBaseView();
    message.database = object.database ?? "";
    message.viewName = object.viewName ?? "";
    message.processedSequence = object.processedSequence ?? 0;
    message.eventTimestamp = object.eventTimestamp ?? undefined;
    message.lastSuccessfulSpoolerRun = object.lastSuccessfulSpoolerRun ?? undefined;
    return message;
  },
};

function createBaseFailedEvent(): FailedEvent {
  return { database: "", viewName: "", failedSequence: 0, failureCount: 0, errorMessage: "", lastFailed: undefined };
}

export const FailedEvent = {
  encode(message: FailedEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.viewName !== "") {
      writer.uint32(18).string(message.viewName);
    }
    if (message.failedSequence !== 0) {
      writer.uint32(24).uint64(message.failedSequence);
    }
    if (message.failureCount !== 0) {
      writer.uint32(32).uint64(message.failureCount);
    }
    if (message.errorMessage !== "") {
      writer.uint32(42).string(message.errorMessage);
    }
    if (message.lastFailed !== undefined) {
      Timestamp.encode(toTimestamp(message.lastFailed), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FailedEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFailedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.viewName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.failedSequence = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.failureCount = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lastFailed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FailedEvent {
    return {
      database: isSet(object.database) ? String(object.database) : "",
      viewName: isSet(object.viewName) ? String(object.viewName) : "",
      failedSequence: isSet(object.failedSequence) ? Number(object.failedSequence) : 0,
      failureCount: isSet(object.failureCount) ? Number(object.failureCount) : 0,
      errorMessage: isSet(object.errorMessage) ? String(object.errorMessage) : "",
      lastFailed: isSet(object.lastFailed) ? fromJsonTimestamp(object.lastFailed) : undefined,
    };
  },

  toJSON(message: FailedEvent): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.viewName !== "") {
      obj.viewName = message.viewName;
    }
    if (message.failedSequence !== 0) {
      obj.failedSequence = Math.round(message.failedSequence);
    }
    if (message.failureCount !== 0) {
      obj.failureCount = Math.round(message.failureCount);
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.lastFailed !== undefined) {
      obj.lastFailed = message.lastFailed.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FailedEvent>, I>>(base?: I): FailedEvent {
    return FailedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FailedEvent>, I>>(object: I): FailedEvent {
    const message = createBaseFailedEvent();
    message.database = object.database ?? "";
    message.viewName = object.viewName ?? "";
    message.failedSequence = object.failedSequence ?? 0;
    message.failureCount = object.failureCount ?? 0;
    message.errorMessage = object.errorMessage ?? "";
    message.lastFailed = object.lastFailed ?? undefined;
    return message;
  },
};

function createBaseImportDataRequest(): ImportDataRequest {
  return {
    dataOrgs: undefined,
    dataOrgsv1: undefined,
    dataOrgsLocal: undefined,
    dataOrgsv1Local: undefined,
    dataOrgsS3: undefined,
    dataOrgsv1S3: undefined,
    dataOrgsGcs: undefined,
    dataOrgsv1Gcs: undefined,
    timeout: "",
  };
}

export const ImportDataRequest = {
  encode(message: ImportDataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.dataOrgs !== undefined) {
      ImportDataOrg.encode(message.dataOrgs, writer.uint32(10).fork()).ldelim();
    }
    if (message.dataOrgsv1 !== undefined) {
      ImportDataOrg1.encode(message.dataOrgsv1, writer.uint32(18).fork()).ldelim();
    }
    if (message.dataOrgsLocal !== undefined) {
      ImportDataRequest_LocalInput.encode(message.dataOrgsLocal, writer.uint32(26).fork()).ldelim();
    }
    if (message.dataOrgsv1Local !== undefined) {
      ImportDataRequest_LocalInput.encode(message.dataOrgsv1Local, writer.uint32(34).fork()).ldelim();
    }
    if (message.dataOrgsS3 !== undefined) {
      ImportDataRequest_S3Input.encode(message.dataOrgsS3, writer.uint32(42).fork()).ldelim();
    }
    if (message.dataOrgsv1S3 !== undefined) {
      ImportDataRequest_S3Input.encode(message.dataOrgsv1S3, writer.uint32(50).fork()).ldelim();
    }
    if (message.dataOrgsGcs !== undefined) {
      ImportDataRequest_GCSInput.encode(message.dataOrgsGcs, writer.uint32(58).fork()).ldelim();
    }
    if (message.dataOrgsv1Gcs !== undefined) {
      ImportDataRequest_GCSInput.encode(message.dataOrgsv1Gcs, writer.uint32(66).fork()).ldelim();
    }
    if (message.timeout !== "") {
      writer.uint32(74).string(message.timeout);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataOrgs = ImportDataOrg.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataOrgsv1 = ImportDataOrg1.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataOrgsLocal = ImportDataRequest_LocalInput.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataOrgsv1Local = ImportDataRequest_LocalInput.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dataOrgsS3 = ImportDataRequest_S3Input.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dataOrgsv1S3 = ImportDataRequest_S3Input.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.dataOrgsGcs = ImportDataRequest_GCSInput.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.dataOrgsv1Gcs = ImportDataRequest_GCSInput.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.timeout = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest {
    return {
      dataOrgs: isSet(object.dataOrgs) ? ImportDataOrg.fromJSON(object.dataOrgs) : undefined,
      dataOrgsv1: isSet(object.dataOrgsv1) ? ImportDataOrg1.fromJSON(object.dataOrgsv1) : undefined,
      dataOrgsLocal: isSet(object.dataOrgsLocal)
        ? ImportDataRequest_LocalInput.fromJSON(object.dataOrgsLocal)
        : undefined,
      dataOrgsv1Local: isSet(object.dataOrgsv1Local)
        ? ImportDataRequest_LocalInput.fromJSON(object.dataOrgsv1Local)
        : undefined,
      dataOrgsS3: isSet(object.dataOrgsS3) ? ImportDataRequest_S3Input.fromJSON(object.dataOrgsS3) : undefined,
      dataOrgsv1S3: isSet(object.dataOrgsv1S3) ? ImportDataRequest_S3Input.fromJSON(object.dataOrgsv1S3) : undefined,
      dataOrgsGcs: isSet(object.dataOrgsGcs) ? ImportDataRequest_GCSInput.fromJSON(object.dataOrgsGcs) : undefined,
      dataOrgsv1Gcs: isSet(object.dataOrgsv1Gcs)
        ? ImportDataRequest_GCSInput.fromJSON(object.dataOrgsv1Gcs)
        : undefined,
      timeout: isSet(object.timeout) ? String(object.timeout) : "",
    };
  },

  toJSON(message: ImportDataRequest): unknown {
    const obj: any = {};
    if (message.dataOrgs !== undefined) {
      obj.dataOrgs = ImportDataOrg.toJSON(message.dataOrgs);
    }
    if (message.dataOrgsv1 !== undefined) {
      obj.dataOrgsv1 = ImportDataOrg1.toJSON(message.dataOrgsv1);
    }
    if (message.dataOrgsLocal !== undefined) {
      obj.dataOrgsLocal = ImportDataRequest_LocalInput.toJSON(message.dataOrgsLocal);
    }
    if (message.dataOrgsv1Local !== undefined) {
      obj.dataOrgsv1Local = ImportDataRequest_LocalInput.toJSON(message.dataOrgsv1Local);
    }
    if (message.dataOrgsS3 !== undefined) {
      obj.dataOrgsS3 = ImportDataRequest_S3Input.toJSON(message.dataOrgsS3);
    }
    if (message.dataOrgsv1S3 !== undefined) {
      obj.dataOrgsv1S3 = ImportDataRequest_S3Input.toJSON(message.dataOrgsv1S3);
    }
    if (message.dataOrgsGcs !== undefined) {
      obj.dataOrgsGcs = ImportDataRequest_GCSInput.toJSON(message.dataOrgsGcs);
    }
    if (message.dataOrgsv1Gcs !== undefined) {
      obj.dataOrgsv1Gcs = ImportDataRequest_GCSInput.toJSON(message.dataOrgsv1Gcs);
    }
    if (message.timeout !== "") {
      obj.timeout = message.timeout;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataRequest>, I>>(base?: I): ImportDataRequest {
    return ImportDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataRequest>, I>>(object: I): ImportDataRequest {
    const message = createBaseImportDataRequest();
    message.dataOrgs = (object.dataOrgs !== undefined && object.dataOrgs !== null)
      ? ImportDataOrg.fromPartial(object.dataOrgs)
      : undefined;
    message.dataOrgsv1 = (object.dataOrgsv1 !== undefined && object.dataOrgsv1 !== null)
      ? ImportDataOrg1.fromPartial(object.dataOrgsv1)
      : undefined;
    message.dataOrgsLocal = (object.dataOrgsLocal !== undefined && object.dataOrgsLocal !== null)
      ? ImportDataRequest_LocalInput.fromPartial(object.dataOrgsLocal)
      : undefined;
    message.dataOrgsv1Local = (object.dataOrgsv1Local !== undefined && object.dataOrgsv1Local !== null)
      ? ImportDataRequest_LocalInput.fromPartial(object.dataOrgsv1Local)
      : undefined;
    message.dataOrgsS3 = (object.dataOrgsS3 !== undefined && object.dataOrgsS3 !== null)
      ? ImportDataRequest_S3Input.fromPartial(object.dataOrgsS3)
      : undefined;
    message.dataOrgsv1S3 = (object.dataOrgsv1S3 !== undefined && object.dataOrgsv1S3 !== null)
      ? ImportDataRequest_S3Input.fromPartial(object.dataOrgsv1S3)
      : undefined;
    message.dataOrgsGcs = (object.dataOrgsGcs !== undefined && object.dataOrgsGcs !== null)
      ? ImportDataRequest_GCSInput.fromPartial(object.dataOrgsGcs)
      : undefined;
    message.dataOrgsv1Gcs = (object.dataOrgsv1Gcs !== undefined && object.dataOrgsv1Gcs !== null)
      ? ImportDataRequest_GCSInput.fromPartial(object.dataOrgsv1Gcs)
      : undefined;
    message.timeout = object.timeout ?? "";
    return message;
  },
};

function createBaseImportDataRequest_LocalInput(): ImportDataRequest_LocalInput {
  return { path: "" };
}

export const ImportDataRequest_LocalInput = {
  encode(message: ImportDataRequest_LocalInput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataRequest_LocalInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest_LocalInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest_LocalInput {
    return { path: isSet(object.path) ? String(object.path) : "" };
  },

  toJSON(message: ImportDataRequest_LocalInput): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataRequest_LocalInput>, I>>(base?: I): ImportDataRequest_LocalInput {
    return ImportDataRequest_LocalInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataRequest_LocalInput>, I>>(object: I): ImportDataRequest_LocalInput {
    const message = createBaseImportDataRequest_LocalInput();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseImportDataRequest_S3Input(): ImportDataRequest_S3Input {
  return { path: "", endpoint: "", accessKeyId: "", secretAccessKey: "", ssl: false, bucket: "" };
}

export const ImportDataRequest_S3Input = {
  encode(message: ImportDataRequest_S3Input, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.endpoint !== "") {
      writer.uint32(18).string(message.endpoint);
    }
    if (message.accessKeyId !== "") {
      writer.uint32(26).string(message.accessKeyId);
    }
    if (message.secretAccessKey !== "") {
      writer.uint32(34).string(message.secretAccessKey);
    }
    if (message.ssl === true) {
      writer.uint32(40).bool(message.ssl);
    }
    if (message.bucket !== "") {
      writer.uint32(50).string(message.bucket);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataRequest_S3Input {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest_S3Input();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accessKeyId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.secretAccessKey = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ssl = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bucket = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest_S3Input {
    return {
      path: isSet(object.path) ? String(object.path) : "",
      endpoint: isSet(object.endpoint) ? String(object.endpoint) : "",
      accessKeyId: isSet(object.accessKeyId) ? String(object.accessKeyId) : "",
      secretAccessKey: isSet(object.secretAccessKey) ? String(object.secretAccessKey) : "",
      ssl: isSet(object.ssl) ? Boolean(object.ssl) : false,
      bucket: isSet(object.bucket) ? String(object.bucket) : "",
    };
  },

  toJSON(message: ImportDataRequest_S3Input): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.accessKeyId !== "") {
      obj.accessKeyId = message.accessKeyId;
    }
    if (message.secretAccessKey !== "") {
      obj.secretAccessKey = message.secretAccessKey;
    }
    if (message.ssl === true) {
      obj.ssl = message.ssl;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataRequest_S3Input>, I>>(base?: I): ImportDataRequest_S3Input {
    return ImportDataRequest_S3Input.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataRequest_S3Input>, I>>(object: I): ImportDataRequest_S3Input {
    const message = createBaseImportDataRequest_S3Input();
    message.path = object.path ?? "";
    message.endpoint = object.endpoint ?? "";
    message.accessKeyId = object.accessKeyId ?? "";
    message.secretAccessKey = object.secretAccessKey ?? "";
    message.ssl = object.ssl ?? false;
    message.bucket = object.bucket ?? "";
    return message;
  },
};

function createBaseImportDataRequest_GCSInput(): ImportDataRequest_GCSInput {
  return { bucket: "", serviceaccountJson: "", path: "" };
}

export const ImportDataRequest_GCSInput = {
  encode(message: ImportDataRequest_GCSInput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.serviceaccountJson !== "") {
      writer.uint32(18).string(message.serviceaccountJson);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataRequest_GCSInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest_GCSInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceaccountJson = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest_GCSInput {
    return {
      bucket: isSet(object.bucket) ? String(object.bucket) : "",
      serviceaccountJson: isSet(object.serviceaccountJson) ? String(object.serviceaccountJson) : "",
      path: isSet(object.path) ? String(object.path) : "",
    };
  },

  toJSON(message: ImportDataRequest_GCSInput): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.serviceaccountJson !== "") {
      obj.serviceaccountJson = message.serviceaccountJson;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataRequest_GCSInput>, I>>(base?: I): ImportDataRequest_GCSInput {
    return ImportDataRequest_GCSInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataRequest_GCSInput>, I>>(object: I): ImportDataRequest_GCSInput {
    const message = createBaseImportDataRequest_GCSInput();
    message.bucket = object.bucket ?? "";
    message.serviceaccountJson = object.serviceaccountJson ?? "";
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseImportDataOrg(): ImportDataOrg {
  return { orgs: [] };
}

export const ImportDataOrg = {
  encode(message: ImportDataOrg, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.orgs) {
      DataOrg.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataOrg {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataOrg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgs.push(DataOrg.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataOrg {
    return { orgs: Array.isArray(object?.orgs) ? object.orgs.map((e: any) => DataOrg.fromJSON(e)) : [] };
  },

  toJSON(message: ImportDataOrg): unknown {
    const obj: any = {};
    if (message.orgs?.length) {
      obj.orgs = message.orgs.map((e) => DataOrg.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataOrg>, I>>(base?: I): ImportDataOrg {
    return ImportDataOrg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataOrg>, I>>(object: I): ImportDataOrg {
    const message = createBaseImportDataOrg();
    message.orgs = object.orgs?.map((e) => DataOrg.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDataOrg(): DataOrg {
  return {
    orgId: "",
    org: undefined,
    domainPolicy: undefined,
    labelPolicy: undefined,
    lockoutPolicy: undefined,
    loginPolicy: undefined,
    passwordComplexityPolicy: undefined,
    privacyPolicy: undefined,
    projects: [],
    projectRoles: [],
    apiApps: [],
    oidcApps: [],
    humanUsers: [],
    machineUsers: [],
    triggerActions: [],
    actions: [],
    projectGrants: [],
    userGrants: [],
    orgMembers: [],
    projectMembers: [],
    projectGrantMembers: [],
    userMetadata: [],
    loginTexts: [],
    initMessages: [],
    passwordResetMessages: [],
    verifyEmailMessages: [],
    verifyPhoneMessages: [],
    domainClaimedMessages: [],
    passwordlessRegistrationMessages: [],
    oidcIdps: [],
    jwtIdps: [],
    userLinks: [],
    domains: [],
    appKeys: [],
    machineKeys: [],
  };
}

export const DataOrg = {
  encode(message: DataOrg, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.org !== undefined) {
      AddOrgRequest.encode(message.org, writer.uint32(26).fork()).ldelim();
    }
    if (message.domainPolicy !== undefined) {
      AddCustomDomainPolicyRequest.encode(message.domainPolicy, writer.uint32(34).fork()).ldelim();
    }
    if (message.labelPolicy !== undefined) {
      AddCustomLabelPolicyRequest.encode(message.labelPolicy, writer.uint32(42).fork()).ldelim();
    }
    if (message.lockoutPolicy !== undefined) {
      AddCustomLockoutPolicyRequest.encode(message.lockoutPolicy, writer.uint32(50).fork()).ldelim();
    }
    if (message.loginPolicy !== undefined) {
      AddCustomLoginPolicyRequest.encode(message.loginPolicy, writer.uint32(58).fork()).ldelim();
    }
    if (message.passwordComplexityPolicy !== undefined) {
      AddCustomPasswordComplexityPolicyRequest.encode(message.passwordComplexityPolicy, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.privacyPolicy !== undefined) {
      AddCustomPrivacyPolicyRequest.encode(message.privacyPolicy, writer.uint32(74).fork()).ldelim();
    }
    for (const v of message.projects) {
      DataProject.encode(v!, writer.uint32(82).fork()).ldelim();
    }
    for (const v of message.projectRoles) {
      AddProjectRoleRequest.encode(v!, writer.uint32(90).fork()).ldelim();
    }
    for (const v of message.apiApps) {
      DataAPIApplication.encode(v!, writer.uint32(98).fork()).ldelim();
    }
    for (const v of message.oidcApps) {
      DataOIDCApplication.encode(v!, writer.uint32(106).fork()).ldelim();
    }
    for (const v of message.humanUsers) {
      DataHumanUser.encode(v!, writer.uint32(114).fork()).ldelim();
    }
    for (const v of message.machineUsers) {
      DataMachineUser.encode(v!, writer.uint32(122).fork()).ldelim();
    }
    for (const v of message.triggerActions) {
      SetTriggerActionsRequest.encode(v!, writer.uint32(130).fork()).ldelim();
    }
    for (const v of message.actions) {
      DataAction.encode(v!, writer.uint32(138).fork()).ldelim();
    }
    for (const v of message.projectGrants) {
      DataProjectGrant.encode(v!, writer.uint32(146).fork()).ldelim();
    }
    for (const v of message.userGrants) {
      AddUserGrantRequest.encode(v!, writer.uint32(154).fork()).ldelim();
    }
    for (const v of message.orgMembers) {
      AddOrgMemberRequest.encode(v!, writer.uint32(162).fork()).ldelim();
    }
    for (const v of message.projectMembers) {
      AddProjectMemberRequest.encode(v!, writer.uint32(170).fork()).ldelim();
    }
    for (const v of message.projectGrantMembers) {
      AddProjectGrantMemberRequest.encode(v!, writer.uint32(178).fork()).ldelim();
    }
    for (const v of message.userMetadata) {
      SetUserMetadataRequest.encode(v!, writer.uint32(186).fork()).ldelim();
    }
    for (const v of message.loginTexts) {
      SetCustomLoginTextsRequest2.encode(v!, writer.uint32(194).fork()).ldelim();
    }
    for (const v of message.initMessages) {
      SetCustomInitMessageTextRequest.encode(v!, writer.uint32(202).fork()).ldelim();
    }
    for (const v of message.passwordResetMessages) {
      SetCustomPasswordResetMessageTextRequest.encode(v!, writer.uint32(210).fork()).ldelim();
    }
    for (const v of message.verifyEmailMessages) {
      SetCustomVerifyEmailMessageTextRequest.encode(v!, writer.uint32(218).fork()).ldelim();
    }
    for (const v of message.verifyPhoneMessages) {
      SetCustomVerifyPhoneMessageTextRequest.encode(v!, writer.uint32(226).fork()).ldelim();
    }
    for (const v of message.domainClaimedMessages) {
      SetCustomDomainClaimedMessageTextRequest.encode(v!, writer.uint32(234).fork()).ldelim();
    }
    for (const v of message.passwordlessRegistrationMessages) {
      SetCustomPasswordlessRegistrationMessageTextRequest.encode(v!, writer.uint32(242).fork()).ldelim();
    }
    for (const v of message.oidcIdps) {
      DataOIDCIDP.encode(v!, writer.uint32(250).fork()).ldelim();
    }
    for (const v of message.jwtIdps) {
      DataJWTIDP.encode(v!, writer.uint32(258).fork()).ldelim();
    }
    for (const v of message.userLinks) {
      IDPUserLink.encode(v!, writer.uint32(266).fork()).ldelim();
    }
    for (const v of message.domains) {
      Domain3.encode(v!, writer.uint32(274).fork()).ldelim();
    }
    for (const v of message.appKeys) {
      DataAppKey.encode(v!, writer.uint32(282).fork()).ldelim();
    }
    for (const v of message.machineKeys) {
      DataMachineKey.encode(v!, writer.uint32(290).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DataOrg {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataOrg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.org = AddOrgRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.domainPolicy = AddCustomDomainPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.labelPolicy = AddCustomLabelPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lockoutPolicy = AddCustomLockoutPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.loginPolicy = AddCustomLoginPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.passwordComplexityPolicy = AddCustomPasswordComplexityPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.privacyPolicy = AddCustomPrivacyPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.projects.push(DataProject.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.projectRoles.push(AddProjectRoleRequest.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.apiApps.push(DataAPIApplication.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.oidcApps.push(DataOIDCApplication.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.humanUsers.push(DataHumanUser.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.machineUsers.push(DataMachineUser.decode(reader, reader.uint32()));
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.triggerActions.push(SetTriggerActionsRequest.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.actions.push(DataAction.decode(reader, reader.uint32()));
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.projectGrants.push(DataProjectGrant.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.userGrants.push(AddUserGrantRequest.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.orgMembers.push(AddOrgMemberRequest.decode(reader, reader.uint32()));
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.projectMembers.push(AddProjectMemberRequest.decode(reader, reader.uint32()));
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.projectGrantMembers.push(AddProjectGrantMemberRequest.decode(reader, reader.uint32()));
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.userMetadata.push(SetUserMetadataRequest.decode(reader, reader.uint32()));
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.loginTexts.push(SetCustomLoginTextsRequest2.decode(reader, reader.uint32()));
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.initMessages.push(SetCustomInitMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.passwordResetMessages.push(SetCustomPasswordResetMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.verifyEmailMessages.push(SetCustomVerifyEmailMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.verifyPhoneMessages.push(SetCustomVerifyPhoneMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.domainClaimedMessages.push(SetCustomDomainClaimedMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.passwordlessRegistrationMessages.push(
            SetCustomPasswordlessRegistrationMessageTextRequest.decode(reader, reader.uint32()),
          );
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.oidcIdps.push(DataOIDCIDP.decode(reader, reader.uint32()));
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.jwtIdps.push(DataJWTIDP.decode(reader, reader.uint32()));
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.userLinks.push(IDPUserLink.decode(reader, reader.uint32()));
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.domains.push(Domain3.decode(reader, reader.uint32()));
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.appKeys.push(DataAppKey.decode(reader, reader.uint32()));
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.machineKeys.push(DataMachineKey.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataOrg {
    return {
      orgId: isSet(object.orgId) ? String(object.orgId) : "",
      org: isSet(object.org) ? AddOrgRequest.fromJSON(object.org) : undefined,
      domainPolicy: isSet(object.domainPolicy) ? AddCustomDomainPolicyRequest.fromJSON(object.domainPolicy) : undefined,
      labelPolicy: isSet(object.labelPolicy) ? AddCustomLabelPolicyRequest.fromJSON(object.labelPolicy) : undefined,
      lockoutPolicy: isSet(object.lockoutPolicy)
        ? AddCustomLockoutPolicyRequest.fromJSON(object.lockoutPolicy)
        : undefined,
      loginPolicy: isSet(object.loginPolicy) ? AddCustomLoginPolicyRequest.fromJSON(object.loginPolicy) : undefined,
      passwordComplexityPolicy: isSet(object.passwordComplexityPolicy)
        ? AddCustomPasswordComplexityPolicyRequest.fromJSON(object.passwordComplexityPolicy)
        : undefined,
      privacyPolicy: isSet(object.privacyPolicy)
        ? AddCustomPrivacyPolicyRequest.fromJSON(object.privacyPolicy)
        : undefined,
      projects: Array.isArray(object?.projects) ? object.projects.map((e: any) => DataProject.fromJSON(e)) : [],
      projectRoles: Array.isArray(object?.projectRoles)
        ? object.projectRoles.map((e: any) => AddProjectRoleRequest.fromJSON(e))
        : [],
      apiApps: Array.isArray(object?.apiApps) ? object.apiApps.map((e: any) => DataAPIApplication.fromJSON(e)) : [],
      oidcApps: Array.isArray(object?.oidcApps) ? object.oidcApps.map((e: any) => DataOIDCApplication.fromJSON(e)) : [],
      humanUsers: Array.isArray(object?.humanUsers) ? object.humanUsers.map((e: any) => DataHumanUser.fromJSON(e)) : [],
      machineUsers: Array.isArray(object?.machineUsers)
        ? object.machineUsers.map((e: any) => DataMachineUser.fromJSON(e))
        : [],
      triggerActions: Array.isArray(object?.triggerActions)
        ? object.triggerActions.map((e: any) => SetTriggerActionsRequest.fromJSON(e))
        : [],
      actions: Array.isArray(object?.actions) ? object.actions.map((e: any) => DataAction.fromJSON(e)) : [],
      projectGrants: Array.isArray(object?.projectGrants)
        ? object.projectGrants.map((e: any) => DataProjectGrant.fromJSON(e))
        : [],
      userGrants: Array.isArray(object?.userGrants)
        ? object.userGrants.map((e: any) => AddUserGrantRequest.fromJSON(e))
        : [],
      orgMembers: Array.isArray(object?.orgMembers)
        ? object.orgMembers.map((e: any) => AddOrgMemberRequest.fromJSON(e))
        : [],
      projectMembers: Array.isArray(object?.projectMembers)
        ? object.projectMembers.map((e: any) => AddProjectMemberRequest.fromJSON(e))
        : [],
      projectGrantMembers: Array.isArray(object?.projectGrantMembers)
        ? object.projectGrantMembers.map((e: any) => AddProjectGrantMemberRequest.fromJSON(e))
        : [],
      userMetadata: Array.isArray(object?.userMetadata)
        ? object.userMetadata.map((e: any) => SetUserMetadataRequest.fromJSON(e))
        : [],
      loginTexts: Array.isArray(object?.loginTexts)
        ? object.loginTexts.map((e: any) => SetCustomLoginTextsRequest.fromJSON(e))
        : [],
      initMessages: Array.isArray(object?.initMessages)
        ? object.initMessages.map((e: any) => SetCustomInitMessageTextRequest.fromJSON(e))
        : [],
      passwordResetMessages: Array.isArray(object?.passwordResetMessages)
        ? object.passwordResetMessages.map((e: any) => SetCustomPasswordResetMessageTextRequest.fromJSON(e))
        : [],
      verifyEmailMessages: Array.isArray(object?.verifyEmailMessages)
        ? object.verifyEmailMessages.map((e: any) => SetCustomVerifyEmailMessageTextRequest.fromJSON(e))
        : [],
      verifyPhoneMessages: Array.isArray(object?.verifyPhoneMessages)
        ? object.verifyPhoneMessages.map((e: any) => SetCustomVerifyPhoneMessageTextRequest.fromJSON(e))
        : [],
      domainClaimedMessages: Array.isArray(object?.domainClaimedMessages)
        ? object.domainClaimedMessages.map((e: any) => SetCustomDomainClaimedMessageTextRequest.fromJSON(e))
        : [],
      passwordlessRegistrationMessages: Array.isArray(object?.passwordlessRegistrationMessages)
        ? object.passwordlessRegistrationMessages.map((e: any) =>
          SetCustomPasswordlessRegistrationMessageTextRequest.fromJSON(e)
        )
        : [],
      oidcIdps: Array.isArray(object?.oidcIdps)
        ? object.oidcIdps.map((e: any) => DataOIDCIDP.fromJSON(e))
        : [],
      jwtIdps: Array.isArray(object?.jwtIdps)
        ? object.jwtIdps.map((e: any) => DataJWTIDP.fromJSON(e))
        : [],
      userLinks: Array.isArray(object?.userLinks) ? object.userLinks.map((e: any) => IDPUserLink.fromJSON(e)) : [],
      domains: Array.isArray(object?.domains) ? object.domains.map((e: any) => Domain.fromJSON(e)) : [],
      appKeys: Array.isArray(object?.appKeys) ? object.appKeys.map((e: any) => DataAppKey.fromJSON(e)) : [],
      machineKeys: Array.isArray(object?.machineKeys)
        ? object.machineKeys.map((e: any) => DataMachineKey.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DataOrg): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.org !== undefined) {
      obj.org = AddOrgRequest.toJSON(message.org);
    }
    if (message.domainPolicy !== undefined) {
      obj.domainPolicy = AddCustomDomainPolicyRequest.toJSON(message.domainPolicy);
    }
    if (message.labelPolicy !== undefined) {
      obj.labelPolicy = AddCustomLabelPolicyRequest.toJSON(message.labelPolicy);
    }
    if (message.lockoutPolicy !== undefined) {
      obj.lockoutPolicy = AddCustomLockoutPolicyRequest.toJSON(message.lockoutPolicy);
    }
    if (message.loginPolicy !== undefined) {
      obj.loginPolicy = AddCustomLoginPolicyRequest.toJSON(message.loginPolicy);
    }
    if (message.passwordComplexityPolicy !== undefined) {
      obj.passwordComplexityPolicy = AddCustomPasswordComplexityPolicyRequest.toJSON(message.passwordComplexityPolicy);
    }
    if (message.privacyPolicy !== undefined) {
      obj.privacyPolicy = AddCustomPrivacyPolicyRequest.toJSON(message.privacyPolicy);
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => DataProject.toJSON(e));
    }
    if (message.projectRoles?.length) {
      obj.projectRoles = message.projectRoles.map((e) => AddProjectRoleRequest.toJSON(e));
    }
    if (message.apiApps?.length) {
      obj.apiApps = message.apiApps.map((e) => DataAPIApplication.toJSON(e));
    }
    if (message.oidcApps?.length) {
      obj.oidcApps = message.oidcApps.map((e) => DataOIDCApplication.toJSON(e));
    }
    if (message.humanUsers?.length) {
      obj.humanUsers = message.humanUsers.map((e) => DataHumanUser.toJSON(e));
    }
    if (message.machineUsers?.length) {
      obj.machineUsers = message.machineUsers.map((e) => DataMachineUser.toJSON(e));
    }
    if (message.triggerActions?.length) {
      obj.triggerActions = message.triggerActions.map((e) => SetTriggerActionsRequest.toJSON(e));
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => DataAction.toJSON(e));
    }
    if (message.projectGrants?.length) {
      obj.projectGrants = message.projectGrants.map((e) => DataProjectGrant.toJSON(e));
    }
    if (message.userGrants?.length) {
      obj.userGrants = message.userGrants.map((e) => AddUserGrantRequest.toJSON(e));
    }
    if (message.orgMembers?.length) {
      obj.orgMembers = message.orgMembers.map((e) => AddOrgMemberRequest.toJSON(e));
    }
    if (message.projectMembers?.length) {
      obj.projectMembers = message.projectMembers.map((e) => AddProjectMemberRequest.toJSON(e));
    }
    if (message.projectGrantMembers?.length) {
      obj.projectGrantMembers = message.projectGrantMembers.map((e) => AddProjectGrantMemberRequest.toJSON(e));
    }
    if (message.userMetadata?.length) {
      obj.userMetadata = message.userMetadata.map((e) => SetUserMetadataRequest.toJSON(e));
    }
    if (message.loginTexts?.length) {
      obj.loginTexts = message.loginTexts.map((e) => SetCustomLoginTextsRequest.toJSON(e));
    }
    if (message.initMessages?.length) {
      obj.initMessages = message.initMessages.map((e) => SetCustomInitMessageTextRequest.toJSON(e));
    }
    if (message.passwordResetMessages?.length) {
      obj.passwordResetMessages = message.passwordResetMessages.map((e) =>
        SetCustomPasswordResetMessageTextRequest.toJSON(e)
      );
    }
    if (message.verifyEmailMessages?.length) {
      obj.verifyEmailMessages = message.verifyEmailMessages.map((e) =>
        SetCustomVerifyEmailMessageTextRequest.toJSON(e)
      );
    }
    if (message.verifyPhoneMessages?.length) {
      obj.verifyPhoneMessages = message.verifyPhoneMessages.map((e) =>
        SetCustomVerifyPhoneMessageTextRequest.toJSON(e)
      );
    }
    if (message.domainClaimedMessages?.length) {
      obj.domainClaimedMessages = message.domainClaimedMessages.map((e) =>
        SetCustomDomainClaimedMessageTextRequest.toJSON(e)
      );
    }
    if (message.passwordlessRegistrationMessages?.length) {
      obj.passwordlessRegistrationMessages = message.passwordlessRegistrationMessages.map((e) =>
        SetCustomPasswordlessRegistrationMessageTextRequest.toJSON(e)
      );
    }
    if (message.oidcIdps?.length) {
      obj.oidcIdps = message.oidcIdps.map((e) => DataOIDCIDP.toJSON(e));
    }
    if (message.jwtIdps?.length) {
      obj.jwtIdps = message.jwtIdps.map((e) => DataJWTIDP.toJSON(e));
    }
    if (message.userLinks?.length) {
      obj.userLinks = message.userLinks.map((e) => IDPUserLink.toJSON(e));
    }
    if (message.domains?.length) {
      obj.domains = message.domains.map((e) => Domain.toJSON(e));
    }
    if (message.appKeys?.length) {
      obj.appKeys = message.appKeys.map((e) => DataAppKey.toJSON(e));
    }
    if (message.machineKeys?.length) {
      obj.machineKeys = message.machineKeys.map((e) => DataMachineKey.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataOrg>, I>>(base?: I): DataOrg {
    return DataOrg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataOrg>, I>>(object: I): DataOrg {
    const message = createBaseDataOrg();
    message.orgId = object.orgId ?? "";
    message.org = (object.org !== undefined && object.org !== null) ? AddOrgRequest.fromPartial(object.org) : undefined;
    message.domainPolicy = (object.domainPolicy !== undefined && object.domainPolicy !== null)
      ? AddCustomDomainPolicyRequest.fromPartial(object.domainPolicy)
      : undefined;
    message.labelPolicy = (object.labelPolicy !== undefined && object.labelPolicy !== null)
      ? AddCustomLabelPolicyRequest.fromPartial(object.labelPolicy)
      : undefined;
    message.lockoutPolicy = (object.lockoutPolicy !== undefined && object.lockoutPolicy !== null)
      ? AddCustomLockoutPolicyRequest.fromPartial(object.lockoutPolicy)
      : undefined;
    message.loginPolicy = (object.loginPolicy !== undefined && object.loginPolicy !== null)
      ? AddCustomLoginPolicyRequest.fromPartial(object.loginPolicy)
      : undefined;
    message.passwordComplexityPolicy =
      (object.passwordComplexityPolicy !== undefined && object.passwordComplexityPolicy !== null)
        ? AddCustomPasswordComplexityPolicyRequest.fromPartial(object.passwordComplexityPolicy)
        : undefined;
    message.privacyPolicy = (object.privacyPolicy !== undefined && object.privacyPolicy !== null)
      ? AddCustomPrivacyPolicyRequest.fromPartial(object.privacyPolicy)
      : undefined;
    message.projects = object.projects?.map((e) => DataProject.fromPartial(e)) || [];
    message.projectRoles = object.projectRoles?.map((e) => AddProjectRoleRequest.fromPartial(e)) || [];
    message.apiApps = object.apiApps?.map((e) => DataAPIApplication.fromPartial(e)) || [];
    message.oidcApps = object.oidcApps?.map((e) => DataOIDCApplication.fromPartial(e)) || [];
    message.humanUsers = object.humanUsers?.map((e) => DataHumanUser.fromPartial(e)) || [];
    message.machineUsers = object.machineUsers?.map((e) => DataMachineUser.fromPartial(e)) || [];
    message.triggerActions = object.triggerActions?.map((e) => SetTriggerActionsRequest.fromPartial(e)) || [];
    message.actions = object.actions?.map((e) => DataAction.fromPartial(e)) || [];
    message.projectGrants = object.projectGrants?.map((e) => DataProjectGrant.fromPartial(e)) || [];
    message.userGrants = object.userGrants?.map((e) => AddUserGrantRequest.fromPartial(e)) || [];
    message.orgMembers = object.orgMembers?.map((e) => AddOrgMemberRequest.fromPartial(e)) || [];
    message.projectMembers = object.projectMembers?.map((e) => AddProjectMemberRequest.fromPartial(e)) || [];
    message.projectGrantMembers = object.projectGrantMembers?.map((e) => AddProjectGrantMemberRequest.fromPartial(e)) ||
      [];
    message.userMetadata = object.userMetadata?.map((e) => SetUserMetadataRequest.fromPartial(e)) || [];
    message.loginTexts = object.loginTexts?.map((e) => SetCustomLoginTextsRequest2.fromPartial(e)) || [];
    message.initMessages = object.initMessages?.map((e) => SetCustomInitMessageTextRequest.fromPartial(e)) || [];
    message.passwordResetMessages =
      object.passwordResetMessages?.map((e) => SetCustomPasswordResetMessageTextRequest.fromPartial(e)) || [];
    message.verifyEmailMessages =
      object.verifyEmailMessages?.map((e) => SetCustomVerifyEmailMessageTextRequest.fromPartial(e)) || [];
    message.verifyPhoneMessages =
      object.verifyPhoneMessages?.map((e) => SetCustomVerifyPhoneMessageTextRequest.fromPartial(e)) || [];
    message.domainClaimedMessages =
      object.domainClaimedMessages?.map((e) => SetCustomDomainClaimedMessageTextRequest.fromPartial(e)) || [];
    message.passwordlessRegistrationMessages =
      object.passwordlessRegistrationMessages?.map((e) =>
        SetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(e)
      ) || [];
    message.oidcIdps = object.oidcIdps?.map((e) => DataOIDCIDP.fromPartial(e)) || [];
    message.jwtIdps = object.jwtIdps?.map((e) => DataJWTIDP.fromPartial(e)) || [];
    message.userLinks = object.userLinks?.map((e) => IDPUserLink.fromPartial(e)) || [];
    message.domains = object.domains?.map((e) => Domain3.fromPartial(e)) || [];
    message.appKeys = object.appKeys?.map((e) => DataAppKey.fromPartial(e)) || [];
    message.machineKeys = object.machineKeys?.map((e) => DataMachineKey.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportDataResponse(): ImportDataResponse {
  return { errors: [], success: undefined };
}

export const ImportDataResponse = {
  encode(message: ImportDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.errors) {
      ImportDataError.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.success !== undefined) {
      ImportDataSuccess.encode(message.success, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errors.push(ImportDataError.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.success = ImportDataSuccess.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataResponse {
    return {
      errors: Array.isArray(object?.errors) ? object.errors.map((e: any) => ImportDataError.fromJSON(e)) : [],
      success: isSet(object.success) ? ImportDataSuccess.fromJSON(object.success) : undefined,
    };
  },

  toJSON(message: ImportDataResponse): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ImportDataError.toJSON(e));
    }
    if (message.success !== undefined) {
      obj.success = ImportDataSuccess.toJSON(message.success);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataResponse>, I>>(base?: I): ImportDataResponse {
    return ImportDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataResponse>, I>>(object: I): ImportDataResponse {
    const message = createBaseImportDataResponse();
    message.errors = object.errors?.map((e) => ImportDataError.fromPartial(e)) || [];
    message.success = (object.success !== undefined && object.success !== null)
      ? ImportDataSuccess.fromPartial(object.success)
      : undefined;
    return message;
  },
};

function createBaseImportDataError(): ImportDataError {
  return { type: "", id: "", message: "" };
}

export const ImportDataError = {
  encode(message: ImportDataError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataError {
    return {
      type: isSet(object.type) ? String(object.type) : "",
      id: isSet(object.id) ? String(object.id) : "",
      message: isSet(object.message) ? String(object.message) : "",
    };
  },

  toJSON(message: ImportDataError): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataError>, I>>(base?: I): ImportDataError {
    return ImportDataError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataError>, I>>(object: I): ImportDataError {
    const message = createBaseImportDataError();
    message.type = object.type ?? "";
    message.id = object.id ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseImportDataSuccess(): ImportDataSuccess {
  return { orgs: [] };
}

export const ImportDataSuccess = {
  encode(message: ImportDataSuccess, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.orgs) {
      ImportDataSuccessOrg.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataSuccess {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgs.push(ImportDataSuccessOrg.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccess {
    return { orgs: Array.isArray(object?.orgs) ? object.orgs.map((e: any) => ImportDataSuccessOrg.fromJSON(e)) : [] };
  },

  toJSON(message: ImportDataSuccess): unknown {
    const obj: any = {};
    if (message.orgs?.length) {
      obj.orgs = message.orgs.map((e) => ImportDataSuccessOrg.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataSuccess>, I>>(base?: I): ImportDataSuccess {
    return ImportDataSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataSuccess>, I>>(object: I): ImportDataSuccess {
    const message = createBaseImportDataSuccess();
    message.orgs = object.orgs?.map((e) => ImportDataSuccessOrg.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportDataSuccessOrg(): ImportDataSuccessOrg {
  return {
    orgId: "",
    projectIds: [],
    projectRoles: [],
    oidcAppIds: [],
    apiAppIds: [],
    humanUserIds: [],
    machineUserIds: [],
    actionIds: [],
    triggerActions: [],
    projectGrants: [],
    userGrants: [],
    orgMembers: [],
    projectMembers: [],
    projectGrantMembers: [],
    oidcIpds: [],
    jwtIdps: [],
    idpLinks: [],
    userLinks: [],
    userMetadata: [],
    domains: [],
    appKeys: [],
    machineKeys: [],
  };
}

export const ImportDataSuccessOrg = {
  encode(message: ImportDataSuccessOrg, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    for (const v of message.projectIds) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.projectRoles) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.oidcAppIds) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.apiAppIds) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.humanUserIds) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.machineUserIds) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.actionIds) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.triggerActions) {
      SetTriggerActionsRequest.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    for (const v of message.projectGrants) {
      ImportDataSuccessProjectGrant.encode(v!, writer.uint32(82).fork()).ldelim();
    }
    for (const v of message.userGrants) {
      ImportDataSuccessUserGrant.encode(v!, writer.uint32(90).fork()).ldelim();
    }
    for (const v of message.orgMembers) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.projectMembers) {
      ImportDataSuccessProjectMember.encode(v!, writer.uint32(106).fork()).ldelim();
    }
    for (const v of message.projectGrantMembers) {
      ImportDataSuccessProjectGrantMember.encode(v!, writer.uint32(114).fork()).ldelim();
    }
    for (const v of message.oidcIpds) {
      writer.uint32(122).string(v!);
    }
    for (const v of message.jwtIdps) {
      writer.uint32(130).string(v!);
    }
    for (const v of message.idpLinks) {
      writer.uint32(138).string(v!);
    }
    for (const v of message.userLinks) {
      ImportDataSuccessUserLinks.encode(v!, writer.uint32(146).fork()).ldelim();
    }
    for (const v of message.userMetadata) {
      ImportDataSuccessUserMetadata.encode(v!, writer.uint32(154).fork()).ldelim();
    }
    for (const v of message.domains) {
      writer.uint32(162).string(v!);
    }
    for (const v of message.appKeys) {
      writer.uint32(170).string(v!);
    }
    for (const v of message.machineKeys) {
      writer.uint32(178).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataSuccessOrg {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessOrg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectRoles.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.oidcAppIds.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.apiAppIds.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.humanUserIds.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.machineUserIds.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.actionIds.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.triggerActions.push(SetTriggerActionsRequest.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.projectGrants.push(ImportDataSuccessProjectGrant.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.userGrants.push(ImportDataSuccessUserGrant.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.orgMembers.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.projectMembers.push(ImportDataSuccessProjectMember.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.projectGrantMembers.push(ImportDataSuccessProjectGrantMember.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.oidcIpds.push(reader.string());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.jwtIdps.push(reader.string());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.idpLinks.push(reader.string());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.userLinks.push(ImportDataSuccessUserLinks.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.userMetadata.push(ImportDataSuccessUserMetadata.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.domains.push(reader.string());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.appKeys.push(reader.string());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.machineKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessOrg {
    return {
      orgId: isSet(object.orgId) ? String(object.orgId) : "",
      projectIds: Array.isArray(object?.projectIds) ? object.projectIds.map((e: any) => String(e)) : [],
      projectRoles: Array.isArray(object?.projectRoles) ? object.projectRoles.map((e: any) => String(e)) : [],
      oidcAppIds: Array.isArray(object?.oidcAppIds) ? object.oidcAppIds.map((e: any) => String(e)) : [],
      apiAppIds: Array.isArray(object?.apiAppIds) ? object.apiAppIds.map((e: any) => String(e)) : [],
      humanUserIds: Array.isArray(object?.humanUserIds) ? object.humanUserIds.map((e: any) => String(e)) : [],
      machineUserIds: Array.isArray(object?.machineUserIds) ? object.machineUserIds.map((e: any) => String(e)) : [],
      actionIds: Array.isArray(object?.actionIds) ? object.actionIds.map((e: any) => String(e)) : [],
      triggerActions: Array.isArray(object?.triggerActions)
        ? object.triggerActions.map((e: any) => SetTriggerActionsRequest.fromJSON(e))
        : [],
      projectGrants: Array.isArray(object?.projectGrants)
        ? object.projectGrants.map((e: any) => ImportDataSuccessProjectGrant.fromJSON(e))
        : [],
      userGrants: Array.isArray(object?.userGrants)
        ? object.userGrants.map((e: any) => ImportDataSuccessUserGrant.fromJSON(e))
        : [],
      orgMembers: Array.isArray(object?.orgMembers) ? object.orgMembers.map((e: any) => String(e)) : [],
      projectMembers: Array.isArray(object?.projectMembers)
        ? object.projectMembers.map((e: any) => ImportDataSuccessProjectMember.fromJSON(e))
        : [],
      projectGrantMembers: Array.isArray(object?.projectGrantMembers)
        ? object.projectGrantMembers.map((e: any) => ImportDataSuccessProjectGrantMember.fromJSON(e))
        : [],
      oidcIpds: Array.isArray(object?.oidcIpds) ? object.oidcIpds.map((e: any) => String(e)) : [],
      jwtIdps: Array.isArray(object?.jwtIdps) ? object.jwtIdps.map((e: any) => String(e)) : [],
      idpLinks: Array.isArray(object?.idpLinks) ? object.idpLinks.map((e: any) => String(e)) : [],
      userLinks: Array.isArray(object?.userLinks)
        ? object.userLinks.map((e: any) => ImportDataSuccessUserLinks.fromJSON(e))
        : [],
      userMetadata: Array.isArray(object?.userMetadata)
        ? object.userMetadata.map((e: any) => ImportDataSuccessUserMetadata.fromJSON(e))
        : [],
      domains: Array.isArray(object?.domains) ? object.domains.map((e: any) => String(e)) : [],
      appKeys: Array.isArray(object?.appKeys) ? object.appKeys.map((e: any) => String(e)) : [],
      machineKeys: Array.isArray(object?.machineKeys) ? object.machineKeys.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: ImportDataSuccessOrg): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.projectIds?.length) {
      obj.projectIds = message.projectIds;
    }
    if (message.projectRoles?.length) {
      obj.projectRoles = message.projectRoles;
    }
    if (message.oidcAppIds?.length) {
      obj.oidcAppIds = message.oidcAppIds;
    }
    if (message.apiAppIds?.length) {
      obj.apiAppIds = message.apiAppIds;
    }
    if (message.humanUserIds?.length) {
      obj.humanUserIds = message.humanUserIds;
    }
    if (message.machineUserIds?.length) {
      obj.machineUserIds = message.machineUserIds;
    }
    if (message.actionIds?.length) {
      obj.actionIds = message.actionIds;
    }
    if (message.triggerActions?.length) {
      obj.triggerActions = message.triggerActions.map((e) => SetTriggerActionsRequest.toJSON(e));
    }
    if (message.projectGrants?.length) {
      obj.projectGrants = message.projectGrants.map((e) => ImportDataSuccessProjectGrant.toJSON(e));
    }
    if (message.userGrants?.length) {
      obj.userGrants = message.userGrants.map((e) => ImportDataSuccessUserGrant.toJSON(e));
    }
    if (message.orgMembers?.length) {
      obj.orgMembers = message.orgMembers;
    }
    if (message.projectMembers?.length) {
      obj.projectMembers = message.projectMembers.map((e) => ImportDataSuccessProjectMember.toJSON(e));
    }
    if (message.projectGrantMembers?.length) {
      obj.projectGrantMembers = message.projectGrantMembers.map((e) => ImportDataSuccessProjectGrantMember.toJSON(e));
    }
    if (message.oidcIpds?.length) {
      obj.oidcIpds = message.oidcIpds;
    }
    if (message.jwtIdps?.length) {
      obj.jwtIdps = message.jwtIdps;
    }
    if (message.idpLinks?.length) {
      obj.idpLinks = message.idpLinks;
    }
    if (message.userLinks?.length) {
      obj.userLinks = message.userLinks.map((e) => ImportDataSuccessUserLinks.toJSON(e));
    }
    if (message.userMetadata?.length) {
      obj.userMetadata = message.userMetadata.map((e) => ImportDataSuccessUserMetadata.toJSON(e));
    }
    if (message.domains?.length) {
      obj.domains = message.domains;
    }
    if (message.appKeys?.length) {
      obj.appKeys = message.appKeys;
    }
    if (message.machineKeys?.length) {
      obj.machineKeys = message.machineKeys;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataSuccessOrg>, I>>(base?: I): ImportDataSuccessOrg {
    return ImportDataSuccessOrg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataSuccessOrg>, I>>(object: I): ImportDataSuccessOrg {
    const message = createBaseImportDataSuccessOrg();
    message.orgId = object.orgId ?? "";
    message.projectIds = object.projectIds?.map((e) => e) || [];
    message.projectRoles = object.projectRoles?.map((e) => e) || [];
    message.oidcAppIds = object.oidcAppIds?.map((e) => e) || [];
    message.apiAppIds = object.apiAppIds?.map((e) => e) || [];
    message.humanUserIds = object.humanUserIds?.map((e) => e) || [];
    message.machineUserIds = object.machineUserIds?.map((e) => e) || [];
    message.actionIds = object.actionIds?.map((e) => e) || [];
    message.triggerActions = object.triggerActions?.map((e) => SetTriggerActionsRequest.fromPartial(e)) || [];
    message.projectGrants = object.projectGrants?.map((e) => ImportDataSuccessProjectGrant.fromPartial(e)) || [];
    message.userGrants = object.userGrants?.map((e) => ImportDataSuccessUserGrant.fromPartial(e)) || [];
    message.orgMembers = object.orgMembers?.map((e) => e) || [];
    message.projectMembers = object.projectMembers?.map((e) => ImportDataSuccessProjectMember.fromPartial(e)) || [];
    message.projectGrantMembers =
      object.projectGrantMembers?.map((e) => ImportDataSuccessProjectGrantMember.fromPartial(e)) || [];
    message.oidcIpds = object.oidcIpds?.map((e) => e) || [];
    message.jwtIdps = object.jwtIdps?.map((e) => e) || [];
    message.idpLinks = object.idpLinks?.map((e) => e) || [];
    message.userLinks = object.userLinks?.map((e) => ImportDataSuccessUserLinks.fromPartial(e)) || [];
    message.userMetadata = object.userMetadata?.map((e) => ImportDataSuccessUserMetadata.fromPartial(e)) || [];
    message.domains = object.domains?.map((e) => e) || [];
    message.appKeys = object.appKeys?.map((e) => e) || [];
    message.machineKeys = object.machineKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseImportDataSuccessProjectGrant(): ImportDataSuccessProjectGrant {
  return { grantId: "", projectId: "", orgId: "" };
}

export const ImportDataSuccessProjectGrant = {
  encode(message: ImportDataSuccessProjectGrant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.grantId !== "") {
      writer.uint32(10).string(message.grantId);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.orgId !== "") {
      writer.uint32(26).string(message.orgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataSuccessProjectGrant {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessProjectGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessProjectGrant {
    return {
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      orgId: isSet(object.orgId) ? String(object.orgId) : "",
    };
  },

  toJSON(message: ImportDataSuccessProjectGrant): unknown {
    const obj: any = {};
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataSuccessProjectGrant>, I>>(base?: I): ImportDataSuccessProjectGrant {
    return ImportDataSuccessProjectGrant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataSuccessProjectGrant>, I>>(
    object: I,
  ): ImportDataSuccessProjectGrant {
    const message = createBaseImportDataSuccessProjectGrant();
    message.grantId = object.grantId ?? "";
    message.projectId = object.projectId ?? "";
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessUserGrant(): ImportDataSuccessUserGrant {
  return { projectId: "", userId: "" };
}

export const ImportDataSuccessUserGrant = {
  encode(message: ImportDataSuccessUserGrant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataSuccessUserGrant {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessUserGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessUserGrant {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
    };
  },

  toJSON(message: ImportDataSuccessUserGrant): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataSuccessUserGrant>, I>>(base?: I): ImportDataSuccessUserGrant {
    return ImportDataSuccessUserGrant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataSuccessUserGrant>, I>>(object: I): ImportDataSuccessUserGrant {
    const message = createBaseImportDataSuccessUserGrant();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessProjectMember(): ImportDataSuccessProjectMember {
  return { projectId: "", userId: "" };
}

export const ImportDataSuccessProjectMember = {
  encode(message: ImportDataSuccessProjectMember, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataSuccessProjectMember {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessProjectMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessProjectMember {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
    };
  },

  toJSON(message: ImportDataSuccessProjectMember): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataSuccessProjectMember>, I>>(base?: I): ImportDataSuccessProjectMember {
    return ImportDataSuccessProjectMember.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataSuccessProjectMember>, I>>(
    object: I,
  ): ImportDataSuccessProjectMember {
    const message = createBaseImportDataSuccessProjectMember();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessProjectGrantMember(): ImportDataSuccessProjectGrantMember {
  return { projectId: "", grantId: "", userId: "" };
}

export const ImportDataSuccessProjectGrantMember = {
  encode(message: ImportDataSuccessProjectGrantMember, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataSuccessProjectGrantMember {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessProjectGrantMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessProjectGrantMember {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
    };
  },

  toJSON(message: ImportDataSuccessProjectGrantMember): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataSuccessProjectGrantMember>, I>>(
    base?: I,
  ): ImportDataSuccessProjectGrantMember {
    return ImportDataSuccessProjectGrantMember.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataSuccessProjectGrantMember>, I>>(
    object: I,
  ): ImportDataSuccessProjectGrantMember {
    const message = createBaseImportDataSuccessProjectGrantMember();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessUserLinks(): ImportDataSuccessUserLinks {
  return { userId: "", externalUserId: "", displayName: "", idpId: "" };
}

export const ImportDataSuccessUserLinks = {
  encode(message: ImportDataSuccessUserLinks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.externalUserId !== "") {
      writer.uint32(18).string(message.externalUserId);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.idpId !== "") {
      writer.uint32(34).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataSuccessUserLinks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessUserLinks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.externalUserId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessUserLinks {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      externalUserId: isSet(object.externalUserId) ? String(object.externalUserId) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
    };
  },

  toJSON(message: ImportDataSuccessUserLinks): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.externalUserId !== "") {
      obj.externalUserId = message.externalUserId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataSuccessUserLinks>, I>>(base?: I): ImportDataSuccessUserLinks {
    return ImportDataSuccessUserLinks.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataSuccessUserLinks>, I>>(object: I): ImportDataSuccessUserLinks {
    const message = createBaseImportDataSuccessUserLinks();
    message.userId = object.userId ?? "";
    message.externalUserId = object.externalUserId ?? "";
    message.displayName = object.displayName ?? "";
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessUserMetadata(): ImportDataSuccessUserMetadata {
  return { userId: "", key: "" };
}

export const ImportDataSuccessUserMetadata = {
  encode(message: ImportDataSuccessUserMetadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportDataSuccessUserMetadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessUserMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessUserMetadata {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      key: isSet(object.key) ? String(object.key) : "",
    };
  },

  toJSON(message: ImportDataSuccessUserMetadata): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportDataSuccessUserMetadata>, I>>(base?: I): ImportDataSuccessUserMetadata {
    return ImportDataSuccessUserMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportDataSuccessUserMetadata>, I>>(
    object: I,
  ): ImportDataSuccessUserMetadata {
    const message = createBaseImportDataSuccessUserMetadata();
    message.userId = object.userId ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseExportDataRequest(): ExportDataRequest {
  return {
    orgIds: [],
    excludedOrgIds: [],
    withPasswords: false,
    withOtp: false,
    responseOutput: false,
    localOutput: undefined,
    s3Output: undefined,
    gcsOutput: undefined,
    timeout: "",
  };
}

export const ExportDataRequest = {
  encode(message: ExportDataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.orgIds) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.excludedOrgIds) {
      writer.uint32(18).string(v!);
    }
    if (message.withPasswords === true) {
      writer.uint32(24).bool(message.withPasswords);
    }
    if (message.withOtp === true) {
      writer.uint32(32).bool(message.withOtp);
    }
    if (message.responseOutput === true) {
      writer.uint32(40).bool(message.responseOutput);
    }
    if (message.localOutput !== undefined) {
      ExportDataRequest_LocalOutput.encode(message.localOutput, writer.uint32(50).fork()).ldelim();
    }
    if (message.s3Output !== undefined) {
      ExportDataRequest_S3Output.encode(message.s3Output, writer.uint32(58).fork()).ldelim();
    }
    if (message.gcsOutput !== undefined) {
      ExportDataRequest_GCSOutput.encode(message.gcsOutput, writer.uint32(66).fork()).ldelim();
    }
    if (message.timeout !== "") {
      writer.uint32(74).string(message.timeout);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExportDataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgIds.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.excludedOrgIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.withPasswords = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.withOtp = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.responseOutput = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.localOutput = ExportDataRequest_LocalOutput.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.s3Output = ExportDataRequest_S3Output.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.gcsOutput = ExportDataRequest_GCSOutput.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.timeout = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest {
    return {
      orgIds: Array.isArray(object?.orgIds) ? object.orgIds.map((e: any) => String(e)) : [],
      excludedOrgIds: Array.isArray(object?.excludedOrgIds) ? object.excludedOrgIds.map((e: any) => String(e)) : [],
      withPasswords: isSet(object.withPasswords) ? Boolean(object.withPasswords) : false,
      withOtp: isSet(object.withOtp) ? Boolean(object.withOtp) : false,
      responseOutput: isSet(object.responseOutput) ? Boolean(object.responseOutput) : false,
      localOutput: isSet(object.localOutput) ? ExportDataRequest_LocalOutput.fromJSON(object.localOutput) : undefined,
      s3Output: isSet(object.s3Output) ? ExportDataRequest_S3Output.fromJSON(object.s3Output) : undefined,
      gcsOutput: isSet(object.gcsOutput) ? ExportDataRequest_GCSOutput.fromJSON(object.gcsOutput) : undefined,
      timeout: isSet(object.timeout) ? String(object.timeout) : "",
    };
  },

  toJSON(message: ExportDataRequest): unknown {
    const obj: any = {};
    if (message.orgIds?.length) {
      obj.orgIds = message.orgIds;
    }
    if (message.excludedOrgIds?.length) {
      obj.excludedOrgIds = message.excludedOrgIds;
    }
    if (message.withPasswords === true) {
      obj.withPasswords = message.withPasswords;
    }
    if (message.withOtp === true) {
      obj.withOtp = message.withOtp;
    }
    if (message.responseOutput === true) {
      obj.responseOutput = message.responseOutput;
    }
    if (message.localOutput !== undefined) {
      obj.localOutput = ExportDataRequest_LocalOutput.toJSON(message.localOutput);
    }
    if (message.s3Output !== undefined) {
      obj.s3Output = ExportDataRequest_S3Output.toJSON(message.s3Output);
    }
    if (message.gcsOutput !== undefined) {
      obj.gcsOutput = ExportDataRequest_GCSOutput.toJSON(message.gcsOutput);
    }
    if (message.timeout !== "") {
      obj.timeout = message.timeout;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportDataRequest>, I>>(base?: I): ExportDataRequest {
    return ExportDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportDataRequest>, I>>(object: I): ExportDataRequest {
    const message = createBaseExportDataRequest();
    message.orgIds = object.orgIds?.map((e) => e) || [];
    message.excludedOrgIds = object.excludedOrgIds?.map((e) => e) || [];
    message.withPasswords = object.withPasswords ?? false;
    message.withOtp = object.withOtp ?? false;
    message.responseOutput = object.responseOutput ?? false;
    message.localOutput = (object.localOutput !== undefined && object.localOutput !== null)
      ? ExportDataRequest_LocalOutput.fromPartial(object.localOutput)
      : undefined;
    message.s3Output = (object.s3Output !== undefined && object.s3Output !== null)
      ? ExportDataRequest_S3Output.fromPartial(object.s3Output)
      : undefined;
    message.gcsOutput = (object.gcsOutput !== undefined && object.gcsOutput !== null)
      ? ExportDataRequest_GCSOutput.fromPartial(object.gcsOutput)
      : undefined;
    message.timeout = object.timeout ?? "";
    return message;
  },
};

function createBaseExportDataRequest_LocalOutput(): ExportDataRequest_LocalOutput {
  return { path: "" };
}

export const ExportDataRequest_LocalOutput = {
  encode(message: ExportDataRequest_LocalOutput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExportDataRequest_LocalOutput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest_LocalOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest_LocalOutput {
    return { path: isSet(object.path) ? String(object.path) : "" };
  },

  toJSON(message: ExportDataRequest_LocalOutput): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportDataRequest_LocalOutput>, I>>(base?: I): ExportDataRequest_LocalOutput {
    return ExportDataRequest_LocalOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportDataRequest_LocalOutput>, I>>(
    object: I,
  ): ExportDataRequest_LocalOutput {
    const message = createBaseExportDataRequest_LocalOutput();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseExportDataRequest_S3Output(): ExportDataRequest_S3Output {
  return { path: "", endpoint: "", accessKeyId: "", secretAccessKey: "", ssl: false, bucket: "" };
}

export const ExportDataRequest_S3Output = {
  encode(message: ExportDataRequest_S3Output, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.endpoint !== "") {
      writer.uint32(18).string(message.endpoint);
    }
    if (message.accessKeyId !== "") {
      writer.uint32(26).string(message.accessKeyId);
    }
    if (message.secretAccessKey !== "") {
      writer.uint32(34).string(message.secretAccessKey);
    }
    if (message.ssl === true) {
      writer.uint32(40).bool(message.ssl);
    }
    if (message.bucket !== "") {
      writer.uint32(50).string(message.bucket);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExportDataRequest_S3Output {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest_S3Output();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accessKeyId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.secretAccessKey = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ssl = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bucket = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest_S3Output {
    return {
      path: isSet(object.path) ? String(object.path) : "",
      endpoint: isSet(object.endpoint) ? String(object.endpoint) : "",
      accessKeyId: isSet(object.accessKeyId) ? String(object.accessKeyId) : "",
      secretAccessKey: isSet(object.secretAccessKey) ? String(object.secretAccessKey) : "",
      ssl: isSet(object.ssl) ? Boolean(object.ssl) : false,
      bucket: isSet(object.bucket) ? String(object.bucket) : "",
    };
  },

  toJSON(message: ExportDataRequest_S3Output): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.accessKeyId !== "") {
      obj.accessKeyId = message.accessKeyId;
    }
    if (message.secretAccessKey !== "") {
      obj.secretAccessKey = message.secretAccessKey;
    }
    if (message.ssl === true) {
      obj.ssl = message.ssl;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportDataRequest_S3Output>, I>>(base?: I): ExportDataRequest_S3Output {
    return ExportDataRequest_S3Output.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportDataRequest_S3Output>, I>>(object: I): ExportDataRequest_S3Output {
    const message = createBaseExportDataRequest_S3Output();
    message.path = object.path ?? "";
    message.endpoint = object.endpoint ?? "";
    message.accessKeyId = object.accessKeyId ?? "";
    message.secretAccessKey = object.secretAccessKey ?? "";
    message.ssl = object.ssl ?? false;
    message.bucket = object.bucket ?? "";
    return message;
  },
};

function createBaseExportDataRequest_GCSOutput(): ExportDataRequest_GCSOutput {
  return { bucket: "", serviceaccountJson: "", path: "" };
}

export const ExportDataRequest_GCSOutput = {
  encode(message: ExportDataRequest_GCSOutput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.serviceaccountJson !== "") {
      writer.uint32(18).string(message.serviceaccountJson);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExportDataRequest_GCSOutput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest_GCSOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceaccountJson = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest_GCSOutput {
    return {
      bucket: isSet(object.bucket) ? String(object.bucket) : "",
      serviceaccountJson: isSet(object.serviceaccountJson) ? String(object.serviceaccountJson) : "",
      path: isSet(object.path) ? String(object.path) : "",
    };
  },

  toJSON(message: ExportDataRequest_GCSOutput): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.serviceaccountJson !== "") {
      obj.serviceaccountJson = message.serviceaccountJson;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportDataRequest_GCSOutput>, I>>(base?: I): ExportDataRequest_GCSOutput {
    return ExportDataRequest_GCSOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportDataRequest_GCSOutput>, I>>(object: I): ExportDataRequest_GCSOutput {
    const message = createBaseExportDataRequest_GCSOutput();
    message.bucket = object.bucket ?? "";
    message.serviceaccountJson = object.serviceaccountJson ?? "";
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseExportDataResponse(): ExportDataResponse {
  return { orgs: [] };
}

export const ExportDataResponse = {
  encode(message: ExportDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.orgs) {
      DataOrg.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExportDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgs.push(DataOrg.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataResponse {
    return { orgs: Array.isArray(object?.orgs) ? object.orgs.map((e: any) => DataOrg.fromJSON(e)) : [] };
  },

  toJSON(message: ExportDataResponse): unknown {
    const obj: any = {};
    if (message.orgs?.length) {
      obj.orgs = message.orgs.map((e) => DataOrg.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportDataResponse>, I>>(base?: I): ExportDataResponse {
    return ExportDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportDataResponse>, I>>(object: I): ExportDataResponse {
    const message = createBaseExportDataResponse();
    message.orgs = object.orgs?.map((e) => DataOrg.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListEventsRequest(): ListEventsRequest {
  return {
    sequence: 0,
    limit: 0,
    asc: false,
    editorUserId: "",
    eventTypes: [],
    aggregateId: "",
    aggregateTypes: [],
    resourceOwner: "",
    creationDate: undefined,
  };
}

export const ListEventsRequest = {
  encode(message: ListEventsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sequence !== 0) {
      writer.uint32(8).uint64(message.sequence);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    if (message.asc === true) {
      writer.uint32(24).bool(message.asc);
    }
    if (message.editorUserId !== "") {
      writer.uint32(34).string(message.editorUserId);
    }
    for (const v of message.eventTypes) {
      writer.uint32(42).string(v!);
    }
    if (message.aggregateId !== "") {
      writer.uint32(50).string(message.aggregateId);
    }
    for (const v of message.aggregateTypes) {
      writer.uint32(58).string(v!);
    }
    if (message.resourceOwner !== "") {
      writer.uint32(66).string(message.resourceOwner);
    }
    if (message.creationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.creationDate), writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListEventsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sequence = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.asc = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.editorUserId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.eventTypes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.aggregateTypes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.resourceOwner = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.creationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventsRequest {
    return {
      sequence: isSet(object.sequence) ? Number(object.sequence) : 0,
      limit: isSet(object.limit) ? Number(object.limit) : 0,
      asc: isSet(object.asc) ? Boolean(object.asc) : false,
      editorUserId: isSet(object.editorUserId) ? String(object.editorUserId) : "",
      eventTypes: Array.isArray(object?.eventTypes) ? object.eventTypes.map((e: any) => String(e)) : [],
      aggregateId: isSet(object.aggregateId) ? String(object.aggregateId) : "",
      aggregateTypes: Array.isArray(object?.aggregateTypes) ? object.aggregateTypes.map((e: any) => String(e)) : [],
      resourceOwner: isSet(object.resourceOwner) ? String(object.resourceOwner) : "",
      creationDate: isSet(object.creationDate) ? fromJsonTimestamp(object.creationDate) : undefined,
    };
  },

  toJSON(message: ListEventsRequest): unknown {
    const obj: any = {};
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.asc === true) {
      obj.asc = message.asc;
    }
    if (message.editorUserId !== "") {
      obj.editorUserId = message.editorUserId;
    }
    if (message.eventTypes?.length) {
      obj.eventTypes = message.eventTypes;
    }
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    if (message.aggregateTypes?.length) {
      obj.aggregateTypes = message.aggregateTypes;
    }
    if (message.resourceOwner !== "") {
      obj.resourceOwner = message.resourceOwner;
    }
    if (message.creationDate !== undefined) {
      obj.creationDate = message.creationDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListEventsRequest>, I>>(base?: I): ListEventsRequest {
    return ListEventsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListEventsRequest>, I>>(object: I): ListEventsRequest {
    const message = createBaseListEventsRequest();
    message.sequence = object.sequence ?? 0;
    message.limit = object.limit ?? 0;
    message.asc = object.asc ?? false;
    message.editorUserId = object.editorUserId ?? "";
    message.eventTypes = object.eventTypes?.map((e) => e) || [];
    message.aggregateId = object.aggregateId ?? "";
    message.aggregateTypes = object.aggregateTypes?.map((e) => e) || [];
    message.resourceOwner = object.resourceOwner ?? "";
    message.creationDate = object.creationDate ?? undefined;
    return message;
  },
};

function createBaseListEventsResponse(): ListEventsResponse {
  return { events: [] };
}

export const ListEventsResponse = {
  encode(message: ListEventsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListEventsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventsResponse {
    return { events: Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [] };
  },

  toJSON(message: ListEventsResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListEventsResponse>, I>>(base?: I): ListEventsResponse {
    return ListEventsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListEventsResponse>, I>>(object: I): ListEventsResponse {
    const message = createBaseListEventsResponse();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListEventTypesRequest(): ListEventTypesRequest {
  return {};
}

export const ListEventTypesRequest = {
  encode(_: ListEventTypesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListEventTypesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListEventTypesRequest {
    return {};
  },

  toJSON(_: ListEventTypesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListEventTypesRequest>, I>>(base?: I): ListEventTypesRequest {
    return ListEventTypesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListEventTypesRequest>, I>>(_: I): ListEventTypesRequest {
    const message = createBaseListEventTypesRequest();
    return message;
  },
};

function createBaseListEventTypesResponse(): ListEventTypesResponse {
  return { eventTypes: [] };
}

export const ListEventTypesResponse = {
  encode(message: ListEventTypesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.eventTypes) {
      EventType.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListEventTypesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventTypes.push(EventType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventTypesResponse {
    return {
      eventTypes: Array.isArray(object?.eventTypes) ? object.eventTypes.map((e: any) => EventType.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListEventTypesResponse): unknown {
    const obj: any = {};
    if (message.eventTypes?.length) {
      obj.eventTypes = message.eventTypes.map((e) => EventType.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListEventTypesResponse>, I>>(base?: I): ListEventTypesResponse {
    return ListEventTypesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListEventTypesResponse>, I>>(object: I): ListEventTypesResponse {
    const message = createBaseListEventTypesResponse();
    message.eventTypes = object.eventTypes?.map((e) => EventType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAggregateTypesRequest(): ListAggregateTypesRequest {
  return {};
}

export const ListAggregateTypesRequest = {
  encode(_: ListAggregateTypesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAggregateTypesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAggregateTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListAggregateTypesRequest {
    return {};
  },

  toJSON(_: ListAggregateTypesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAggregateTypesRequest>, I>>(base?: I): ListAggregateTypesRequest {
    return ListAggregateTypesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAggregateTypesRequest>, I>>(_: I): ListAggregateTypesRequest {
    const message = createBaseListAggregateTypesRequest();
    return message;
  },
};

function createBaseListAggregateTypesResponse(): ListAggregateTypesResponse {
  return { aggregateTypes: [] };
}

export const ListAggregateTypesResponse = {
  encode(message: ListAggregateTypesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.aggregateTypes) {
      AggregateType.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAggregateTypesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAggregateTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.aggregateTypes.push(AggregateType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAggregateTypesResponse {
    return {
      aggregateTypes: Array.isArray(object?.aggregateTypes)
        ? object.aggregateTypes.map((e: any) => AggregateType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAggregateTypesResponse): unknown {
    const obj: any = {};
    if (message.aggregateTypes?.length) {
      obj.aggregateTypes = message.aggregateTypes.map((e) => AggregateType.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAggregateTypesResponse>, I>>(base?: I): ListAggregateTypesResponse {
    return ListAggregateTypesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAggregateTypesResponse>, I>>(object: I): ListAggregateTypesResponse {
    const message = createBaseListAggregateTypesResponse();
    message.aggregateTypes = object.aggregateTypes?.map((e) => AggregateType.fromPartial(e)) || [];
    return message;
  },
};

export interface AdminService {
  Healthz(request: DeepPartial<HealthzRequest>, metadata?: grpc.Metadata): Promise<HealthzResponse>;
  GetSupportedLanguages(
    request: DeepPartial<GetSupportedLanguagesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSupportedLanguagesResponse>;
  SetDefaultLanguage(
    request: DeepPartial<SetDefaultLanguageRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultLanguageResponse>;
  GetDefaultLanguage(
    request: DeepPartial<GetDefaultLanguageRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLanguageResponse>;
  GetMyInstance(request: DeepPartial<GetMyInstanceRequest>, metadata?: grpc.Metadata): Promise<GetMyInstanceResponse>;
  ListInstanceDomains(
    request: DeepPartial<ListInstanceDomainsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListInstanceDomainsResponse>;
  ListSecretGenerators(
    request: DeepPartial<ListSecretGeneratorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListSecretGeneratorsResponse>;
  GetSecretGenerator(
    request: DeepPartial<GetSecretGeneratorRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSecretGeneratorResponse>;
  UpdateSecretGenerator(
    request: DeepPartial<UpdateSecretGeneratorRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSecretGeneratorResponse>;
  GetSMTPConfig(request: DeepPartial<GetSMTPConfigRequest>, metadata?: grpc.Metadata): Promise<GetSMTPConfigResponse>;
  AddSMTPConfig(request: DeepPartial<AddSMTPConfigRequest>, metadata?: grpc.Metadata): Promise<AddSMTPConfigResponse>;
  UpdateSMTPConfig(
    request: DeepPartial<UpdateSMTPConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSMTPConfigResponse>;
  UpdateSMTPConfigPassword(
    request: DeepPartial<UpdateSMTPConfigPasswordRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSMTPConfigPasswordResponse>;
  RemoveSMTPConfig(
    request: DeepPartial<RemoveSMTPConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveSMTPConfigResponse>;
  ListSMSProviders(
    request: DeepPartial<ListSMSProvidersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListSMSProvidersResponse>;
  GetSMSProvider(
    request: DeepPartial<GetSMSProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSMSProviderResponse>;
  AddSMSProviderTwilio(
    request: DeepPartial<AddSMSProviderTwilioRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddSMSProviderTwilioResponse>;
  UpdateSMSProviderTwilio(
    request: DeepPartial<UpdateSMSProviderTwilioRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSMSProviderTwilioResponse>;
  UpdateSMSProviderTwilioToken(
    request: DeepPartial<UpdateSMSProviderTwilioTokenRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSMSProviderTwilioTokenResponse>;
  ActivateSMSProvider(
    request: DeepPartial<ActivateSMSProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ActivateSMSProviderResponse>;
  DeactivateSMSProvider(
    request: DeepPartial<DeactivateSMSProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateSMSProviderResponse>;
  RemoveSMSProvider(
    request: DeepPartial<RemoveSMSProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveSMSProviderResponse>;
  GetOIDCSettings(
    request: DeepPartial<GetOIDCSettingsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOIDCSettingsResponse>;
  AddOIDCSettings(
    request: DeepPartial<AddOIDCSettingsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddOIDCSettingsResponse>;
  UpdateOIDCSettings(
    request: DeepPartial<UpdateOIDCSettingsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOIDCSettingsResponse>;
  GetFileSystemNotificationProvider(
    request: DeepPartial<GetFileSystemNotificationProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetFileSystemNotificationProviderResponse>;
  GetLogNotificationProvider(
    request: DeepPartial<GetLogNotificationProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLogNotificationProviderResponse>;
  GetSecurityPolicy(
    request: DeepPartial<GetSecurityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSecurityPolicyResponse>;
  SetSecurityPolicy(
    request: DeepPartial<SetSecurityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetSecurityPolicyResponse>;
  GetOrgByID(request: DeepPartial<GetOrgByIDRequest>, metadata?: grpc.Metadata): Promise<GetOrgByIDResponse>;
  IsOrgUnique(request: DeepPartial<IsOrgUniqueRequest>, metadata?: grpc.Metadata): Promise<IsOrgUniqueResponse>;
  SetDefaultOrg(request: DeepPartial<SetDefaultOrgRequest>, metadata?: grpc.Metadata): Promise<SetDefaultOrgResponse>;
  GetDefaultOrg(request: DeepPartial<GetDefaultOrgRequest>, metadata?: grpc.Metadata): Promise<GetDefaultOrgResponse>;
  ListOrgs(request: DeepPartial<ListOrgsRequest>, metadata?: grpc.Metadata): Promise<ListOrgsResponse>;
  SetUpOrg(request: DeepPartial<SetUpOrgRequest>, metadata?: grpc.Metadata): Promise<SetUpOrgResponse>;
  RemoveOrg(request: DeepPartial<RemoveOrgRequest>, metadata?: grpc.Metadata): Promise<RemoveOrgResponse>;
  GetIDPByID(request: DeepPartial<GetIDPByIDRequest>, metadata?: grpc.Metadata): Promise<GetIDPByIDResponse>;
  ListIDPs(request: DeepPartial<ListIDPsRequest>, metadata?: grpc.Metadata): Promise<ListIDPsResponse>;
  AddOIDCIDP(request: DeepPartial<AddOIDCIDPRequest>, metadata?: grpc.Metadata): Promise<AddOIDCIDPResponse>;
  AddJWTIDP(request: DeepPartial<AddJWTIDPRequest>, metadata?: grpc.Metadata): Promise<AddJWTIDPResponse>;
  UpdateIDP(request: DeepPartial<UpdateIDPRequest>, metadata?: grpc.Metadata): Promise<UpdateIDPResponse>;
  DeactivateIDP(request: DeepPartial<DeactivateIDPRequest>, metadata?: grpc.Metadata): Promise<DeactivateIDPResponse>;
  ReactivateIDP(request: DeepPartial<ReactivateIDPRequest>, metadata?: grpc.Metadata): Promise<ReactivateIDPResponse>;
  RemoveIDP(request: DeepPartial<RemoveIDPRequest>, metadata?: grpc.Metadata): Promise<RemoveIDPResponse>;
  UpdateIDPOIDCConfig(
    request: DeepPartial<UpdateIDPOIDCConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateIDPOIDCConfigResponse>;
  UpdateIDPJWTConfig(
    request: DeepPartial<UpdateIDPJWTConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateIDPJWTConfigResponse>;
  /**
   * Returns all identity providers, which match the query
   * Limit should always be set, there is a default limit set by the service
   */
  ListProviders(request: DeepPartial<ListProvidersRequest>, metadata?: grpc.Metadata): Promise<ListProvidersResponse>;
  /** Returns an identity provider of the instance */
  GetProviderByID(
    request: DeepPartial<GetProviderByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetProviderByIDResponse>;
  /** Add a new OAuth2 identity provider on the instance */
  AddGenericOAuthProvider(
    request: DeepPartial<AddGenericOAuthProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGenericOAuthProviderResponse>;
  /** Change an existing OAuth2 identity provider on the instance */
  UpdateGenericOAuthProvider(
    request: DeepPartial<UpdateGenericOAuthProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGenericOAuthProviderResponse>;
  /** Add a new OIDC identity provider on the instance */
  AddGenericOIDCProvider(
    request: DeepPartial<AddGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGenericOIDCProviderResponse>;
  /** Change an existing OIDC identity provider on the instance */
  UpdateGenericOIDCProvider(
    request: DeepPartial<UpdateGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGenericOIDCProviderResponse>;
  /** Migrate an existing OIDC identity provider on the instance */
  MigrateGenericOIDCProvider(
    request: DeepPartial<MigrateGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<MigrateGenericOIDCProviderResponse>;
  /** Add a new JWT identity provider on the instance */
  AddJWTProvider(
    request: DeepPartial<AddJWTProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddJWTProviderResponse>;
  /** Change an existing JWT identity provider on the instance */
  UpdateJWTProvider(
    request: DeepPartial<UpdateJWTProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateJWTProviderResponse>;
  /** Add a new Azure AD identity provider on the instance */
  AddAzureADProvider(
    request: DeepPartial<AddAzureADProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddAzureADProviderResponse>;
  /** Change an existing Azure AD identity provider on the instance */
  UpdateAzureADProvider(
    request: DeepPartial<UpdateAzureADProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateAzureADProviderResponse>;
  /** Add a new GitHub identity provider on the instance */
  AddGitHubProvider(
    request: DeepPartial<AddGitHubProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitHubProviderResponse>;
  /** Change an existing GitHub identity provider on the instance */
  UpdateGitHubProvider(
    request: DeepPartial<UpdateGitHubProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitHubProviderResponse>;
  /** Add a new GitHub Enterprise Server identity provider on the instance */
  AddGitHubEnterpriseServerProvider(
    request: DeepPartial<AddGitHubEnterpriseServerProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitHubEnterpriseServerProviderResponse>;
  /** Change an existing GitHub Enterprise Server identity provider on the instance */
  UpdateGitHubEnterpriseServerProvider(
    request: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitHubEnterpriseServerProviderResponse>;
  /** Add a new GitLab identity provider on the instance */
  AddGitLabProvider(
    request: DeepPartial<AddGitLabProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitLabProviderResponse>;
  /** Change an existing GitLab identity provider on the instance */
  UpdateGitLabProvider(
    request: DeepPartial<UpdateGitLabProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitLabProviderResponse>;
  /** Add a new self hosted GitLab identity provider on the instance */
  AddGitLabSelfHostedProvider(
    request: DeepPartial<AddGitLabSelfHostedProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitLabSelfHostedProviderResponse>;
  /** Change an existing self hosted GitLab identity provider on the instance */
  UpdateGitLabSelfHostedProvider(
    request: DeepPartial<UpdateGitLabSelfHostedProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitLabSelfHostedProviderResponse>;
  /** Add a new Google identity provider on the instance */
  AddGoogleProvider(
    request: DeepPartial<AddGoogleProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGoogleProviderResponse>;
  /** Change an existing Google identity provider on the instance */
  UpdateGoogleProvider(
    request: DeepPartial<UpdateGoogleProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGoogleProviderResponse>;
  /** Add a new LDAP identity provider on the instance */
  AddLDAPProvider(
    request: DeepPartial<AddLDAPProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddLDAPProviderResponse>;
  /** Change an existing LDAP identity provider on the instance */
  UpdateLDAPProvider(
    request: DeepPartial<UpdateLDAPProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLDAPProviderResponse>;
  /**
   * Remove an identity provider
   * Will remove all linked providers of this configuration on the users
   */
  DeleteProvider(
    request: DeepPartial<DeleteProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeleteProviderResponse>;
  GetOrgIAMPolicy(
    request: DeepPartial<GetOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOrgIAMPolicyResponse>;
  UpdateOrgIAMPolicy(
    request: DeepPartial<UpdateOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOrgIAMPolicyResponse>;
  GetCustomOrgIAMPolicy(
    request: DeepPartial<GetCustomOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomOrgIAMPolicyResponse>;
  AddCustomOrgIAMPolicy(
    request: DeepPartial<AddCustomOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomOrgIAMPolicyResponse>;
  UpdateCustomOrgIAMPolicy(
    request: DeepPartial<UpdateCustomOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomOrgIAMPolicyResponse>;
  ResetCustomOrgIAMPolicyToDefault(
    request: DeepPartial<ResetCustomOrgIAMPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomOrgIAMPolicyToDefaultResponse>;
  GetDomainPolicy(
    request: DeepPartial<GetDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDomainPolicyResponse>;
  UpdateDomainPolicy(
    request: DeepPartial<UpdateDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateDomainPolicyResponse>;
  GetCustomDomainPolicy(
    request: DeepPartial<GetCustomDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomDomainPolicyResponse>;
  AddCustomDomainPolicy(
    request: DeepPartial<AddCustomDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomDomainPolicyResponse>;
  UpdateCustomDomainPolicy(
    request: DeepPartial<UpdateCustomDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomDomainPolicyResponse>;
  ResetCustomDomainPolicyToDefault(
    request: DeepPartial<ResetCustomDomainPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomDomainPolicyToDefaultResponse>;
  GetLabelPolicy(
    request: DeepPartial<GetLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLabelPolicyResponse>;
  GetPreviewLabelPolicy(
    request: DeepPartial<GetPreviewLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPreviewLabelPolicyResponse>;
  UpdateLabelPolicy(
    request: DeepPartial<UpdateLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLabelPolicyResponse>;
  ActivateLabelPolicy(
    request: DeepPartial<ActivateLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ActivateLabelPolicyResponse>;
  RemoveLabelPolicyLogo(
    request: DeepPartial<RemoveLabelPolicyLogoRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyLogoResponse>;
  RemoveLabelPolicyLogoDark(
    request: DeepPartial<RemoveLabelPolicyLogoDarkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyLogoDarkResponse>;
  RemoveLabelPolicyIcon(
    request: DeepPartial<RemoveLabelPolicyIconRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyIconResponse>;
  RemoveLabelPolicyIconDark(
    request: DeepPartial<RemoveLabelPolicyIconDarkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyIconDarkResponse>;
  RemoveLabelPolicyFont(
    request: DeepPartial<RemoveLabelPolicyFontRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyFontResponse>;
  GetLoginPolicy(
    request: DeepPartial<GetLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLoginPolicyResponse>;
  UpdateLoginPolicy(
    request: DeepPartial<UpdateLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLoginPolicyResponse>;
  ListLoginPolicyIDPs(
    request: DeepPartial<ListLoginPolicyIDPsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicyIDPsResponse>;
  AddIDPToLoginPolicy(
    request: DeepPartial<AddIDPToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddIDPToLoginPolicyResponse>;
  RemoveIDPFromLoginPolicy(
    request: DeepPartial<RemoveIDPFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveIDPFromLoginPolicyResponse>;
  ListLoginPolicySecondFactors(
    request: DeepPartial<ListLoginPolicySecondFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicySecondFactorsResponse>;
  AddSecondFactorToLoginPolicy(
    request: DeepPartial<AddSecondFactorToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddSecondFactorToLoginPolicyResponse>;
  RemoveSecondFactorFromLoginPolicy(
    request: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveSecondFactorFromLoginPolicyResponse>;
  ListLoginPolicyMultiFactors(
    request: DeepPartial<ListLoginPolicyMultiFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicyMultiFactorsResponse>;
  AddMultiFactorToLoginPolicy(
    request: DeepPartial<AddMultiFactorToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddMultiFactorToLoginPolicyResponse>;
  RemoveMultiFactorFromLoginPolicy(
    request: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveMultiFactorFromLoginPolicyResponse>;
  GetPasswordComplexityPolicy(
    request: DeepPartial<GetPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPasswordComplexityPolicyResponse>;
  UpdatePasswordComplexityPolicy(
    request: DeepPartial<UpdatePasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdatePasswordComplexityPolicyResponse>;
  GetPasswordAgePolicy(
    request: DeepPartial<GetPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPasswordAgePolicyResponse>;
  UpdatePasswordAgePolicy(
    request: DeepPartial<UpdatePasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdatePasswordAgePolicyResponse>;
  GetLockoutPolicy(
    request: DeepPartial<GetLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLockoutPolicyResponse>;
  UpdateLockoutPolicy(
    request: DeepPartial<UpdateLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLockoutPolicyResponse>;
  GetPrivacyPolicy(
    request: DeepPartial<GetPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPrivacyPolicyResponse>;
  UpdatePrivacyPolicy(
    request: DeepPartial<UpdatePrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdatePrivacyPolicyResponse>;
  AddNotificationPolicy(
    request: DeepPartial<AddNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddNotificationPolicyResponse>;
  GetNotificationPolicy(
    request: DeepPartial<GetNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetNotificationPolicyResponse>;
  UpdateNotificationPolicy(
    request: DeepPartial<UpdateNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateNotificationPolicyResponse>;
  GetDefaultInitMessageText(
    request: DeepPartial<GetDefaultInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultInitMessageTextResponse>;
  GetCustomInitMessageText(
    request: DeepPartial<GetCustomInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomInitMessageTextResponse>;
  SetDefaultInitMessageText(
    request: DeepPartial<SetDefaultInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultInitMessageTextResponse>;
  ResetCustomInitMessageTextToDefault(
    request: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomInitMessageTextToDefaultResponse>;
  GetDefaultPasswordResetMessageText(
    request: DeepPartial<GetDefaultPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordResetMessageTextResponse>;
  GetCustomPasswordResetMessageText(
    request: DeepPartial<GetCustomPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordResetMessageTextResponse>;
  SetDefaultPasswordResetMessageText(
    request: DeepPartial<SetDefaultPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultPasswordResetMessageTextResponse>;
  ResetCustomPasswordResetMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordResetMessageTextToDefaultResponse>;
  GetDefaultVerifyEmailMessageText(
    request: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultVerifyEmailMessageTextResponse>;
  GetCustomVerifyEmailMessageText(
    request: DeepPartial<GetCustomVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomVerifyEmailMessageTextResponse>;
  SetDefaultVerifyEmailMessageText(
    request: DeepPartial<SetDefaultVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultVerifyEmailMessageTextResponse>;
  ResetCustomVerifyEmailMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomVerifyEmailMessageTextToDefaultResponse>;
  GetDefaultVerifyPhoneMessageText(
    request: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultVerifyPhoneMessageTextResponse>;
  GetCustomVerifyPhoneMessageText(
    request: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomVerifyPhoneMessageTextResponse>;
  SetDefaultVerifyPhoneMessageText(
    request: DeepPartial<SetDefaultVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultVerifyPhoneMessageTextResponse>;
  ResetCustomVerifyPhoneMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomVerifyPhoneMessageTextToDefaultResponse>;
  GetDefaultDomainClaimedMessageText(
    request: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultDomainClaimedMessageTextResponse>;
  GetCustomDomainClaimedMessageText(
    request: DeepPartial<GetCustomDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomDomainClaimedMessageTextResponse>;
  SetDefaultDomainClaimedMessageText(
    request: DeepPartial<SetDefaultDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultDomainClaimedMessageTextResponse>;
  ResetCustomDomainClaimedMessageTextToDefault(
    request: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomDomainClaimedMessageTextToDefaultResponse>;
  GetDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordlessRegistrationMessageTextResponse>;
  GetCustomPasswordlessRegistrationMessageText(
    request: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordlessRegistrationMessageTextResponse>;
  SetDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<SetDefaultPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultPasswordlessRegistrationMessageTextResponse>;
  ResetCustomPasswordlessRegistrationMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>;
  GetDefaultPasswordChangeMessageText(
    request: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordChangeMessageTextResponse>;
  GetCustomPasswordChangeMessageText(
    request: DeepPartial<GetCustomPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordChangeMessageTextResponse>;
  SetDefaultPasswordChangeMessageText(
    request: DeepPartial<SetDefaultPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultPasswordChangeMessageTextResponse>;
  ResetCustomPasswordChangeMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordChangeMessageTextToDefaultResponse>;
  GetDefaultLoginTexts(
    request: DeepPartial<GetDefaultLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLoginTextsResponse>;
  GetCustomLoginTexts(
    request: DeepPartial<GetCustomLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomLoginTextsResponse>;
  SetCustomLoginText(
    request: DeepPartial<SetCustomLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomLoginTextsResponse>;
  ResetCustomLoginTextToDefault(
    request: DeepPartial<ResetCustomLoginTextsToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomLoginTextsToDefaultResponse>;
  ListIAMMemberRoles(
    request: DeepPartial<ListIAMMemberRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListIAMMemberRolesResponse>;
  ListIAMMembers(
    request: DeepPartial<ListIAMMembersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListIAMMembersResponse>;
  /**
   * Adds a user to the membership list of ZITADEL with the given roles
   * undefined roles will be dropped
   */
  AddIAMMember(request: DeepPartial<AddIAMMemberRequest>, metadata?: grpc.Metadata): Promise<AddIAMMemberResponse>;
  UpdateIAMMember(
    request: DeepPartial<UpdateIAMMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateIAMMemberResponse>;
  RemoveIAMMember(
    request: DeepPartial<RemoveIAMMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveIAMMemberResponse>;
  ListViews(request: DeepPartial<ListViewsRequest>, metadata?: grpc.Metadata): Promise<ListViewsResponse>;
  ListFailedEvents(
    request: DeepPartial<ListFailedEventsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListFailedEventsResponse>;
  RemoveFailedEvent(
    request: DeepPartial<RemoveFailedEventRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveFailedEventResponse>;
  /** Imports data into an instance and creates different objects */
  ImportData(request: DeepPartial<ImportDataRequest>, metadata?: grpc.Metadata): Promise<ImportDataResponse>;
  ExportData(request: DeepPartial<ExportDataRequest>, metadata?: grpc.Metadata): Promise<ExportDataResponse>;
  ListEventTypes(
    request: DeepPartial<ListEventTypesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListEventTypesResponse>;
  ListEvents(request: DeepPartial<ListEventsRequest>, metadata?: grpc.Metadata): Promise<ListEventsResponse>;
  ListAggregateTypes(
    request: DeepPartial<ListAggregateTypesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListAggregateTypesResponse>;
}

export class AdminServiceClientImpl implements AdminService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Healthz = this.Healthz.bind(this);
    this.GetSupportedLanguages = this.GetSupportedLanguages.bind(this);
    this.SetDefaultLanguage = this.SetDefaultLanguage.bind(this);
    this.GetDefaultLanguage = this.GetDefaultLanguage.bind(this);
    this.GetMyInstance = this.GetMyInstance.bind(this);
    this.ListInstanceDomains = this.ListInstanceDomains.bind(this);
    this.ListSecretGenerators = this.ListSecretGenerators.bind(this);
    this.GetSecretGenerator = this.GetSecretGenerator.bind(this);
    this.UpdateSecretGenerator = this.UpdateSecretGenerator.bind(this);
    this.GetSMTPConfig = this.GetSMTPConfig.bind(this);
    this.AddSMTPConfig = this.AddSMTPConfig.bind(this);
    this.UpdateSMTPConfig = this.UpdateSMTPConfig.bind(this);
    this.UpdateSMTPConfigPassword = this.UpdateSMTPConfigPassword.bind(this);
    this.RemoveSMTPConfig = this.RemoveSMTPConfig.bind(this);
    this.ListSMSProviders = this.ListSMSProviders.bind(this);
    this.GetSMSProvider = this.GetSMSProvider.bind(this);
    this.AddSMSProviderTwilio = this.AddSMSProviderTwilio.bind(this);
    this.UpdateSMSProviderTwilio = this.UpdateSMSProviderTwilio.bind(this);
    this.UpdateSMSProviderTwilioToken = this.UpdateSMSProviderTwilioToken.bind(this);
    this.ActivateSMSProvider = this.ActivateSMSProvider.bind(this);
    this.DeactivateSMSProvider = this.DeactivateSMSProvider.bind(this);
    this.RemoveSMSProvider = this.RemoveSMSProvider.bind(this);
    this.GetOIDCSettings = this.GetOIDCSettings.bind(this);
    this.AddOIDCSettings = this.AddOIDCSettings.bind(this);
    this.UpdateOIDCSettings = this.UpdateOIDCSettings.bind(this);
    this.GetFileSystemNotificationProvider = this.GetFileSystemNotificationProvider.bind(this);
    this.GetLogNotificationProvider = this.GetLogNotificationProvider.bind(this);
    this.GetSecurityPolicy = this.GetSecurityPolicy.bind(this);
    this.SetSecurityPolicy = this.SetSecurityPolicy.bind(this);
    this.GetOrgByID = this.GetOrgByID.bind(this);
    this.IsOrgUnique = this.IsOrgUnique.bind(this);
    this.SetDefaultOrg = this.SetDefaultOrg.bind(this);
    this.GetDefaultOrg = this.GetDefaultOrg.bind(this);
    this.ListOrgs = this.ListOrgs.bind(this);
    this.SetUpOrg = this.SetUpOrg.bind(this);
    this.RemoveOrg = this.RemoveOrg.bind(this);
    this.GetIDPByID = this.GetIDPByID.bind(this);
    this.ListIDPs = this.ListIDPs.bind(this);
    this.AddOIDCIDP = this.AddOIDCIDP.bind(this);
    this.AddJWTIDP = this.AddJWTIDP.bind(this);
    this.UpdateIDP = this.UpdateIDP.bind(this);
    this.DeactivateIDP = this.DeactivateIDP.bind(this);
    this.ReactivateIDP = this.ReactivateIDP.bind(this);
    this.RemoveIDP = this.RemoveIDP.bind(this);
    this.UpdateIDPOIDCConfig = this.UpdateIDPOIDCConfig.bind(this);
    this.UpdateIDPJWTConfig = this.UpdateIDPJWTConfig.bind(this);
    this.ListProviders = this.ListProviders.bind(this);
    this.GetProviderByID = this.GetProviderByID.bind(this);
    this.AddGenericOAuthProvider = this.AddGenericOAuthProvider.bind(this);
    this.UpdateGenericOAuthProvider = this.UpdateGenericOAuthProvider.bind(this);
    this.AddGenericOIDCProvider = this.AddGenericOIDCProvider.bind(this);
    this.UpdateGenericOIDCProvider = this.UpdateGenericOIDCProvider.bind(this);
    this.MigrateGenericOIDCProvider = this.MigrateGenericOIDCProvider.bind(this);
    this.AddJWTProvider = this.AddJWTProvider.bind(this);
    this.UpdateJWTProvider = this.UpdateJWTProvider.bind(this);
    this.AddAzureADProvider = this.AddAzureADProvider.bind(this);
    this.UpdateAzureADProvider = this.UpdateAzureADProvider.bind(this);
    this.AddGitHubProvider = this.AddGitHubProvider.bind(this);
    this.UpdateGitHubProvider = this.UpdateGitHubProvider.bind(this);
    this.AddGitHubEnterpriseServerProvider = this.AddGitHubEnterpriseServerProvider.bind(this);
    this.UpdateGitHubEnterpriseServerProvider = this.UpdateGitHubEnterpriseServerProvider.bind(this);
    this.AddGitLabProvider = this.AddGitLabProvider.bind(this);
    this.UpdateGitLabProvider = this.UpdateGitLabProvider.bind(this);
    this.AddGitLabSelfHostedProvider = this.AddGitLabSelfHostedProvider.bind(this);
    this.UpdateGitLabSelfHostedProvider = this.UpdateGitLabSelfHostedProvider.bind(this);
    this.AddGoogleProvider = this.AddGoogleProvider.bind(this);
    this.UpdateGoogleProvider = this.UpdateGoogleProvider.bind(this);
    this.AddLDAPProvider = this.AddLDAPProvider.bind(this);
    this.UpdateLDAPProvider = this.UpdateLDAPProvider.bind(this);
    this.DeleteProvider = this.DeleteProvider.bind(this);
    this.GetOrgIAMPolicy = this.GetOrgIAMPolicy.bind(this);
    this.UpdateOrgIAMPolicy = this.UpdateOrgIAMPolicy.bind(this);
    this.GetCustomOrgIAMPolicy = this.GetCustomOrgIAMPolicy.bind(this);
    this.AddCustomOrgIAMPolicy = this.AddCustomOrgIAMPolicy.bind(this);
    this.UpdateCustomOrgIAMPolicy = this.UpdateCustomOrgIAMPolicy.bind(this);
    this.ResetCustomOrgIAMPolicyToDefault = this.ResetCustomOrgIAMPolicyToDefault.bind(this);
    this.GetDomainPolicy = this.GetDomainPolicy.bind(this);
    this.UpdateDomainPolicy = this.UpdateDomainPolicy.bind(this);
    this.GetCustomDomainPolicy = this.GetCustomDomainPolicy.bind(this);
    this.AddCustomDomainPolicy = this.AddCustomDomainPolicy.bind(this);
    this.UpdateCustomDomainPolicy = this.UpdateCustomDomainPolicy.bind(this);
    this.ResetCustomDomainPolicyToDefault = this.ResetCustomDomainPolicyToDefault.bind(this);
    this.GetLabelPolicy = this.GetLabelPolicy.bind(this);
    this.GetPreviewLabelPolicy = this.GetPreviewLabelPolicy.bind(this);
    this.UpdateLabelPolicy = this.UpdateLabelPolicy.bind(this);
    this.ActivateLabelPolicy = this.ActivateLabelPolicy.bind(this);
    this.RemoveLabelPolicyLogo = this.RemoveLabelPolicyLogo.bind(this);
    this.RemoveLabelPolicyLogoDark = this.RemoveLabelPolicyLogoDark.bind(this);
    this.RemoveLabelPolicyIcon = this.RemoveLabelPolicyIcon.bind(this);
    this.RemoveLabelPolicyIconDark = this.RemoveLabelPolicyIconDark.bind(this);
    this.RemoveLabelPolicyFont = this.RemoveLabelPolicyFont.bind(this);
    this.GetLoginPolicy = this.GetLoginPolicy.bind(this);
    this.UpdateLoginPolicy = this.UpdateLoginPolicy.bind(this);
    this.ListLoginPolicyIDPs = this.ListLoginPolicyIDPs.bind(this);
    this.AddIDPToLoginPolicy = this.AddIDPToLoginPolicy.bind(this);
    this.RemoveIDPFromLoginPolicy = this.RemoveIDPFromLoginPolicy.bind(this);
    this.ListLoginPolicySecondFactors = this.ListLoginPolicySecondFactors.bind(this);
    this.AddSecondFactorToLoginPolicy = this.AddSecondFactorToLoginPolicy.bind(this);
    this.RemoveSecondFactorFromLoginPolicy = this.RemoveSecondFactorFromLoginPolicy.bind(this);
    this.ListLoginPolicyMultiFactors = this.ListLoginPolicyMultiFactors.bind(this);
    this.AddMultiFactorToLoginPolicy = this.AddMultiFactorToLoginPolicy.bind(this);
    this.RemoveMultiFactorFromLoginPolicy = this.RemoveMultiFactorFromLoginPolicy.bind(this);
    this.GetPasswordComplexityPolicy = this.GetPasswordComplexityPolicy.bind(this);
    this.UpdatePasswordComplexityPolicy = this.UpdatePasswordComplexityPolicy.bind(this);
    this.GetPasswordAgePolicy = this.GetPasswordAgePolicy.bind(this);
    this.UpdatePasswordAgePolicy = this.UpdatePasswordAgePolicy.bind(this);
    this.GetLockoutPolicy = this.GetLockoutPolicy.bind(this);
    this.UpdateLockoutPolicy = this.UpdateLockoutPolicy.bind(this);
    this.GetPrivacyPolicy = this.GetPrivacyPolicy.bind(this);
    this.UpdatePrivacyPolicy = this.UpdatePrivacyPolicy.bind(this);
    this.AddNotificationPolicy = this.AddNotificationPolicy.bind(this);
    this.GetNotificationPolicy = this.GetNotificationPolicy.bind(this);
    this.UpdateNotificationPolicy = this.UpdateNotificationPolicy.bind(this);
    this.GetDefaultInitMessageText = this.GetDefaultInitMessageText.bind(this);
    this.GetCustomInitMessageText = this.GetCustomInitMessageText.bind(this);
    this.SetDefaultInitMessageText = this.SetDefaultInitMessageText.bind(this);
    this.ResetCustomInitMessageTextToDefault = this.ResetCustomInitMessageTextToDefault.bind(this);
    this.GetDefaultPasswordResetMessageText = this.GetDefaultPasswordResetMessageText.bind(this);
    this.GetCustomPasswordResetMessageText = this.GetCustomPasswordResetMessageText.bind(this);
    this.SetDefaultPasswordResetMessageText = this.SetDefaultPasswordResetMessageText.bind(this);
    this.ResetCustomPasswordResetMessageTextToDefault = this.ResetCustomPasswordResetMessageTextToDefault.bind(this);
    this.GetDefaultVerifyEmailMessageText = this.GetDefaultVerifyEmailMessageText.bind(this);
    this.GetCustomVerifyEmailMessageText = this.GetCustomVerifyEmailMessageText.bind(this);
    this.SetDefaultVerifyEmailMessageText = this.SetDefaultVerifyEmailMessageText.bind(this);
    this.ResetCustomVerifyEmailMessageTextToDefault = this.ResetCustomVerifyEmailMessageTextToDefault.bind(this);
    this.GetDefaultVerifyPhoneMessageText = this.GetDefaultVerifyPhoneMessageText.bind(this);
    this.GetCustomVerifyPhoneMessageText = this.GetCustomVerifyPhoneMessageText.bind(this);
    this.SetDefaultVerifyPhoneMessageText = this.SetDefaultVerifyPhoneMessageText.bind(this);
    this.ResetCustomVerifyPhoneMessageTextToDefault = this.ResetCustomVerifyPhoneMessageTextToDefault.bind(this);
    this.GetDefaultDomainClaimedMessageText = this.GetDefaultDomainClaimedMessageText.bind(this);
    this.GetCustomDomainClaimedMessageText = this.GetCustomDomainClaimedMessageText.bind(this);
    this.SetDefaultDomainClaimedMessageText = this.SetDefaultDomainClaimedMessageText.bind(this);
    this.ResetCustomDomainClaimedMessageTextToDefault = this.ResetCustomDomainClaimedMessageTextToDefault.bind(this);
    this.GetDefaultPasswordlessRegistrationMessageText = this.GetDefaultPasswordlessRegistrationMessageText.bind(this);
    this.GetCustomPasswordlessRegistrationMessageText = this.GetCustomPasswordlessRegistrationMessageText.bind(this);
    this.SetDefaultPasswordlessRegistrationMessageText = this.SetDefaultPasswordlessRegistrationMessageText.bind(this);
    this.ResetCustomPasswordlessRegistrationMessageTextToDefault = this
      .ResetCustomPasswordlessRegistrationMessageTextToDefault.bind(this);
    this.GetDefaultPasswordChangeMessageText = this.GetDefaultPasswordChangeMessageText.bind(this);
    this.GetCustomPasswordChangeMessageText = this.GetCustomPasswordChangeMessageText.bind(this);
    this.SetDefaultPasswordChangeMessageText = this.SetDefaultPasswordChangeMessageText.bind(this);
    this.ResetCustomPasswordChangeMessageTextToDefault = this.ResetCustomPasswordChangeMessageTextToDefault.bind(this);
    this.GetDefaultLoginTexts = this.GetDefaultLoginTexts.bind(this);
    this.GetCustomLoginTexts = this.GetCustomLoginTexts.bind(this);
    this.SetCustomLoginText = this.SetCustomLoginText.bind(this);
    this.ResetCustomLoginTextToDefault = this.ResetCustomLoginTextToDefault.bind(this);
    this.ListIAMMemberRoles = this.ListIAMMemberRoles.bind(this);
    this.ListIAMMembers = this.ListIAMMembers.bind(this);
    this.AddIAMMember = this.AddIAMMember.bind(this);
    this.UpdateIAMMember = this.UpdateIAMMember.bind(this);
    this.RemoveIAMMember = this.RemoveIAMMember.bind(this);
    this.ListViews = this.ListViews.bind(this);
    this.ListFailedEvents = this.ListFailedEvents.bind(this);
    this.RemoveFailedEvent = this.RemoveFailedEvent.bind(this);
    this.ImportData = this.ImportData.bind(this);
    this.ExportData = this.ExportData.bind(this);
    this.ListEventTypes = this.ListEventTypes.bind(this);
    this.ListEvents = this.ListEvents.bind(this);
    this.ListAggregateTypes = this.ListAggregateTypes.bind(this);
  }

  Healthz(request: DeepPartial<HealthzRequest>, metadata?: grpc.Metadata): Promise<HealthzResponse> {
    return this.rpc.unary(AdminServiceHealthzDesc, HealthzRequest.fromPartial(request), metadata);
  }

  GetSupportedLanguages(
    request: DeepPartial<GetSupportedLanguagesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSupportedLanguagesResponse> {
    return this.rpc.unary(
      AdminServiceGetSupportedLanguagesDesc,
      GetSupportedLanguagesRequest.fromPartial(request),
      metadata,
    );
  }

  SetDefaultLanguage(
    request: DeepPartial<SetDefaultLanguageRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultLanguageResponse> {
    return this.rpc.unary(AdminServiceSetDefaultLanguageDesc, SetDefaultLanguageRequest.fromPartial(request), metadata);
  }

  GetDefaultLanguage(
    request: DeepPartial<GetDefaultLanguageRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLanguageResponse> {
    return this.rpc.unary(AdminServiceGetDefaultLanguageDesc, GetDefaultLanguageRequest.fromPartial(request), metadata);
  }

  GetMyInstance(request: DeepPartial<GetMyInstanceRequest>, metadata?: grpc.Metadata): Promise<GetMyInstanceResponse> {
    return this.rpc.unary(AdminServiceGetMyInstanceDesc, GetMyInstanceRequest.fromPartial(request), metadata);
  }

  ListInstanceDomains(
    request: DeepPartial<ListInstanceDomainsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListInstanceDomainsResponse> {
    return this.rpc.unary(
      AdminServiceListInstanceDomainsDesc,
      ListInstanceDomainsRequest.fromPartial(request),
      metadata,
    );
  }

  ListSecretGenerators(
    request: DeepPartial<ListSecretGeneratorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListSecretGeneratorsResponse> {
    return this.rpc.unary(
      AdminServiceListSecretGeneratorsDesc,
      ListSecretGeneratorsRequest.fromPartial(request),
      metadata,
    );
  }

  GetSecretGenerator(
    request: DeepPartial<GetSecretGeneratorRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSecretGeneratorResponse> {
    return this.rpc.unary(AdminServiceGetSecretGeneratorDesc, GetSecretGeneratorRequest.fromPartial(request), metadata);
  }

  UpdateSecretGenerator(
    request: DeepPartial<UpdateSecretGeneratorRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSecretGeneratorResponse> {
    return this.rpc.unary(
      AdminServiceUpdateSecretGeneratorDesc,
      UpdateSecretGeneratorRequest.fromPartial(request),
      metadata,
    );
  }

  GetSMTPConfig(request: DeepPartial<GetSMTPConfigRequest>, metadata?: grpc.Metadata): Promise<GetSMTPConfigResponse> {
    return this.rpc.unary(AdminServiceGetSMTPConfigDesc, GetSMTPConfigRequest.fromPartial(request), metadata);
  }

  AddSMTPConfig(request: DeepPartial<AddSMTPConfigRequest>, metadata?: grpc.Metadata): Promise<AddSMTPConfigResponse> {
    return this.rpc.unary(AdminServiceAddSMTPConfigDesc, AddSMTPConfigRequest.fromPartial(request), metadata);
  }

  UpdateSMTPConfig(
    request: DeepPartial<UpdateSMTPConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSMTPConfigResponse> {
    return this.rpc.unary(AdminServiceUpdateSMTPConfigDesc, UpdateSMTPConfigRequest.fromPartial(request), metadata);
  }

  UpdateSMTPConfigPassword(
    request: DeepPartial<UpdateSMTPConfigPasswordRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSMTPConfigPasswordResponse> {
    return this.rpc.unary(
      AdminServiceUpdateSMTPConfigPasswordDesc,
      UpdateSMTPConfigPasswordRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveSMTPConfig(
    request: DeepPartial<RemoveSMTPConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveSMTPConfigResponse> {
    return this.rpc.unary(AdminServiceRemoveSMTPConfigDesc, RemoveSMTPConfigRequest.fromPartial(request), metadata);
  }

  ListSMSProviders(
    request: DeepPartial<ListSMSProvidersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListSMSProvidersResponse> {
    return this.rpc.unary(AdminServiceListSMSProvidersDesc, ListSMSProvidersRequest.fromPartial(request), metadata);
  }

  GetSMSProvider(
    request: DeepPartial<GetSMSProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSMSProviderResponse> {
    return this.rpc.unary(AdminServiceGetSMSProviderDesc, GetSMSProviderRequest.fromPartial(request), metadata);
  }

  AddSMSProviderTwilio(
    request: DeepPartial<AddSMSProviderTwilioRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddSMSProviderTwilioResponse> {
    return this.rpc.unary(
      AdminServiceAddSMSProviderTwilioDesc,
      AddSMSProviderTwilioRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateSMSProviderTwilio(
    request: DeepPartial<UpdateSMSProviderTwilioRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSMSProviderTwilioResponse> {
    return this.rpc.unary(
      AdminServiceUpdateSMSProviderTwilioDesc,
      UpdateSMSProviderTwilioRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateSMSProviderTwilioToken(
    request: DeepPartial<UpdateSMSProviderTwilioTokenRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSMSProviderTwilioTokenResponse> {
    return this.rpc.unary(
      AdminServiceUpdateSMSProviderTwilioTokenDesc,
      UpdateSMSProviderTwilioTokenRequest.fromPartial(request),
      metadata,
    );
  }

  ActivateSMSProvider(
    request: DeepPartial<ActivateSMSProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ActivateSMSProviderResponse> {
    return this.rpc.unary(
      AdminServiceActivateSMSProviderDesc,
      ActivateSMSProviderRequest.fromPartial(request),
      metadata,
    );
  }

  DeactivateSMSProvider(
    request: DeepPartial<DeactivateSMSProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateSMSProviderResponse> {
    return this.rpc.unary(
      AdminServiceDeactivateSMSProviderDesc,
      DeactivateSMSProviderRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveSMSProvider(
    request: DeepPartial<RemoveSMSProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveSMSProviderResponse> {
    return this.rpc.unary(AdminServiceRemoveSMSProviderDesc, RemoveSMSProviderRequest.fromPartial(request), metadata);
  }

  GetOIDCSettings(
    request: DeepPartial<GetOIDCSettingsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOIDCSettingsResponse> {
    return this.rpc.unary(AdminServiceGetOIDCSettingsDesc, GetOIDCSettingsRequest.fromPartial(request), metadata);
  }

  AddOIDCSettings(
    request: DeepPartial<AddOIDCSettingsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddOIDCSettingsResponse> {
    return this.rpc.unary(AdminServiceAddOIDCSettingsDesc, AddOIDCSettingsRequest.fromPartial(request), metadata);
  }

  UpdateOIDCSettings(
    request: DeepPartial<UpdateOIDCSettingsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOIDCSettingsResponse> {
    return this.rpc.unary(AdminServiceUpdateOIDCSettingsDesc, UpdateOIDCSettingsRequest.fromPartial(request), metadata);
  }

  GetFileSystemNotificationProvider(
    request: DeepPartial<GetFileSystemNotificationProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetFileSystemNotificationProviderResponse> {
    return this.rpc.unary(
      AdminServiceGetFileSystemNotificationProviderDesc,
      GetFileSystemNotificationProviderRequest.fromPartial(request),
      metadata,
    );
  }

  GetLogNotificationProvider(
    request: DeepPartial<GetLogNotificationProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLogNotificationProviderResponse> {
    return this.rpc.unary(
      AdminServiceGetLogNotificationProviderDesc,
      GetLogNotificationProviderRequest.fromPartial(request),
      metadata,
    );
  }

  GetSecurityPolicy(
    request: DeepPartial<GetSecurityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSecurityPolicyResponse> {
    return this.rpc.unary(AdminServiceGetSecurityPolicyDesc, GetSecurityPolicyRequest.fromPartial(request), metadata);
  }

  SetSecurityPolicy(
    request: DeepPartial<SetSecurityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetSecurityPolicyResponse> {
    return this.rpc.unary(AdminServiceSetSecurityPolicyDesc, SetSecurityPolicyRequest.fromPartial(request), metadata);
  }

  GetOrgByID(request: DeepPartial<GetOrgByIDRequest>, metadata?: grpc.Metadata): Promise<GetOrgByIDResponse> {
    return this.rpc.unary(AdminServiceGetOrgByIDDesc, GetOrgByIDRequest.fromPartial(request), metadata);
  }

  IsOrgUnique(request: DeepPartial<IsOrgUniqueRequest>, metadata?: grpc.Metadata): Promise<IsOrgUniqueResponse> {
    return this.rpc.unary(AdminServiceIsOrgUniqueDesc, IsOrgUniqueRequest.fromPartial(request), metadata);
  }

  SetDefaultOrg(request: DeepPartial<SetDefaultOrgRequest>, metadata?: grpc.Metadata): Promise<SetDefaultOrgResponse> {
    return this.rpc.unary(AdminServiceSetDefaultOrgDesc, SetDefaultOrgRequest.fromPartial(request), metadata);
  }

  GetDefaultOrg(request: DeepPartial<GetDefaultOrgRequest>, metadata?: grpc.Metadata): Promise<GetDefaultOrgResponse> {
    return this.rpc.unary(AdminServiceGetDefaultOrgDesc, GetDefaultOrgRequest.fromPartial(request), metadata);
  }

  ListOrgs(request: DeepPartial<ListOrgsRequest>, metadata?: grpc.Metadata): Promise<ListOrgsResponse> {
    return this.rpc.unary(AdminServiceListOrgsDesc, ListOrgsRequest.fromPartial(request), metadata);
  }

  SetUpOrg(request: DeepPartial<SetUpOrgRequest>, metadata?: grpc.Metadata): Promise<SetUpOrgResponse> {
    return this.rpc.unary(AdminServiceSetUpOrgDesc, SetUpOrgRequest.fromPartial(request), metadata);
  }

  RemoveOrg(request: DeepPartial<RemoveOrgRequest>, metadata?: grpc.Metadata): Promise<RemoveOrgResponse> {
    return this.rpc.unary(AdminServiceRemoveOrgDesc, RemoveOrgRequest.fromPartial(request), metadata);
  }

  GetIDPByID(request: DeepPartial<GetIDPByIDRequest>, metadata?: grpc.Metadata): Promise<GetIDPByIDResponse> {
    return this.rpc.unary(AdminServiceGetIDPByIDDesc, GetIDPByIDRequest.fromPartial(request), metadata);
  }

  ListIDPs(request: DeepPartial<ListIDPsRequest>, metadata?: grpc.Metadata): Promise<ListIDPsResponse> {
    return this.rpc.unary(AdminServiceListIDPsDesc, ListIDPsRequest.fromPartial(request), metadata);
  }

  AddOIDCIDP(request: DeepPartial<AddOIDCIDPRequest>, metadata?: grpc.Metadata): Promise<AddOIDCIDPResponse> {
    return this.rpc.unary(AdminServiceAddOIDCIDPDesc, AddOIDCIDPRequest.fromPartial(request), metadata);
  }

  AddJWTIDP(request: DeepPartial<AddJWTIDPRequest>, metadata?: grpc.Metadata): Promise<AddJWTIDPResponse> {
    return this.rpc.unary(AdminServiceAddJWTIDPDesc, AddJWTIDPRequest.fromPartial(request), metadata);
  }

  UpdateIDP(request: DeepPartial<UpdateIDPRequest>, metadata?: grpc.Metadata): Promise<UpdateIDPResponse> {
    return this.rpc.unary(AdminServiceUpdateIDPDesc, UpdateIDPRequest.fromPartial(request), metadata);
  }

  DeactivateIDP(request: DeepPartial<DeactivateIDPRequest>, metadata?: grpc.Metadata): Promise<DeactivateIDPResponse> {
    return this.rpc.unary(AdminServiceDeactivateIDPDesc, DeactivateIDPRequest.fromPartial(request), metadata);
  }

  ReactivateIDP(request: DeepPartial<ReactivateIDPRequest>, metadata?: grpc.Metadata): Promise<ReactivateIDPResponse> {
    return this.rpc.unary(AdminServiceReactivateIDPDesc, ReactivateIDPRequest.fromPartial(request), metadata);
  }

  RemoveIDP(request: DeepPartial<RemoveIDPRequest>, metadata?: grpc.Metadata): Promise<RemoveIDPResponse> {
    return this.rpc.unary(AdminServiceRemoveIDPDesc, RemoveIDPRequest.fromPartial(request), metadata);
  }

  UpdateIDPOIDCConfig(
    request: DeepPartial<UpdateIDPOIDCConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateIDPOIDCConfigResponse> {
    return this.rpc.unary(
      AdminServiceUpdateIDPOIDCConfigDesc,
      UpdateIDPOIDCConfigRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateIDPJWTConfig(
    request: DeepPartial<UpdateIDPJWTConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateIDPJWTConfigResponse> {
    return this.rpc.unary(AdminServiceUpdateIDPJWTConfigDesc, UpdateIDPJWTConfigRequest.fromPartial(request), metadata);
  }

  ListProviders(request: DeepPartial<ListProvidersRequest>, metadata?: grpc.Metadata): Promise<ListProvidersResponse> {
    return this.rpc.unary(AdminServiceListProvidersDesc, ListProvidersRequest.fromPartial(request), metadata);
  }

  GetProviderByID(
    request: DeepPartial<GetProviderByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetProviderByIDResponse> {
    return this.rpc.unary(AdminServiceGetProviderByIDDesc, GetProviderByIDRequest.fromPartial(request), metadata);
  }

  AddGenericOAuthProvider(
    request: DeepPartial<AddGenericOAuthProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGenericOAuthProviderResponse> {
    return this.rpc.unary(
      AdminServiceAddGenericOAuthProviderDesc,
      AddGenericOAuthProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGenericOAuthProvider(
    request: DeepPartial<UpdateGenericOAuthProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGenericOAuthProviderResponse> {
    return this.rpc.unary(
      AdminServiceUpdateGenericOAuthProviderDesc,
      UpdateGenericOAuthProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGenericOIDCProvider(
    request: DeepPartial<AddGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGenericOIDCProviderResponse> {
    return this.rpc.unary(
      AdminServiceAddGenericOIDCProviderDesc,
      AddGenericOIDCProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGenericOIDCProvider(
    request: DeepPartial<UpdateGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGenericOIDCProviderResponse> {
    return this.rpc.unary(
      AdminServiceUpdateGenericOIDCProviderDesc,
      UpdateGenericOIDCProviderRequest.fromPartial(request),
      metadata,
    );
  }

  MigrateGenericOIDCProvider(
    request: DeepPartial<MigrateGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<MigrateGenericOIDCProviderResponse> {
    return this.rpc.unary(
      AdminServiceMigrateGenericOIDCProviderDesc,
      MigrateGenericOIDCProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddJWTProvider(
    request: DeepPartial<AddJWTProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddJWTProviderResponse> {
    return this.rpc.unary(AdminServiceAddJWTProviderDesc, AddJWTProviderRequest.fromPartial(request), metadata);
  }

  UpdateJWTProvider(
    request: DeepPartial<UpdateJWTProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateJWTProviderResponse> {
    return this.rpc.unary(AdminServiceUpdateJWTProviderDesc, UpdateJWTProviderRequest.fromPartial(request), metadata);
  }

  AddAzureADProvider(
    request: DeepPartial<AddAzureADProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddAzureADProviderResponse> {
    return this.rpc.unary(AdminServiceAddAzureADProviderDesc, AddAzureADProviderRequest.fromPartial(request), metadata);
  }

  UpdateAzureADProvider(
    request: DeepPartial<UpdateAzureADProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateAzureADProviderResponse> {
    return this.rpc.unary(
      AdminServiceUpdateAzureADProviderDesc,
      UpdateAzureADProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGitHubProvider(
    request: DeepPartial<AddGitHubProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitHubProviderResponse> {
    return this.rpc.unary(AdminServiceAddGitHubProviderDesc, AddGitHubProviderRequest.fromPartial(request), metadata);
  }

  UpdateGitHubProvider(
    request: DeepPartial<UpdateGitHubProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitHubProviderResponse> {
    return this.rpc.unary(
      AdminServiceUpdateGitHubProviderDesc,
      UpdateGitHubProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGitHubEnterpriseServerProvider(
    request: DeepPartial<AddGitHubEnterpriseServerProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitHubEnterpriseServerProviderResponse> {
    return this.rpc.unary(
      AdminServiceAddGitHubEnterpriseServerProviderDesc,
      AddGitHubEnterpriseServerProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGitHubEnterpriseServerProvider(
    request: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitHubEnterpriseServerProviderResponse> {
    return this.rpc.unary(
      AdminServiceUpdateGitHubEnterpriseServerProviderDesc,
      UpdateGitHubEnterpriseServerProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGitLabProvider(
    request: DeepPartial<AddGitLabProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitLabProviderResponse> {
    return this.rpc.unary(AdminServiceAddGitLabProviderDesc, AddGitLabProviderRequest.fromPartial(request), metadata);
  }

  UpdateGitLabProvider(
    request: DeepPartial<UpdateGitLabProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitLabProviderResponse> {
    return this.rpc.unary(
      AdminServiceUpdateGitLabProviderDesc,
      UpdateGitLabProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGitLabSelfHostedProvider(
    request: DeepPartial<AddGitLabSelfHostedProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitLabSelfHostedProviderResponse> {
    return this.rpc.unary(
      AdminServiceAddGitLabSelfHostedProviderDesc,
      AddGitLabSelfHostedProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGitLabSelfHostedProvider(
    request: DeepPartial<UpdateGitLabSelfHostedProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitLabSelfHostedProviderResponse> {
    return this.rpc.unary(
      AdminServiceUpdateGitLabSelfHostedProviderDesc,
      UpdateGitLabSelfHostedProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGoogleProvider(
    request: DeepPartial<AddGoogleProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGoogleProviderResponse> {
    return this.rpc.unary(AdminServiceAddGoogleProviderDesc, AddGoogleProviderRequest.fromPartial(request), metadata);
  }

  UpdateGoogleProvider(
    request: DeepPartial<UpdateGoogleProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGoogleProviderResponse> {
    return this.rpc.unary(
      AdminServiceUpdateGoogleProviderDesc,
      UpdateGoogleProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddLDAPProvider(
    request: DeepPartial<AddLDAPProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddLDAPProviderResponse> {
    return this.rpc.unary(AdminServiceAddLDAPProviderDesc, AddLDAPProviderRequest.fromPartial(request), metadata);
  }

  UpdateLDAPProvider(
    request: DeepPartial<UpdateLDAPProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLDAPProviderResponse> {
    return this.rpc.unary(AdminServiceUpdateLDAPProviderDesc, UpdateLDAPProviderRequest.fromPartial(request), metadata);
  }

  DeleteProvider(
    request: DeepPartial<DeleteProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeleteProviderResponse> {
    return this.rpc.unary(AdminServiceDeleteProviderDesc, DeleteProviderRequest.fromPartial(request), metadata);
  }

  GetOrgIAMPolicy(
    request: DeepPartial<GetOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOrgIAMPolicyResponse> {
    return this.rpc.unary(AdminServiceGetOrgIAMPolicyDesc, GetOrgIAMPolicyRequest.fromPartial(request), metadata);
  }

  UpdateOrgIAMPolicy(
    request: DeepPartial<UpdateOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOrgIAMPolicyResponse> {
    return this.rpc.unary(AdminServiceUpdateOrgIAMPolicyDesc, UpdateOrgIAMPolicyRequest.fromPartial(request), metadata);
  }

  GetCustomOrgIAMPolicy(
    request: DeepPartial<GetCustomOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomOrgIAMPolicyResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomOrgIAMPolicyDesc,
      GetCustomOrgIAMPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomOrgIAMPolicy(
    request: DeepPartial<AddCustomOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomOrgIAMPolicyResponse> {
    return this.rpc.unary(
      AdminServiceAddCustomOrgIAMPolicyDesc,
      AddCustomOrgIAMPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomOrgIAMPolicy(
    request: DeepPartial<UpdateCustomOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomOrgIAMPolicyResponse> {
    return this.rpc.unary(
      AdminServiceUpdateCustomOrgIAMPolicyDesc,
      UpdateCustomOrgIAMPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomOrgIAMPolicyToDefault(
    request: DeepPartial<ResetCustomOrgIAMPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomOrgIAMPolicyToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomOrgIAMPolicyToDefaultDesc,
      ResetCustomOrgIAMPolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetDomainPolicy(
    request: DeepPartial<GetDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDomainPolicyResponse> {
    return this.rpc.unary(AdminServiceGetDomainPolicyDesc, GetDomainPolicyRequest.fromPartial(request), metadata);
  }

  UpdateDomainPolicy(
    request: DeepPartial<UpdateDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateDomainPolicyResponse> {
    return this.rpc.unary(AdminServiceUpdateDomainPolicyDesc, UpdateDomainPolicyRequest.fromPartial(request), metadata);
  }

  GetCustomDomainPolicy(
    request: DeepPartial<GetCustomDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomDomainPolicyResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomDomainPolicyDesc,
      GetCustomDomainPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomDomainPolicy(
    request: DeepPartial<AddCustomDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomDomainPolicyResponse> {
    return this.rpc.unary(
      AdminServiceAddCustomDomainPolicyDesc,
      AddCustomDomainPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomDomainPolicy(
    request: DeepPartial<UpdateCustomDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomDomainPolicyResponse> {
    return this.rpc.unary(
      AdminServiceUpdateCustomDomainPolicyDesc,
      UpdateCustomDomainPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomDomainPolicyToDefault(
    request: DeepPartial<ResetCustomDomainPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomDomainPolicyToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomDomainPolicyToDefaultDesc,
      ResetCustomDomainPolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetLabelPolicy(
    request: DeepPartial<GetLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLabelPolicyResponse> {
    return this.rpc.unary(AdminServiceGetLabelPolicyDesc, GetLabelPolicyRequest.fromPartial(request), metadata);
  }

  GetPreviewLabelPolicy(
    request: DeepPartial<GetPreviewLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPreviewLabelPolicyResponse> {
    return this.rpc.unary(
      AdminServiceGetPreviewLabelPolicyDesc,
      GetPreviewLabelPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateLabelPolicy(
    request: DeepPartial<UpdateLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLabelPolicyResponse> {
    return this.rpc.unary(AdminServiceUpdateLabelPolicyDesc, UpdateLabelPolicyRequest.fromPartial(request), metadata);
  }

  ActivateLabelPolicy(
    request: DeepPartial<ActivateLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ActivateLabelPolicyResponse> {
    return this.rpc.unary(
      AdminServiceActivateLabelPolicyDesc,
      ActivateLabelPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveLabelPolicyLogo(
    request: DeepPartial<RemoveLabelPolicyLogoRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyLogoResponse> {
    return this.rpc.unary(
      AdminServiceRemoveLabelPolicyLogoDesc,
      RemoveLabelPolicyLogoRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveLabelPolicyLogoDark(
    request: DeepPartial<RemoveLabelPolicyLogoDarkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyLogoDarkResponse> {
    return this.rpc.unary(
      AdminServiceRemoveLabelPolicyLogoDarkDesc,
      RemoveLabelPolicyLogoDarkRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveLabelPolicyIcon(
    request: DeepPartial<RemoveLabelPolicyIconRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyIconResponse> {
    return this.rpc.unary(
      AdminServiceRemoveLabelPolicyIconDesc,
      RemoveLabelPolicyIconRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveLabelPolicyIconDark(
    request: DeepPartial<RemoveLabelPolicyIconDarkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyIconDarkResponse> {
    return this.rpc.unary(
      AdminServiceRemoveLabelPolicyIconDarkDesc,
      RemoveLabelPolicyIconDarkRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveLabelPolicyFont(
    request: DeepPartial<RemoveLabelPolicyFontRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveLabelPolicyFontResponse> {
    return this.rpc.unary(
      AdminServiceRemoveLabelPolicyFontDesc,
      RemoveLabelPolicyFontRequest.fromPartial(request),
      metadata,
    );
  }

  GetLoginPolicy(
    request: DeepPartial<GetLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLoginPolicyResponse> {
    return this.rpc.unary(AdminServiceGetLoginPolicyDesc, GetLoginPolicyRequest.fromPartial(request), metadata);
  }

  UpdateLoginPolicy(
    request: DeepPartial<UpdateLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLoginPolicyResponse> {
    return this.rpc.unary(AdminServiceUpdateLoginPolicyDesc, UpdateLoginPolicyRequest.fromPartial(request), metadata);
  }

  ListLoginPolicyIDPs(
    request: DeepPartial<ListLoginPolicyIDPsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicyIDPsResponse> {
    return this.rpc.unary(
      AdminServiceListLoginPolicyIDPsDesc,
      ListLoginPolicyIDPsRequest.fromPartial(request),
      metadata,
    );
  }

  AddIDPToLoginPolicy(
    request: DeepPartial<AddIDPToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddIDPToLoginPolicyResponse> {
    return this.rpc.unary(
      AdminServiceAddIDPToLoginPolicyDesc,
      AddIDPToLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveIDPFromLoginPolicy(
    request: DeepPartial<RemoveIDPFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveIDPFromLoginPolicyResponse> {
    return this.rpc.unary(
      AdminServiceRemoveIDPFromLoginPolicyDesc,
      RemoveIDPFromLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ListLoginPolicySecondFactors(
    request: DeepPartial<ListLoginPolicySecondFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicySecondFactorsResponse> {
    return this.rpc.unary(
      AdminServiceListLoginPolicySecondFactorsDesc,
      ListLoginPolicySecondFactorsRequest.fromPartial(request),
      metadata,
    );
  }

  AddSecondFactorToLoginPolicy(
    request: DeepPartial<AddSecondFactorToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddSecondFactorToLoginPolicyResponse> {
    return this.rpc.unary(
      AdminServiceAddSecondFactorToLoginPolicyDesc,
      AddSecondFactorToLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveSecondFactorFromLoginPolicy(
    request: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveSecondFactorFromLoginPolicyResponse> {
    return this.rpc.unary(
      AdminServiceRemoveSecondFactorFromLoginPolicyDesc,
      RemoveSecondFactorFromLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ListLoginPolicyMultiFactors(
    request: DeepPartial<ListLoginPolicyMultiFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicyMultiFactorsResponse> {
    return this.rpc.unary(
      AdminServiceListLoginPolicyMultiFactorsDesc,
      ListLoginPolicyMultiFactorsRequest.fromPartial(request),
      metadata,
    );
  }

  AddMultiFactorToLoginPolicy(
    request: DeepPartial<AddMultiFactorToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddMultiFactorToLoginPolicyResponse> {
    return this.rpc.unary(
      AdminServiceAddMultiFactorToLoginPolicyDesc,
      AddMultiFactorToLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveMultiFactorFromLoginPolicy(
    request: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveMultiFactorFromLoginPolicyResponse> {
    return this.rpc.unary(
      AdminServiceRemoveMultiFactorFromLoginPolicyDesc,
      RemoveMultiFactorFromLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetPasswordComplexityPolicy(
    request: DeepPartial<GetPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPasswordComplexityPolicyResponse> {
    return this.rpc.unary(
      AdminServiceGetPasswordComplexityPolicyDesc,
      GetPasswordComplexityPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdatePasswordComplexityPolicy(
    request: DeepPartial<UpdatePasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdatePasswordComplexityPolicyResponse> {
    return this.rpc.unary(
      AdminServiceUpdatePasswordComplexityPolicyDesc,
      UpdatePasswordComplexityPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetPasswordAgePolicy(
    request: DeepPartial<GetPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPasswordAgePolicyResponse> {
    return this.rpc.unary(
      AdminServiceGetPasswordAgePolicyDesc,
      GetPasswordAgePolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdatePasswordAgePolicy(
    request: DeepPartial<UpdatePasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdatePasswordAgePolicyResponse> {
    return this.rpc.unary(
      AdminServiceUpdatePasswordAgePolicyDesc,
      UpdatePasswordAgePolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetLockoutPolicy(
    request: DeepPartial<GetLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLockoutPolicyResponse> {
    return this.rpc.unary(AdminServiceGetLockoutPolicyDesc, GetLockoutPolicyRequest.fromPartial(request), metadata);
  }

  UpdateLockoutPolicy(
    request: DeepPartial<UpdateLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLockoutPolicyResponse> {
    return this.rpc.unary(
      AdminServiceUpdateLockoutPolicyDesc,
      UpdateLockoutPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetPrivacyPolicy(
    request: DeepPartial<GetPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPrivacyPolicyResponse> {
    return this.rpc.unary(AdminServiceGetPrivacyPolicyDesc, GetPrivacyPolicyRequest.fromPartial(request), metadata);
  }

  UpdatePrivacyPolicy(
    request: DeepPartial<UpdatePrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdatePrivacyPolicyResponse> {
    return this.rpc.unary(
      AdminServiceUpdatePrivacyPolicyDesc,
      UpdatePrivacyPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddNotificationPolicy(
    request: DeepPartial<AddNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddNotificationPolicyResponse> {
    return this.rpc.unary(
      AdminServiceAddNotificationPolicyDesc,
      AddNotificationPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetNotificationPolicy(
    request: DeepPartial<GetNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetNotificationPolicyResponse> {
    return this.rpc.unary(
      AdminServiceGetNotificationPolicyDesc,
      GetNotificationPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateNotificationPolicy(
    request: DeepPartial<UpdateNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateNotificationPolicyResponse> {
    return this.rpc.unary(
      AdminServiceUpdateNotificationPolicyDesc,
      UpdateNotificationPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultInitMessageText(
    request: DeepPartial<GetDefaultInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultInitMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetDefaultInitMessageTextDesc,
      GetDefaultInitMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomInitMessageText(
    request: DeepPartial<GetCustomInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomInitMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomInitMessageTextDesc,
      GetCustomInitMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetDefaultInitMessageText(
    request: DeepPartial<SetDefaultInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultInitMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceSetDefaultInitMessageTextDesc,
      SetDefaultInitMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomInitMessageTextToDefault(
    request: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomInitMessageTextToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomInitMessageTextToDefaultDesc,
      ResetCustomInitMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPasswordResetMessageText(
    request: DeepPartial<GetDefaultPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordResetMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetDefaultPasswordResetMessageTextDesc,
      GetDefaultPasswordResetMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomPasswordResetMessageText(
    request: DeepPartial<GetCustomPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordResetMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomPasswordResetMessageTextDesc,
      GetCustomPasswordResetMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetDefaultPasswordResetMessageText(
    request: DeepPartial<SetDefaultPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultPasswordResetMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceSetDefaultPasswordResetMessageTextDesc,
      SetDefaultPasswordResetMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomPasswordResetMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordResetMessageTextToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomPasswordResetMessageTextToDefaultDesc,
      ResetCustomPasswordResetMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultVerifyEmailMessageText(
    request: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultVerifyEmailMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetDefaultVerifyEmailMessageTextDesc,
      GetDefaultVerifyEmailMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomVerifyEmailMessageText(
    request: DeepPartial<GetCustomVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomVerifyEmailMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomVerifyEmailMessageTextDesc,
      GetCustomVerifyEmailMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetDefaultVerifyEmailMessageText(
    request: DeepPartial<SetDefaultVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultVerifyEmailMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceSetDefaultVerifyEmailMessageTextDesc,
      SetDefaultVerifyEmailMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomVerifyEmailMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomVerifyEmailMessageTextToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomVerifyEmailMessageTextToDefaultDesc,
      ResetCustomVerifyEmailMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultVerifyPhoneMessageText(
    request: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultVerifyPhoneMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetDefaultVerifyPhoneMessageTextDesc,
      GetDefaultVerifyPhoneMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomVerifyPhoneMessageText(
    request: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomVerifyPhoneMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomVerifyPhoneMessageTextDesc,
      GetCustomVerifyPhoneMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetDefaultVerifyPhoneMessageText(
    request: DeepPartial<SetDefaultVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultVerifyPhoneMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceSetDefaultVerifyPhoneMessageTextDesc,
      SetDefaultVerifyPhoneMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomVerifyPhoneMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomVerifyPhoneMessageTextToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomVerifyPhoneMessageTextToDefaultDesc,
      ResetCustomVerifyPhoneMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultDomainClaimedMessageText(
    request: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultDomainClaimedMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetDefaultDomainClaimedMessageTextDesc,
      GetDefaultDomainClaimedMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomDomainClaimedMessageText(
    request: DeepPartial<GetCustomDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomDomainClaimedMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomDomainClaimedMessageTextDesc,
      GetCustomDomainClaimedMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetDefaultDomainClaimedMessageText(
    request: DeepPartial<SetDefaultDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultDomainClaimedMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceSetDefaultDomainClaimedMessageTextDesc,
      SetDefaultDomainClaimedMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomDomainClaimedMessageTextToDefault(
    request: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomDomainClaimedMessageTextToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomDomainClaimedMessageTextToDefaultDesc,
      ResetCustomDomainClaimedMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordlessRegistrationMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetDefaultPasswordlessRegistrationMessageTextDesc,
      GetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomPasswordlessRegistrationMessageText(
    request: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordlessRegistrationMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomPasswordlessRegistrationMessageTextDesc,
      GetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<SetDefaultPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultPasswordlessRegistrationMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceSetDefaultPasswordlessRegistrationMessageTextDesc,
      SetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomPasswordlessRegistrationMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomPasswordlessRegistrationMessageTextToDefaultDesc,
      ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPasswordChangeMessageText(
    request: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordChangeMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetDefaultPasswordChangeMessageTextDesc,
      GetDefaultPasswordChangeMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomPasswordChangeMessageText(
    request: DeepPartial<GetCustomPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordChangeMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomPasswordChangeMessageTextDesc,
      GetCustomPasswordChangeMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetDefaultPasswordChangeMessageText(
    request: DeepPartial<SetDefaultPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetDefaultPasswordChangeMessageTextResponse> {
    return this.rpc.unary(
      AdminServiceSetDefaultPasswordChangeMessageTextDesc,
      SetDefaultPasswordChangeMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomPasswordChangeMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordChangeMessageTextToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomPasswordChangeMessageTextToDefaultDesc,
      ResetCustomPasswordChangeMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultLoginTexts(
    request: DeepPartial<GetDefaultLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLoginTextsResponse> {
    return this.rpc.unary(
      AdminServiceGetDefaultLoginTextsDesc,
      GetDefaultLoginTextsRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomLoginTexts(
    request: DeepPartial<GetCustomLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomLoginTextsResponse> {
    return this.rpc.unary(
      AdminServiceGetCustomLoginTextsDesc,
      GetCustomLoginTextsRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomLoginText(
    request: DeepPartial<SetCustomLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomLoginTextsResponse> {
    return this.rpc.unary(
      AdminServiceSetCustomLoginTextDesc,
      SetCustomLoginTextsRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomLoginTextToDefault(
    request: DeepPartial<ResetCustomLoginTextsToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomLoginTextsToDefaultResponse> {
    return this.rpc.unary(
      AdminServiceResetCustomLoginTextToDefaultDesc,
      ResetCustomLoginTextsToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  ListIAMMemberRoles(
    request: DeepPartial<ListIAMMemberRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListIAMMemberRolesResponse> {
    return this.rpc.unary(AdminServiceListIAMMemberRolesDesc, ListIAMMemberRolesRequest.fromPartial(request), metadata);
  }

  ListIAMMembers(
    request: DeepPartial<ListIAMMembersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListIAMMembersResponse> {
    return this.rpc.unary(AdminServiceListIAMMembersDesc, ListIAMMembersRequest.fromPartial(request), metadata);
  }

  AddIAMMember(request: DeepPartial<AddIAMMemberRequest>, metadata?: grpc.Metadata): Promise<AddIAMMemberResponse> {
    return this.rpc.unary(AdminServiceAddIAMMemberDesc, AddIAMMemberRequest.fromPartial(request), metadata);
  }

  UpdateIAMMember(
    request: DeepPartial<UpdateIAMMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateIAMMemberResponse> {
    return this.rpc.unary(AdminServiceUpdateIAMMemberDesc, UpdateIAMMemberRequest.fromPartial(request), metadata);
  }

  RemoveIAMMember(
    request: DeepPartial<RemoveIAMMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveIAMMemberResponse> {
    return this.rpc.unary(AdminServiceRemoveIAMMemberDesc, RemoveIAMMemberRequest.fromPartial(request), metadata);
  }

  ListViews(request: DeepPartial<ListViewsRequest>, metadata?: grpc.Metadata): Promise<ListViewsResponse> {
    return this.rpc.unary(AdminServiceListViewsDesc, ListViewsRequest.fromPartial(request), metadata);
  }

  ListFailedEvents(
    request: DeepPartial<ListFailedEventsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListFailedEventsResponse> {
    return this.rpc.unary(AdminServiceListFailedEventsDesc, ListFailedEventsRequest.fromPartial(request), metadata);
  }

  RemoveFailedEvent(
    request: DeepPartial<RemoveFailedEventRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveFailedEventResponse> {
    return this.rpc.unary(AdminServiceRemoveFailedEventDesc, RemoveFailedEventRequest.fromPartial(request), metadata);
  }

  ImportData(request: DeepPartial<ImportDataRequest>, metadata?: grpc.Metadata): Promise<ImportDataResponse> {
    return this.rpc.unary(AdminServiceImportDataDesc, ImportDataRequest.fromPartial(request), metadata);
  }

  ExportData(request: DeepPartial<ExportDataRequest>, metadata?: grpc.Metadata): Promise<ExportDataResponse> {
    return this.rpc.unary(AdminServiceExportDataDesc, ExportDataRequest.fromPartial(request), metadata);
  }

  ListEventTypes(
    request: DeepPartial<ListEventTypesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListEventTypesResponse> {
    return this.rpc.unary(AdminServiceListEventTypesDesc, ListEventTypesRequest.fromPartial(request), metadata);
  }

  ListEvents(request: DeepPartial<ListEventsRequest>, metadata?: grpc.Metadata): Promise<ListEventsResponse> {
    return this.rpc.unary(AdminServiceListEventsDesc, ListEventsRequest.fromPartial(request), metadata);
  }

  ListAggregateTypes(
    request: DeepPartial<ListAggregateTypesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListAggregateTypesResponse> {
    return this.rpc.unary(AdminServiceListAggregateTypesDesc, ListAggregateTypesRequest.fromPartial(request), metadata);
  }
}

export const AdminServiceDesc = { serviceName: "zitadel.admin.v1.AdminService" };

export const AdminServiceHealthzDesc: UnaryMethodDefinitionish = {
  methodName: "Healthz",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return HealthzRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = HealthzResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetSupportedLanguagesDesc: UnaryMethodDefinitionish = {
  methodName: "GetSupportedLanguages",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetSupportedLanguagesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetSupportedLanguagesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultLanguageDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultLanguage",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultLanguageRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultLanguageResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultLanguageDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultLanguage",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultLanguageRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultLanguageResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetMyInstanceDesc: UnaryMethodDefinitionish = {
  methodName: "GetMyInstance",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetMyInstanceRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetMyInstanceResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListInstanceDomainsDesc: UnaryMethodDefinitionish = {
  methodName: "ListInstanceDomains",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListInstanceDomainsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListInstanceDomainsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListSecretGeneratorsDesc: UnaryMethodDefinitionish = {
  methodName: "ListSecretGenerators",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListSecretGeneratorsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListSecretGeneratorsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetSecretGeneratorDesc: UnaryMethodDefinitionish = {
  methodName: "GetSecretGenerator",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetSecretGeneratorRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetSecretGeneratorResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateSecretGeneratorDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateSecretGenerator",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateSecretGeneratorRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateSecretGeneratorResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetSMTPConfigDesc: UnaryMethodDefinitionish = {
  methodName: "GetSMTPConfig",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetSMTPConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetSMTPConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddSMTPConfigDesc: UnaryMethodDefinitionish = {
  methodName: "AddSMTPConfig",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddSMTPConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddSMTPConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateSMTPConfigDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateSMTPConfig",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateSMTPConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateSMTPConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateSMTPConfigPasswordDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateSMTPConfigPassword",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateSMTPConfigPasswordRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateSMTPConfigPasswordResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveSMTPConfigDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveSMTPConfig",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveSMTPConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveSMTPConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListSMSProvidersDesc: UnaryMethodDefinitionish = {
  methodName: "ListSMSProviders",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListSMSProvidersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListSMSProvidersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetSMSProviderDesc: UnaryMethodDefinitionish = {
  methodName: "GetSMSProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetSMSProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetSMSProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddSMSProviderTwilioDesc: UnaryMethodDefinitionish = {
  methodName: "AddSMSProviderTwilio",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddSMSProviderTwilioRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddSMSProviderTwilioResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateSMSProviderTwilioDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateSMSProviderTwilio",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateSMSProviderTwilioRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateSMSProviderTwilioResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateSMSProviderTwilioTokenDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateSMSProviderTwilioToken",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateSMSProviderTwilioTokenRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateSMSProviderTwilioTokenResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceActivateSMSProviderDesc: UnaryMethodDefinitionish = {
  methodName: "ActivateSMSProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ActivateSMSProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ActivateSMSProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceDeactivateSMSProviderDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateSMSProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateSMSProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateSMSProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveSMSProviderDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveSMSProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveSMSProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveSMSProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetOIDCSettingsDesc: UnaryMethodDefinitionish = {
  methodName: "GetOIDCSettings",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetOIDCSettingsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetOIDCSettingsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddOIDCSettingsDesc: UnaryMethodDefinitionish = {
  methodName: "AddOIDCSettings",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddOIDCSettingsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddOIDCSettingsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateOIDCSettingsDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateOIDCSettings",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateOIDCSettingsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateOIDCSettingsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetFileSystemNotificationProviderDesc: UnaryMethodDefinitionish = {
  methodName: "GetFileSystemNotificationProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetFileSystemNotificationProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetFileSystemNotificationProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetLogNotificationProviderDesc: UnaryMethodDefinitionish = {
  methodName: "GetLogNotificationProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLogNotificationProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLogNotificationProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetSecurityPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetSecurityPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetSecurityPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetSecurityPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetSecurityPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "SetSecurityPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetSecurityPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetSecurityPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetOrgByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetOrgByID",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetOrgByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetOrgByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceIsOrgUniqueDesc: UnaryMethodDefinitionish = {
  methodName: "IsOrgUnique",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return IsOrgUniqueRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = IsOrgUniqueResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultOrgDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultOrg",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultOrgDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultOrg",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListOrgsDesc: UnaryMethodDefinitionish = {
  methodName: "ListOrgs",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListOrgsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListOrgsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetUpOrgDesc: UnaryMethodDefinitionish = {
  methodName: "SetUpOrg",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetUpOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetUpOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveOrgDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveOrg",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetIDPByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetIDPByID",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetIDPByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetIDPByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListIDPsDesc: UnaryMethodDefinitionish = {
  methodName: "ListIDPs",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListIDPsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListIDPsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddOIDCIDPDesc: UnaryMethodDefinitionish = {
  methodName: "AddOIDCIDP",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddOIDCIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddOIDCIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddJWTIDPDesc: UnaryMethodDefinitionish = {
  methodName: "AddJWTIDP",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddJWTIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddJWTIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateIDPDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateIDP",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceDeactivateIDPDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateIDP",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceReactivateIDPDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateIDP",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveIDPDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveIDP",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateIDPOIDCConfigDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateIDPOIDCConfig",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateIDPOIDCConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateIDPOIDCConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateIDPJWTConfigDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateIDPJWTConfig",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateIDPJWTConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateIDPJWTConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListProvidersDesc: UnaryMethodDefinitionish = {
  methodName: "ListProviders",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProvidersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProvidersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetProviderByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetProviderByID",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetProviderByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetProviderByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddGenericOAuthProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGenericOAuthProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGenericOAuthProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGenericOAuthProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateGenericOAuthProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGenericOAuthProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGenericOAuthProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGenericOAuthProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddGenericOIDCProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGenericOIDCProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGenericOIDCProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGenericOIDCProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateGenericOIDCProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGenericOIDCProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGenericOIDCProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGenericOIDCProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceMigrateGenericOIDCProviderDesc: UnaryMethodDefinitionish = {
  methodName: "MigrateGenericOIDCProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MigrateGenericOIDCProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MigrateGenericOIDCProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddJWTProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddJWTProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddJWTProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddJWTProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateJWTProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateJWTProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateJWTProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateJWTProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddAzureADProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddAzureADProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddAzureADProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddAzureADProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateAzureADProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateAzureADProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateAzureADProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateAzureADProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddGitHubProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGitHubProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGitHubProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGitHubProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateGitHubProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGitHubProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGitHubProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGitHubProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddGitHubEnterpriseServerProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGitHubEnterpriseServerProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGitHubEnterpriseServerProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGitHubEnterpriseServerProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateGitHubEnterpriseServerProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGitHubEnterpriseServerProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGitHubEnterpriseServerProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGitHubEnterpriseServerProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddGitLabProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGitLabProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGitLabProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGitLabProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateGitLabProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGitLabProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGitLabProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGitLabProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddGitLabSelfHostedProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGitLabSelfHostedProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGitLabSelfHostedProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGitLabSelfHostedProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateGitLabSelfHostedProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGitLabSelfHostedProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGitLabSelfHostedProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGitLabSelfHostedProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddGoogleProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGoogleProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGoogleProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGoogleProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateGoogleProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGoogleProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGoogleProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGoogleProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddLDAPProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddLDAPProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddLDAPProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddLDAPProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateLDAPProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateLDAPProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateLDAPProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateLDAPProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceDeleteProviderDesc: UnaryMethodDefinitionish = {
  methodName: "DeleteProvider",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeleteProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeleteProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetOrgIAMPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetOrgIAMPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetOrgIAMPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetOrgIAMPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateOrgIAMPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateOrgIAMPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateOrgIAMPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateOrgIAMPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomOrgIAMPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomOrgIAMPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomOrgIAMPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomOrgIAMPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddCustomOrgIAMPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomOrgIAMPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomOrgIAMPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomOrgIAMPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateCustomOrgIAMPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomOrgIAMPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomOrgIAMPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomOrgIAMPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomOrgIAMPolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomOrgIAMPolicyToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomOrgIAMPolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomOrgIAMPolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDomainPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDomainPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDomainPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDomainPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateDomainPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateDomainPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateDomainPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateDomainPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomDomainPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomDomainPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomDomainPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomDomainPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddCustomDomainPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomDomainPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomDomainPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomDomainPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateCustomDomainPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomDomainPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomDomainPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomDomainPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomDomainPolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomDomainPolicyToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomDomainPolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomDomainPolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetLabelPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetPreviewLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetPreviewLabelPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPreviewLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPreviewLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateLabelPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceActivateLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "ActivateLabelPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ActivateLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ActivateLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveLabelPolicyLogoDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveLabelPolicyLogo",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveLabelPolicyLogoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveLabelPolicyLogoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveLabelPolicyLogoDarkDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveLabelPolicyLogoDark",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveLabelPolicyLogoDarkRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveLabelPolicyLogoDarkResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveLabelPolicyIconDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveLabelPolicyIcon",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveLabelPolicyIconRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveLabelPolicyIconResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveLabelPolicyIconDarkDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveLabelPolicyIconDark",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveLabelPolicyIconDarkRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveLabelPolicyIconDarkResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveLabelPolicyFontDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveLabelPolicyFont",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveLabelPolicyFontRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveLabelPolicyFontResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetLoginPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateLoginPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListLoginPolicyIDPsDesc: UnaryMethodDefinitionish = {
  methodName: "ListLoginPolicyIDPs",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLoginPolicyIDPsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLoginPolicyIDPsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddIDPToLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddIDPToLoginPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddIDPToLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddIDPToLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveIDPFromLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveIDPFromLoginPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveIDPFromLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveIDPFromLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListLoginPolicySecondFactorsDesc: UnaryMethodDefinitionish = {
  methodName: "ListLoginPolicySecondFactors",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLoginPolicySecondFactorsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLoginPolicySecondFactorsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddSecondFactorToLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddSecondFactorToLoginPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddSecondFactorToLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddSecondFactorToLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveSecondFactorFromLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveSecondFactorFromLoginPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveSecondFactorFromLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveSecondFactorFromLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListLoginPolicyMultiFactorsDesc: UnaryMethodDefinitionish = {
  methodName: "ListLoginPolicyMultiFactors",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLoginPolicyMultiFactorsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLoginPolicyMultiFactorsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddMultiFactorToLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddMultiFactorToLoginPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddMultiFactorToLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddMultiFactorToLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveMultiFactorFromLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveMultiFactorFromLoginPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveMultiFactorFromLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveMultiFactorFromLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetPasswordComplexityPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetPasswordComplexityPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPasswordComplexityPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPasswordComplexityPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdatePasswordComplexityPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdatePasswordComplexityPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdatePasswordComplexityPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdatePasswordComplexityPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetPasswordAgePolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetPasswordAgePolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPasswordAgePolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPasswordAgePolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdatePasswordAgePolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdatePasswordAgePolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdatePasswordAgePolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdatePasswordAgePolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetLockoutPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetLockoutPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLockoutPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLockoutPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateLockoutPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateLockoutPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateLockoutPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateLockoutPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetPrivacyPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetPrivacyPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPrivacyPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPrivacyPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdatePrivacyPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdatePrivacyPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdatePrivacyPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdatePrivacyPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddNotificationPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddNotificationPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddNotificationPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddNotificationPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetNotificationPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetNotificationPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetNotificationPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetNotificationPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateNotificationPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateNotificationPolicy",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateNotificationPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateNotificationPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultInitMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultInitMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultInitMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultInitMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomInitMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomInitMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomInitMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomInitMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultInitMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultInitMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultInitMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultInitMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomInitMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomInitMessageTextToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomInitMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomInitMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultPasswordResetMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPasswordResetMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPasswordResetMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPasswordResetMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomPasswordResetMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomPasswordResetMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomPasswordResetMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomPasswordResetMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultPasswordResetMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultPasswordResetMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultPasswordResetMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultPasswordResetMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomPasswordResetMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomPasswordResetMessageTextToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomPasswordResetMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomPasswordResetMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultVerifyEmailMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultVerifyEmailMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultVerifyEmailMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultVerifyEmailMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomVerifyEmailMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomVerifyEmailMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomVerifyEmailMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomVerifyEmailMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultVerifyEmailMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultVerifyEmailMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultVerifyEmailMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultVerifyEmailMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomVerifyEmailMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomVerifyEmailMessageTextToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomVerifyEmailMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomVerifyEmailMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultVerifyPhoneMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultVerifyPhoneMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultVerifyPhoneMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultVerifyPhoneMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomVerifyPhoneMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomVerifyPhoneMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomVerifyPhoneMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomVerifyPhoneMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultVerifyPhoneMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultVerifyPhoneMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultVerifyPhoneMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultVerifyPhoneMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomVerifyPhoneMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomVerifyPhoneMessageTextToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomVerifyPhoneMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomVerifyPhoneMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultDomainClaimedMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultDomainClaimedMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultDomainClaimedMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultDomainClaimedMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomDomainClaimedMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomDomainClaimedMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomDomainClaimedMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomDomainClaimedMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultDomainClaimedMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultDomainClaimedMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultDomainClaimedMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultDomainClaimedMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomDomainClaimedMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomDomainClaimedMessageTextToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomDomainClaimedMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomDomainClaimedMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultPasswordlessRegistrationMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPasswordlessRegistrationMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPasswordlessRegistrationMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPasswordlessRegistrationMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomPasswordlessRegistrationMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomPasswordlessRegistrationMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomPasswordlessRegistrationMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomPasswordlessRegistrationMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultPasswordlessRegistrationMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultPasswordlessRegistrationMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultPasswordlessRegistrationMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultPasswordlessRegistrationMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomPasswordlessRegistrationMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultPasswordChangeMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPasswordChangeMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPasswordChangeMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPasswordChangeMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomPasswordChangeMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomPasswordChangeMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomPasswordChangeMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomPasswordChangeMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetDefaultPasswordChangeMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetDefaultPasswordChangeMessageText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetDefaultPasswordChangeMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetDefaultPasswordChangeMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomPasswordChangeMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomPasswordChangeMessageTextToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomPasswordChangeMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomPasswordChangeMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetDefaultLoginTextsDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultLoginTexts",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultLoginTextsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultLoginTextsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceGetCustomLoginTextsDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomLoginTexts",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomLoginTextsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomLoginTextsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceSetCustomLoginTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomLoginText",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomLoginTextsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomLoginTextsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceResetCustomLoginTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomLoginTextToDefault",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomLoginTextsToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomLoginTextsToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListIAMMemberRolesDesc: UnaryMethodDefinitionish = {
  methodName: "ListIAMMemberRoles",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListIAMMemberRolesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListIAMMemberRolesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListIAMMembersDesc: UnaryMethodDefinitionish = {
  methodName: "ListIAMMembers",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListIAMMembersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListIAMMembersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceAddIAMMemberDesc: UnaryMethodDefinitionish = {
  methodName: "AddIAMMember",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddIAMMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddIAMMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceUpdateIAMMemberDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateIAMMember",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateIAMMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateIAMMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveIAMMemberDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveIAMMember",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveIAMMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveIAMMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListViewsDesc: UnaryMethodDefinitionish = {
  methodName: "ListViews",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListViewsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListViewsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListFailedEventsDesc: UnaryMethodDefinitionish = {
  methodName: "ListFailedEvents",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListFailedEventsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListFailedEventsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceRemoveFailedEventDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveFailedEvent",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveFailedEventRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveFailedEventResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceImportDataDesc: UnaryMethodDefinitionish = {
  methodName: "ImportData",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ImportDataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ImportDataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceExportDataDesc: UnaryMethodDefinitionish = {
  methodName: "ExportData",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ExportDataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ExportDataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListEventTypesDesc: UnaryMethodDefinitionish = {
  methodName: "ListEventTypes",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListEventTypesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListEventTypesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListEventsDesc: UnaryMethodDefinitionish = {
  methodName: "ListEvents",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListEventsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListEventsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AdminServiceListAggregateTypesDesc: UnaryMethodDefinitionish = {
  methodName: "ListAggregateTypes",
  service: AdminServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListAggregateTypesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListAggregateTypesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = date.getTime() / 1_000;
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof Date) {
    return o;
  } else if (typeof o === "string") {
    return new Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
