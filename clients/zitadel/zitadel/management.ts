/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Duration } from "../google/protobuf/duration";
import { Timestamp } from "../google/protobuf/timestamp";
import {
  Action,
  ActionFieldName,
  actionFieldNameFromJSON,
  actionFieldNameToJSON,
  ActionIDQuery,
  ActionNameQuery,
  ActionStateQuery,
  Flow,
  FlowType,
  TriggerType,
} from "./action";
import {
  APIAuthMethodType,
  aPIAuthMethodTypeFromJSON,
  aPIAuthMethodTypeToJSON,
  App,
  AppQuery,
  OIDCAppType,
  oIDCAppTypeFromJSON,
  oIDCAppTypeToJSON,
  OIDCAuthMethodType,
  oIDCAuthMethodTypeFromJSON,
  oIDCAuthMethodTypeToJSON,
  OIDCGrantType,
  oIDCGrantTypeFromJSON,
  oIDCGrantTypeToJSON,
  OIDCResponseType,
  oIDCResponseTypeFromJSON,
  oIDCResponseTypeToJSON,
  OIDCTokenType,
  oIDCTokenTypeFromJSON,
  oIDCTokenTypeToJSON,
  OIDCVersion,
  oIDCVersionFromJSON,
  oIDCVersionToJSON,
} from "./app";
import { Key, KeyType, keyTypeFromJSON, keyTypeToJSON } from "./auth_n_key";
import { Change, ChangeQuery } from "./change";
import {
  AzureADTenant,
  IDP,
  IDPFieldName,
  iDPFieldNameFromJSON,
  iDPFieldNameToJSON,
  IDPIDQuery,
  IDPLoginPolicyLink,
  IDPNameQuery,
  IDPOwnerType,
  iDPOwnerTypeFromJSON,
  IDPOwnerTypeQuery,
  iDPOwnerTypeToJSON,
  IDPStylingType,
  iDPStylingTypeFromJSON,
  iDPStylingTypeToJSON,
  IDPUserLink,
  LDAPAttributes,
  OIDCMappingField,
  oIDCMappingFieldFromJSON,
  oIDCMappingFieldToJSON,
  Options,
  Provider,
} from "./idp";
import { Member, SearchQuery as SearchQuery1 } from "./member";
import { LocalizedMessage } from "./message";
import { Metadata, MetadataQuery } from "./metadata";
import { ListDetails, ListQuery, ObjectDetails } from "./object";
import {
  Domain,
  DomainSearchQuery,
  DomainValidationType,
  domainValidationTypeFromJSON,
  domainValidationTypeToJSON,
  Org,
} from "./org";
import {
  DomainPolicy,
  LabelPolicy,
  LockoutPolicy,
  LoginPolicy,
  MultiFactorType,
  multiFactorTypeFromJSON,
  multiFactorTypeToJSON,
  NotificationPolicy,
  OrgIAMPolicy,
  PasswordAgePolicy,
  PasswordComplexityPolicy,
  PasswordlessType,
  passwordlessTypeFromJSON,
  passwordlessTypeToJSON,
  PrivacyPolicy,
  SecondFactorType,
  secondFactorTypeFromJSON,
  secondFactorTypeToJSON,
} from "./policy";
import {
  AllProjectGrantQuery,
  GrantedProject,
  PrivateLabelingSetting,
  privateLabelingSettingFromJSON,
  privateLabelingSettingToJSON,
  Project,
  ProjectGrantQuery,
  ProjectQuery,
  Role,
  RoleQuery,
} from "./project";
import {
  EmailVerificationDoneScreenText,
  EmailVerificationScreenText,
  ExternalRegistrationUserOverviewScreenText,
  ExternalUserNotFoundScreenText,
  FooterText,
  InitializeUserDoneScreenText,
  InitializeUserScreenText,
  InitMFADoneScreenText,
  InitMFAOTPScreenText,
  InitMFAPromptScreenText,
  InitMFAU2FScreenText,
  InitPasswordDoneScreenText,
  InitPasswordScreenText,
  LinkingUserDoneScreenText,
  LoginCustomText,
  LoginScreenText,
  LogoutDoneScreenText,
  MessageCustomText,
  MFAProvidersText,
  PasswordChangeDoneScreenText,
  PasswordChangeScreenText,
  PasswordlessPromptScreenText,
  PasswordlessRegistrationDoneScreenText,
  PasswordlessRegistrationScreenText,
  PasswordlessScreenText,
  PasswordResetDoneScreenText,
  PasswordScreenText,
  RegistrationOptionScreenText,
  RegistrationOrgScreenText,
  RegistrationUserScreenText,
  SelectAccountScreenText,
  SuccessLoginScreenText,
  UsernameChangeDoneScreenText,
  UsernameChangeScreenText,
  VerifyMFAOTPScreenText,
  VerifyMFAU2FScreenText,
} from "./text";
import {
  AccessTokenType,
  accessTokenTypeFromJSON,
  accessTokenTypeToJSON,
  AuthFactor,
  Email,
  Gender,
  genderFromJSON,
  genderToJSON,
  Membership,
  MembershipQuery,
  PersonalAccessToken,
  Phone,
  Profile,
  SearchQuery,
  User,
  UserFieldName,
  userFieldNameFromJSON,
  userFieldNameToJSON,
  UserGrant,
  UserGrantQuery,
  WebAuthNToken,
} from "./user";

export const protobufPackage = "zitadel.management.v1";

/** This is an empty request */
export interface HealthzRequest {
}

/** This is an empty response */
export interface HealthzResponse {
}

/** This is an empty request */
export interface GetOIDCInformationRequest {
}

export interface GetOIDCInformationResponse {
  issuer: string;
  discoveryEndpoint: string;
}

/** This is an empty request */
export interface GetIAMRequest {
}

export interface GetIAMResponse {
  /** deprecated: use default_org_id instead */
  globalOrgId: string;
  iamProjectId: string;
  defaultOrgId: string;
}

/** This is an empty request */
export interface GetSupportedLanguagesRequest {
}

export interface GetSupportedLanguagesResponse {
  languages: string[];
}

export interface GetUserByIDRequest {
  id: string;
}

export interface GetUserByIDResponse {
  user: User | undefined;
}

export interface GetUserByLoginNameGlobalRequest {
  loginName: string;
}

export interface GetUserByLoginNameGlobalResponse {
  user: User | undefined;
}

export interface ListUsersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: UserFieldName;
  /** criteria the client is looking for */
  queries: SearchQuery[];
}

export interface ListUsersResponse {
  details: ListDetails | undefined;
  sortingColumn: UserFieldName;
  result: User[];
}

export interface ListUserChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
  userId: string;
}

export interface ListUserChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface IsUserUniqueRequest {
  userName: string;
  email: string;
}

export interface IsUserUniqueResponse {
  isUnique: boolean;
}

export interface AddHumanUserRequest {
  userName: string;
  profile: AddHumanUserRequest_Profile | undefined;
  email: AddHumanUserRequest_Email | undefined;
  phone: AddHumanUserRequest_Phone | undefined;
  initialPassword: string;
}

export interface AddHumanUserRequest_Profile {
  firstName: string;
  lastName: string;
  nickName: string;
  displayName: string;
  preferredLanguage: string;
  gender: Gender;
}

export interface AddHumanUserRequest_Email {
  email: string;
  isEmailVerified: boolean;
}

export interface AddHumanUserRequest_Phone {
  /** has to be a global number */
  phone: string;
  isPhoneVerified: boolean;
}

export interface AddHumanUserResponse {
  userId: string;
  details: ObjectDetails | undefined;
}

/** Describe my Import Human User Request */
export interface ImportHumanUserRequest {
  userName: string;
  profile: ImportHumanUserRequest_Profile | undefined;
  email: ImportHumanUserRequest_Email | undefined;
  phone: ImportHumanUserRequest_Phone | undefined;
  password: string;
  hashedPassword: ImportHumanUserRequest_HashedPassword | undefined;
  passwordChangeRequired: boolean;
  requestPasswordlessRegistration: boolean;
  otpCode: string;
  idps: ImportHumanUserRequest_IDP[];
}

export interface ImportHumanUserRequest_Profile {
  firstName: string;
  lastName: string;
  nickName: string;
  displayName: string;
  preferredLanguage: string;
  gender: Gender;
}

export interface ImportHumanUserRequest_Email {
  email: string;
  isEmailVerified: boolean;
}

export interface ImportHumanUserRequest_Phone {
  phone: string;
  isPhoneVerified: boolean;
}

export interface ImportHumanUserRequest_HashedPassword {
  value: string;
}

export interface ImportHumanUserRequest_IDP {
  configId: string;
  externalUserId: string;
  displayName: string;
}

export interface ImportHumanUserResponse {
  userId: string;
  details: ObjectDetails | undefined;
  passwordlessRegistration: ImportHumanUserResponse_PasswordlessRegistration | undefined;
}

export interface ImportHumanUserResponse_PasswordlessRegistration {
  link: string;
  /** deprecated: use expiration instead */
  lifetime: Duration | undefined;
  expiration: Duration | undefined;
}

export interface AddMachineUserRequest {
  userName: string;
  name: string;
  description: string;
  accessTokenType: AccessTokenType;
}

export interface AddMachineUserResponse {
  userId: string;
  details: ObjectDetails | undefined;
}

export interface DeactivateUserRequest {
  id: string;
}

export interface DeactivateUserResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateUserRequest {
  id: string;
}

export interface ReactivateUserResponse {
  details: ObjectDetails | undefined;
}

export interface LockUserRequest {
  id: string;
}

export interface LockUserResponse {
  details: ObjectDetails | undefined;
}

export interface UnlockUserRequest {
  id: string;
}

export interface UnlockUserResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveUserRequest {
  id: string;
}

export interface RemoveUserResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateUserNameRequest {
  userId: string;
  userName: string;
}

export interface UpdateUserNameResponse {
  details: ObjectDetails | undefined;
}

export interface ListUserMetadataRequest {
  id: string;
  query: ListQuery | undefined;
  queries: MetadataQuery[];
}

export interface ListUserMetadataResponse {
  details: ListDetails | undefined;
  result: Metadata[];
}

export interface GetUserMetadataRequest {
  id: string;
  key: string;
}

export interface GetUserMetadataResponse {
  metadata: Metadata | undefined;
}

export interface SetUserMetadataRequest {
  id: string;
  key: string;
  value: Uint8Array;
}

export interface SetUserMetadataResponse {
  id: string;
  details: ObjectDetails | undefined;
}

export interface BulkSetUserMetadataRequest {
  id: string;
  metadata: BulkSetUserMetadataRequest_Metadata[];
}

export interface BulkSetUserMetadataRequest_Metadata {
  key: string;
  value: Uint8Array;
}

export interface BulkSetUserMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveUserMetadataRequest {
  id: string;
  key: string;
}

export interface RemoveUserMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface BulkRemoveUserMetadataRequest {
  id: string;
  keys: string[];
}

export interface BulkRemoveUserMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface GetHumanProfileRequest {
  userId: string;
}

export interface GetHumanProfileResponse {
  details: ObjectDetails | undefined;
  profile: Profile | undefined;
}

export interface UpdateHumanProfileRequest {
  userId: string;
  firstName: string;
  lastName: string;
  nickName: string;
  displayName: string;
  preferredLanguage: string;
  gender: Gender;
}

export interface UpdateHumanProfileResponse {
  details: ObjectDetails | undefined;
}

export interface GetHumanEmailRequest {
  userId: string;
}

export interface GetHumanEmailResponse {
  details: ObjectDetails | undefined;
  email: Email | undefined;
}

export interface UpdateHumanEmailRequest {
  userId: string;
  email: string;
  isEmailVerified: boolean;
}

export interface UpdateHumanEmailResponse {
  details: ObjectDetails | undefined;
}

export interface ResendHumanInitializationRequest {
  userId: string;
  email: string;
}

export interface ResendHumanInitializationResponse {
  details: ObjectDetails | undefined;
}

export interface ResendHumanEmailVerificationRequest {
  userId: string;
}

export interface ResendHumanEmailVerificationResponse {
  details: ObjectDetails | undefined;
}

export interface GetHumanPhoneRequest {
  userId: string;
}

export interface GetHumanPhoneResponse {
  details: ObjectDetails | undefined;
  phone: Phone | undefined;
}

export interface UpdateHumanPhoneRequest {
  userId: string;
  phone: string;
  isPhoneVerified: boolean;
}

export interface UpdateHumanPhoneResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanPhoneRequest {
  userId: string;
}

export interface RemoveHumanPhoneResponse {
  details: ObjectDetails | undefined;
}

export interface ResendHumanPhoneVerificationRequest {
  userId: string;
}

export interface ResendHumanPhoneVerificationResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanAvatarRequest {
  userId: string;
}

export interface RemoveHumanAvatarResponse {
  details: ObjectDetails | undefined;
}

export interface SetHumanInitialPasswordRequest {
  userId: string;
  password: string;
}

export interface SetHumanInitialPasswordResponse {
  details: ObjectDetails | undefined;
}

export interface SetHumanPasswordRequest {
  userId: string;
  password: string;
  noChangeRequired: boolean;
}

export interface SetHumanPasswordResponse {
  details: ObjectDetails | undefined;
}

export interface SendHumanResetPasswordNotificationRequest {
  userId: string;
  type: SendHumanResetPasswordNotificationRequest_Type;
}

export enum SendHumanResetPasswordNotificationRequest_Type {
  TYPE_EMAIL = 0,
  TYPE_SMS = 1,
  UNRECOGNIZED = -1,
}

export function sendHumanResetPasswordNotificationRequest_TypeFromJSON(
  object: any,
): SendHumanResetPasswordNotificationRequest_Type {
  switch (object) {
    case 0:
    case "TYPE_EMAIL":
      return SendHumanResetPasswordNotificationRequest_Type.TYPE_EMAIL;
    case 1:
    case "TYPE_SMS":
      return SendHumanResetPasswordNotificationRequest_Type.TYPE_SMS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SendHumanResetPasswordNotificationRequest_Type.UNRECOGNIZED;
  }
}

export function sendHumanResetPasswordNotificationRequest_TypeToJSON(
  object: SendHumanResetPasswordNotificationRequest_Type,
): string {
  switch (object) {
    case SendHumanResetPasswordNotificationRequest_Type.TYPE_EMAIL:
      return "TYPE_EMAIL";
    case SendHumanResetPasswordNotificationRequest_Type.TYPE_SMS:
      return "TYPE_SMS";
    case SendHumanResetPasswordNotificationRequest_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SendHumanResetPasswordNotificationResponse {
  details: ObjectDetails | undefined;
}

export interface ListHumanAuthFactorsRequest {
  userId: string;
}

export interface ListHumanAuthFactorsResponse {
  result: AuthFactor[];
}

export interface RemoveHumanAuthFactorOTPRequest {
  userId: string;
}

export interface RemoveHumanAuthFactorOTPResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanAuthFactorU2FRequest {
  userId: string;
  tokenId: string;
}

export interface RemoveHumanAuthFactorU2FResponse {
  details: ObjectDetails | undefined;
}

export interface ListHumanPasswordlessRequest {
  userId: string;
}

export interface ListHumanPasswordlessResponse {
  result: WebAuthNToken[];
}

export interface AddPasswordlessRegistrationRequest {
  userId: string;
}

export interface AddPasswordlessRegistrationResponse {
  details: ObjectDetails | undefined;
  link: string;
  expiration: Duration | undefined;
}

export interface SendPasswordlessRegistrationRequest {
  userId: string;
}

export interface SendPasswordlessRegistrationResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanPasswordlessRequest {
  userId: string;
  tokenId: string;
}

export interface RemoveHumanPasswordlessResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateMachineRequest {
  userId: string;
  description: string;
  name: string;
  accessTokenType: AccessTokenType;
}

export interface UpdateMachineResponse {
  details: ObjectDetails | undefined;
}

export interface GenerateMachineSecretRequest {
  userId: string;
}

export interface GenerateMachineSecretResponse {
  clientId: string;
  clientSecret: string;
  details: ObjectDetails | undefined;
}

export interface RemoveMachineSecretRequest {
  userId: string;
}

export interface RemoveMachineSecretResponse {
  details: ObjectDetails | undefined;
}

export interface GetMachineKeyByIDsRequest {
  userId: string;
  keyId: string;
}

export interface GetMachineKeyByIDsResponse {
  key: Key | undefined;
}

export interface ListMachineKeysRequest {
  userId: string;
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListMachineKeysResponse {
  details: ListDetails | undefined;
  result: Key[];
}

export interface AddMachineKeyRequest {
  userId: string;
  type: KeyType;
  expirationDate: Date | undefined;
}

export interface AddMachineKeyResponse {
  keyId: string;
  keyDetails: Uint8Array;
  details: ObjectDetails | undefined;
}

export interface RemoveMachineKeyRequest {
  userId: string;
  keyId: string;
}

export interface RemoveMachineKeyResponse {
  details: ObjectDetails | undefined;
}

export interface GetPersonalAccessTokenByIDsRequest {
  userId: string;
  tokenId: string;
}

export interface GetPersonalAccessTokenByIDsResponse {
  token: PersonalAccessToken | undefined;
}

export interface ListPersonalAccessTokensRequest {
  userId: string;
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListPersonalAccessTokensResponse {
  details: ListDetails | undefined;
  result: PersonalAccessToken[];
}

export interface AddPersonalAccessTokenRequest {
  userId: string;
  expirationDate: Date | undefined;
}

export interface AddPersonalAccessTokenResponse {
  tokenId: string;
  token: string;
  details: ObjectDetails | undefined;
}

export interface RemovePersonalAccessTokenRequest {
  userId: string;
  tokenId: string;
}

export interface RemovePersonalAccessTokenResponse {
  details: ObjectDetails | undefined;
}

export interface ListHumanLinkedIDPsRequest {
  userId: string;
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListHumanLinkedIDPsResponse {
  details: ListDetails | undefined;
  result: IDPUserLink[];
}

export interface RemoveHumanLinkedIDPRequest {
  userId: string;
  idpId: string;
  linkedUserId: string;
}

export interface RemoveHumanLinkedIDPResponse {
  details: ObjectDetails | undefined;
}

export interface ListUserMembershipsRequest {
  /** list limitations and ordering */
  userId: string;
  /** the field the result is sorted */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: MembershipQuery[];
}

export interface ListUserMembershipsResponse {
  details: ListDetails | undefined;
  result: Membership[];
}

/** This is an empty request */
export interface GetMyOrgRequest {
}

export interface GetMyOrgResponse {
  org: Org | undefined;
}

export interface GetOrgByDomainGlobalRequest {
  domain: string;
}

export interface ListOrgChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
}

export interface ListOrgChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface GetOrgByDomainGlobalResponse {
  org: Org | undefined;
}

export interface AddOrgRequest {
  name: string;
}

export interface AddOrgResponse {
  id: string;
  details: ObjectDetails | undefined;
}

export interface UpdateOrgRequest {
  name: string;
}

export interface UpdateOrgResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface DeactivateOrgRequest {
}

export interface DeactivateOrgResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ReactivateOrgRequest {
}

export interface ReactivateOrgResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgRequest {
}

export interface RemoveOrgResponse {
  details: ObjectDetails | undefined;
}

export interface ListOrgDomainsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: DomainSearchQuery[];
}

export interface ListOrgDomainsResponse {
  details: ListDetails | undefined;
  result: Domain[];
}

export interface AddOrgDomainRequest {
  domain: string;
}

export interface AddOrgDomainResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgDomainRequest {
  domain: string;
}

export interface RemoveOrgDomainResponse {
  details: ObjectDetails | undefined;
}

export interface GenerateOrgDomainValidationRequest {
  domain: string;
  type: DomainValidationType;
}

export interface GenerateOrgDomainValidationResponse {
  token: string;
  url: string;
}

export interface ValidateOrgDomainRequest {
  domain: string;
}

export interface ValidateOrgDomainResponse {
  details: ObjectDetails | undefined;
}

export interface SetPrimaryOrgDomainRequest {
  domain: string;
}

export interface SetPrimaryOrgDomainResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListOrgMemberRolesRequest {
}

export interface ListOrgMemberRolesResponse {
  result: string[];
}

export interface ListOrgMembersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SearchQuery1[];
}

export interface ListOrgMembersResponse {
  /** list limitations and ordering */
  details:
    | ListDetails
    | undefined;
  /** criteria the client is looking for */
  result: Member[];
}

export interface AddOrgMemberRequest {
  userId: string;
  roles: string[];
}

export interface AddOrgMemberResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOrgMemberRequest {
  userId: string;
  roles: string[];
}

export interface UpdateOrgMemberResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgMemberRequest {
  userId: string;
}

export interface RemoveOrgMemberResponse {
  details: ObjectDetails | undefined;
}

export interface ListOrgMetadataRequest {
  query: ListQuery | undefined;
  queries: MetadataQuery[];
}

export interface ListOrgMetadataResponse {
  details: ListDetails | undefined;
  result: Metadata[];
}

export interface GetOrgMetadataRequest {
  key: string;
}

export interface GetOrgMetadataResponse {
  metadata: Metadata | undefined;
}

export interface SetOrgMetadataRequest {
  key: string;
  value: Uint8Array;
}

export interface SetOrgMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface BulkSetOrgMetadataRequest {
  metadata: BulkSetOrgMetadataRequest_Metadata[];
}

export interface BulkSetOrgMetadataRequest_Metadata {
  key: string;
  value: Uint8Array;
}

export interface BulkSetOrgMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgMetadataRequest {
  key: string;
}

export interface RemoveOrgMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface BulkRemoveOrgMetadataRequest {
  keys: string[];
}

export interface BulkRemoveOrgMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface GetProjectByIDRequest {
  id: string;
}

export interface GetProjectByIDResponse {
  project: Project | undefined;
}

export interface GetGrantedProjectByIDRequest {
  projectId: string;
  grantId: string;
}

export interface GetGrantedProjectByIDResponse {
  grantedProject: GrantedProject | undefined;
}

export interface ListProjectsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProjectQuery[];
}

export interface ListProjectsResponse {
  details: ListDetails | undefined;
  result: Project[];
}

export interface ListGrantedProjectsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProjectQuery[];
}

export interface ListGrantedProjectsResponse {
  details: ListDetails | undefined;
  result: GrantedProject[];
}

export interface ListProjectChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
  projectId: string;
}

export interface ListProjectChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface AddProjectRequest {
  name: string;
  projectRoleAssertion: boolean;
  projectRoleCheck: boolean;
  hasProjectCheck: boolean;
  privateLabelingSetting: PrivateLabelingSetting;
}

export interface AddProjectResponse {
  id: string;
  details: ObjectDetails | undefined;
}

export interface UpdateProjectRequest {
  id: string;
  name: string;
  projectRoleAssertion: boolean;
  projectRoleCheck: boolean;
  hasProjectCheck: boolean;
  privateLabelingSetting: PrivateLabelingSetting;
}

export interface UpdateProjectResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateProjectRequest {
  id: string;
}

export interface DeactivateProjectResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateProjectRequest {
  id: string;
}

export interface ReactivateProjectResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectRequest {
  id: string;
}

export interface RemoveProjectResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListProjectMemberRolesRequest {
}

export interface ListProjectMemberRolesResponse {
  details: ListDetails | undefined;
  result: string[];
}

export interface AddProjectRoleRequest {
  projectId: string;
  roleKey: string;
  displayName: string;
  group: string;
}

export interface AddProjectRoleResponse {
  details: ObjectDetails | undefined;
}

export interface BulkAddProjectRolesRequest {
  projectId: string;
  roles: BulkAddProjectRolesRequest_Role[];
}

export interface BulkAddProjectRolesRequest_Role {
  key: string;
  displayName: string;
  group: string;
}

export interface BulkAddProjectRolesResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateProjectRoleRequest {
  projectId: string;
  roleKey: string;
  displayName: string;
  group: string;
}

export interface UpdateProjectRoleResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectRoleRequest {
  projectId: string;
  roleKey: string;
}

export interface RemoveProjectRoleResponse {
  details: ObjectDetails | undefined;
}

export interface ListProjectRolesRequest {
  projectId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: RoleQuery[];
}

export interface ListProjectRolesResponse {
  details: ListDetails | undefined;
  result: Role[];
}

export interface ListGrantedProjectRolesRequest {
  projectId: string;
  grantId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: RoleQuery[];
}

export interface ListGrantedProjectRolesResponse {
  details: ListDetails | undefined;
  result: Role[];
}

export interface ListProjectMembersRequest {
  projectId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SearchQuery1[];
}

export interface ListProjectMembersResponse {
  details: ListDetails | undefined;
  result: Member[];
}

export interface AddProjectMemberRequest {
  projectId: string;
  userId: string;
  roles: string[];
}

export interface AddProjectMemberResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateProjectMemberRequest {
  projectId: string;
  userId: string;
  roles: string[];
}

export interface UpdateProjectMemberResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectMemberRequest {
  projectId: string;
  userId: string;
}

export interface RemoveProjectMemberResponse {
  details: ObjectDetails | undefined;
}

export interface GetAppByIDRequest {
  projectId: string;
  appId: string;
}

export interface GetAppByIDResponse {
  app: App | undefined;
}

export interface ListAppsRequest {
  projectId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: AppQuery[];
}

export interface ListAppsResponse {
  details: ListDetails | undefined;
  result: App[];
}

export interface ListAppChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
  projectId: string;
  appId: string;
}

export interface ListAppChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface AddOIDCAppRequest {
  projectId: string;
  name: string;
  redirectUris: string[];
  responseTypes: OIDCResponseType[];
  grantTypes: OIDCGrantType[];
  appType: OIDCAppType;
  authMethodType: OIDCAuthMethodType;
  postLogoutRedirectUris: string[];
  version: OIDCVersion;
  devMode: boolean;
  accessTokenType: OIDCTokenType;
  accessTokenRoleAssertion: boolean;
  idTokenRoleAssertion: boolean;
  idTokenUserinfoAssertion: boolean;
  clockSkew: Duration | undefined;
  additionalOrigins: string[];
  skipNativeAppSuccessPage: boolean;
}

export interface AddOIDCAppResponse {
  appId: string;
  details: ObjectDetails | undefined;
  clientId: string;
  clientSecret: string;
  noneCompliant: boolean;
  complianceProblems: LocalizedMessage[];
}

export interface AddSAMLAppRequest {
  projectId: string;
  name: string;
  metadataXml?: Uint8Array | undefined;
  metadataUrl?: string | undefined;
}

export interface AddSAMLAppResponse {
  appId: string;
  details: ObjectDetails | undefined;
}

export interface AddAPIAppRequest {
  projectId: string;
  name: string;
  authMethodType: APIAuthMethodType;
}

export interface AddAPIAppResponse {
  appId: string;
  details: ObjectDetails | undefined;
  clientId: string;
  clientSecret: string;
}

export interface UpdateAppRequest {
  projectId: string;
  appId: string;
  name: string;
}

export interface UpdateAppResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOIDCAppConfigRequest {
  projectId: string;
  appId: string;
  redirectUris: string[];
  responseTypes: OIDCResponseType[];
  grantTypes: OIDCGrantType[];
  appType: OIDCAppType;
  authMethodType: OIDCAuthMethodType;
  postLogoutRedirectUris: string[];
  devMode: boolean;
  accessTokenType: OIDCTokenType;
  accessTokenRoleAssertion: boolean;
  idTokenRoleAssertion: boolean;
  idTokenUserinfoAssertion: boolean;
  clockSkew: Duration | undefined;
  additionalOrigins: string[];
  skipNativeAppSuccessPage: boolean;
}

export interface UpdateOIDCAppConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateSAMLAppConfigRequest {
  projectId: string;
  appId: string;
  metadataXml?: Uint8Array | undefined;
  metadataUrl?: string | undefined;
}

export interface UpdateSAMLAppConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateAPIAppConfigRequest {
  projectId: string;
  appId: string;
  authMethodType: APIAuthMethodType;
}

export interface UpdateAPIAppConfigResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateAppRequest {
  projectId: string;
  appId: string;
}

export interface DeactivateAppResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateAppRequest {
  projectId: string;
  appId: string;
}

export interface ReactivateAppResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveAppRequest {
  projectId: string;
  appId: string;
}

export interface RemoveAppResponse {
  details: ObjectDetails | undefined;
}

export interface RegenerateOIDCClientSecretRequest {
  projectId: string;
  appId: string;
}

export interface RegenerateOIDCClientSecretResponse {
  clientSecret: string;
  details: ObjectDetails | undefined;
}

export interface RegenerateAPIClientSecretRequest {
  projectId: string;
  appId: string;
}

export interface RegenerateAPIClientSecretResponse {
  clientSecret: string;
  details: ObjectDetails | undefined;
}

export interface GetAppKeyRequest {
  projectId: string;
  appId: string;
  keyId: string;
}

export interface GetAppKeyResponse {
  key: Key | undefined;
}

export interface ListAppKeysRequest {
  /** list limitations and ordering */
  query: ListQuery | undefined;
  appId: string;
  projectId: string;
}

export interface ListAppKeysResponse {
  details: ListDetails | undefined;
  result: Key[];
}

export interface AddAppKeyRequest {
  projectId: string;
  appId: string;
  type: KeyType;
  expirationDate: Date | undefined;
}

export interface AddAppKeyResponse {
  id: string;
  details: ObjectDetails | undefined;
  keyDetails: Uint8Array;
}

export interface RemoveAppKeyRequest {
  projectId: string;
  appId: string;
  keyId: string;
}

export interface RemoveAppKeyResponse {
  details: ObjectDetails | undefined;
}

export interface ListProjectGrantChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
  projectId: string;
  grantId: string;
}

export interface ListProjectGrantChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface GetProjectGrantByIDRequest {
  projectId: string;
  grantId: string;
}

export interface GetProjectGrantByIDResponse {
  projectGrant: GrantedProject | undefined;
}

export interface ListProjectGrantsRequest {
  projectId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProjectGrantQuery[];
}

export interface ListProjectGrantsResponse {
  details: ListDetails | undefined;
  result: GrantedProject[];
}

export interface ListAllProjectGrantsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: AllProjectGrantQuery[];
}

export interface ListAllProjectGrantsResponse {
  details: ListDetails | undefined;
  result: GrantedProject[];
}

export interface AddProjectGrantRequest {
  projectId: string;
  grantedOrgId: string;
  roleKeys: string[];
}

export interface AddProjectGrantResponse {
  grantId: string;
  details: ObjectDetails | undefined;
}

export interface UpdateProjectGrantRequest {
  projectId: string;
  grantId: string;
  roleKeys: string[];
}

export interface UpdateProjectGrantResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateProjectGrantRequest {
  projectId: string;
  grantId: string;
}

export interface DeactivateProjectGrantResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateProjectGrantRequest {
  projectId: string;
  grantId: string;
}

export interface ReactivateProjectGrantResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectGrantRequest {
  projectId: string;
  grantId: string;
}

export interface RemoveProjectGrantResponse {
  details: ObjectDetails | undefined;
}

export interface ListProjectGrantMemberRolesRequest {
  query: ListQuery | undefined;
  result: string[];
}

export interface ListProjectGrantMemberRolesResponse {
  details: ListDetails | undefined;
  result: string[];
}

export interface ListProjectGrantMembersRequest {
  projectId: string;
  grantId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SearchQuery1[];
}

export interface ListProjectGrantMembersResponse {
  details: ListDetails | undefined;
  result: Member[];
}

export interface AddProjectGrantMemberRequest {
  projectId: string;
  grantId: string;
  userId: string;
  roles: string[];
}

export interface AddProjectGrantMemberResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateProjectGrantMemberRequest {
  projectId: string;
  grantId: string;
  userId: string;
  roles: string[];
}

export interface UpdateProjectGrantMemberResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectGrantMemberRequest {
  projectId: string;
  grantId: string;
  userId: string;
}

export interface RemoveProjectGrantMemberResponse {
  details: ObjectDetails | undefined;
}

export interface GetUserGrantByIDRequest {
  userId: string;
  grantId: string;
}

export interface GetUserGrantByIDResponse {
  userGrant: UserGrant | undefined;
}

export interface ListUserGrantRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: UserGrantQuery[];
}

export interface ListUserGrantResponse {
  details: ListDetails | undefined;
  result: UserGrant[];
}

export interface AddUserGrantRequest {
  userId: string;
  projectId: string;
  projectGrantId: string;
  roleKeys: string[];
}

export interface AddUserGrantResponse {
  userGrantId: string;
  details: ObjectDetails | undefined;
}

export interface UpdateUserGrantRequest {
  userId: string;
  grantId: string;
  roleKeys: string[];
}

export interface UpdateUserGrantResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateUserGrantRequest {
  userId: string;
  grantId: string;
}

export interface DeactivateUserGrantResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateUserGrantRequest {
  userId: string;
  grantId: string;
}

export interface ReactivateUserGrantResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveUserGrantRequest {
  userId: string;
  grantId: string;
}

export interface RemoveUserGrantResponse {
  details: ObjectDetails | undefined;
}

export interface BulkRemoveUserGrantRequest {
  grantId: string[];
}

export interface BulkRemoveUserGrantResponse {
}

export interface GetOrgIAMPolicyRequest {
}

export interface GetOrgIAMPolicyResponse {
  policy: OrgIAMPolicy | undefined;
}

export interface GetDomainPolicyRequest {
}

export interface GetDomainPolicyResponse {
  policy: DomainPolicy | undefined;
}

export interface GetLoginPolicyRequest {
}

export interface GetLoginPolicyResponse {
  policy:
    | LoginPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.LoginPolicy */
  isDefault: boolean;
}

export interface GetDefaultLoginPolicyRequest {
}

export interface GetDefaultLoginPolicyResponse {
  policy: LoginPolicy | undefined;
}

export interface AddCustomLoginPolicyRequest {
  allowUsernamePassword: boolean;
  allowRegister: boolean;
  allowExternalIdp: boolean;
  forceMfa: boolean;
  passwordlessType: PasswordlessType;
  hidePasswordReset: boolean;
  ignoreUnknownUsernames: boolean;
  defaultRedirectUri: string;
  passwordCheckLifetime: Duration | undefined;
  externalLoginCheckLifetime: Duration | undefined;
  mfaInitSkipLifetime: Duration | undefined;
  secondFactorCheckLifetime: Duration | undefined;
  multiFactorCheckLifetime: Duration | undefined;
  secondFactors: SecondFactorType[];
  multiFactors: MultiFactorType[];
  idps: AddCustomLoginPolicyRequest_IDP[];
  /** If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success. */
  allowDomainDiscovery: boolean;
  disableLoginWithEmail: boolean;
  disableLoginWithPhone: boolean;
  forceMfaLocalOnly: boolean;
}

export interface AddCustomLoginPolicyRequest_IDP {
  idpId: string;
  ownerType: IDPOwnerType;
}

export interface AddCustomLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomLoginPolicyRequest {
  allowUsernamePassword: boolean;
  allowRegister: boolean;
  allowExternalIdp: boolean;
  forceMfa: boolean;
  passwordlessType: PasswordlessType;
  hidePasswordReset: boolean;
  ignoreUnknownUsernames: boolean;
  defaultRedirectUri: string;
  passwordCheckLifetime: Duration | undefined;
  externalLoginCheckLifetime: Duration | undefined;
  mfaInitSkipLifetime: Duration | undefined;
  secondFactorCheckLifetime: Duration | undefined;
  multiFactorCheckLifetime:
    | Duration
    | undefined;
  /** If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success. */
  allowDomainDiscovery: boolean;
  disableLoginWithEmail: boolean;
  disableLoginWithPhone: boolean;
  forceMfaLocalOnly: boolean;
}

export interface UpdateCustomLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ResetLoginPolicyToDefaultRequest {
}

export interface ResetLoginPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface ListLoginPolicyIDPsRequest {
  query: ListQuery | undefined;
}

export interface ListLoginPolicyIDPsResponse {
  details: ListDetails | undefined;
  result: IDPLoginPolicyLink[];
}

export interface AddIDPToLoginPolicyRequest {
  idpId: string;
  ownerType: IDPOwnerType;
}

export interface AddIDPToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveIDPFromLoginPolicyRequest {
  idpId: string;
}

export interface RemoveIDPFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ListLoginPolicySecondFactorsRequest {
}

export interface ListLoginPolicySecondFactorsResponse {
  details: ListDetails | undefined;
  result: SecondFactorType[];
}

export interface AddSecondFactorToLoginPolicyRequest {
  type: SecondFactorType;
}

export interface AddSecondFactorToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveSecondFactorFromLoginPolicyRequest {
  type: SecondFactorType;
}

export interface RemoveSecondFactorFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ListLoginPolicyMultiFactorsRequest {
}

export interface ListLoginPolicyMultiFactorsResponse {
  details: ListDetails | undefined;
  result: MultiFactorType[];
}

export interface AddMultiFactorToLoginPolicyRequest {
  type: MultiFactorType;
}

export interface AddMultiFactorToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveMultiFactorFromLoginPolicyRequest {
  type: MultiFactorType;
}

export interface RemoveMultiFactorFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetPasswordComplexityPolicyRequest {
}

export interface GetPasswordComplexityPolicyResponse {
  policy:
    | PasswordComplexityPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.PasswordComplexityPolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetDefaultPasswordComplexityPolicyRequest {
}

export interface GetDefaultPasswordComplexityPolicyResponse {
  policy: PasswordComplexityPolicy | undefined;
}

export interface AddCustomPasswordComplexityPolicyRequest {
  minLength: number;
  hasUppercase: boolean;
  hasLowercase: boolean;
  hasNumber: boolean;
  hasSymbol: boolean;
}

export interface AddCustomPasswordComplexityPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomPasswordComplexityPolicyRequest {
  minLength: number;
  hasUppercase: boolean;
  hasLowercase: boolean;
  hasNumber: boolean;
  hasSymbol: boolean;
}

export interface UpdateCustomPasswordComplexityPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetPasswordComplexityPolicyToDefaultRequest {
}

export interface ResetPasswordComplexityPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetPasswordAgePolicyRequest {
}

export interface GetPasswordAgePolicyResponse {
  policy:
    | PasswordAgePolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.PasswordAgePolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetDefaultPasswordAgePolicyRequest {
}

export interface GetDefaultPasswordAgePolicyResponse {
  policy: PasswordAgePolicy | undefined;
}

export interface AddCustomPasswordAgePolicyRequest {
  maxAgeDays: number;
  expireWarnDays: number;
}

export interface AddCustomPasswordAgePolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomPasswordAgePolicyRequest {
  maxAgeDays: number;
  expireWarnDays: number;
}

export interface UpdateCustomPasswordAgePolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetPasswordAgePolicyToDefaultRequest {
}

export interface ResetPasswordAgePolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLockoutPolicyRequest {
}

export interface GetLockoutPolicyResponse {
  policy:
    | LockoutPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.LockoutPolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetDefaultLockoutPolicyRequest {
}

export interface GetDefaultLockoutPolicyResponse {
  policy: LockoutPolicy | undefined;
}

export interface AddCustomLockoutPolicyRequest {
  maxPasswordAttempts: number;
}

export interface AddCustomLockoutPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomLockoutPolicyRequest {
  maxPasswordAttempts: number;
}

export interface UpdateCustomLockoutPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetLockoutPolicyToDefaultRequest {
}

export interface ResetLockoutPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetPrivacyPolicyRequest {
}

export interface GetPrivacyPolicyResponse {
  policy: PrivacyPolicy | undefined;
}

/** This is an empty request */
export interface GetDefaultPrivacyPolicyRequest {
}

export interface GetDefaultPrivacyPolicyResponse {
  policy: PrivacyPolicy | undefined;
}

export interface AddCustomPrivacyPolicyRequest {
  tosLink: string;
  privacyLink: string;
  helpLink: string;
  supportEmail: string;
}

export interface AddCustomPrivacyPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomPrivacyPolicyRequest {
  tosLink: string;
  privacyLink: string;
  helpLink: string;
  supportEmail: string;
}

export interface UpdateCustomPrivacyPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetPrivacyPolicyToDefaultRequest {
}

export interface ResetPrivacyPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetNotificationPolicyRequest {
}

export interface GetNotificationPolicyResponse {
  policy: NotificationPolicy | undefined;
}

/** This is an empty request */
export interface GetDefaultNotificationPolicyRequest {
}

export interface GetDefaultNotificationPolicyResponse {
  policy: NotificationPolicy | undefined;
}

export interface AddCustomNotificationPolicyRequest {
  passwordChange: boolean;
}

export interface AddCustomNotificationPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomNotificationPolicyRequest {
  passwordChange: boolean;
}

export interface UpdateCustomNotificationPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetNotificationPolicyToDefaultRequest {
}

export interface ResetNotificationPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLabelPolicyRequest {
}

export interface GetLabelPolicyResponse {
  policy:
    | LabelPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.LabelPolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetPreviewLabelPolicyRequest {
}

export interface GetPreviewLabelPolicyResponse {
  policy:
    | LabelPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.LabelPolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetDefaultLabelPolicyRequest {
}

export interface GetDefaultLabelPolicyResponse {
  policy: LabelPolicy | undefined;
}

export interface AddCustomLabelPolicyRequest {
  primaryColor: string;
  /** hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set */
  hideLoginNameSuffix: boolean;
  warnColor: string;
  backgroundColor: string;
  fontColor: string;
  primaryColorDark: string;
  backgroundColorDark: string;
  warnColorDark: string;
  fontColorDark: string;
  disableWatermark: boolean;
}

export interface AddCustomLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomLabelPolicyRequest {
  primaryColor: string;
  hideLoginNameSuffix: boolean;
  warnColor: string;
  backgroundColor: string;
  fontColor: string;
  primaryColorDark: string;
  backgroundColorDark: string;
  warnColorDark: string;
  fontColorDark: string;
  disableWatermark: boolean;
}

export interface UpdateCustomLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ActivateCustomLabelPolicyRequest {
}

export interface ActivateCustomLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyLogoRequest {
}

export interface RemoveCustomLabelPolicyLogoResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyLogoDarkRequest {
}

export interface RemoveCustomLabelPolicyLogoDarkResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyIconRequest {
}

export interface RemoveCustomLabelPolicyIconResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyIconDarkRequest {
}

export interface RemoveCustomLabelPolicyIconDarkResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyFontRequest {
}

export interface RemoveCustomLabelPolicyFontResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetLabelPolicyToDefaultRequest {
}

export interface ResetLabelPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomInitMessageTextRequest {
  language: string;
}

export interface GetCustomInitMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultInitMessageTextRequest {
  language: string;
}

export interface GetDefaultInitMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomInitMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomInitMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomInitMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomInitMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultLoginTextsRequest {
  language: string;
}

export interface GetDefaultLoginTextsResponse {
  customText: LoginCustomText | undefined;
}

export interface GetCustomLoginTextsRequest {
  language: string;
}

export interface GetCustomLoginTextsResponse {
  customText: LoginCustomText | undefined;
}

export interface SetCustomLoginTextsRequest {
  language: string;
  selectAccountText: SelectAccountScreenText | undefined;
  loginText: LoginScreenText | undefined;
  passwordText: PasswordScreenText | undefined;
  usernameChangeText: UsernameChangeScreenText | undefined;
  usernameChangeDoneText: UsernameChangeDoneScreenText | undefined;
  initPasswordText: InitPasswordScreenText | undefined;
  initPasswordDoneText: InitPasswordDoneScreenText | undefined;
  emailVerificationText: EmailVerificationScreenText | undefined;
  emailVerificationDoneText: EmailVerificationDoneScreenText | undefined;
  initializeUserText: InitializeUserScreenText | undefined;
  initializeDoneText: InitializeUserDoneScreenText | undefined;
  initMfaPromptText: InitMFAPromptScreenText | undefined;
  initMfaOtpText: InitMFAOTPScreenText | undefined;
  initMfaU2fText: InitMFAU2FScreenText | undefined;
  initMfaDoneText: InitMFADoneScreenText | undefined;
  mfaProvidersText: MFAProvidersText | undefined;
  verifyMfaOtpText: VerifyMFAOTPScreenText | undefined;
  verifyMfaU2fText: VerifyMFAU2FScreenText | undefined;
  passwordlessText: PasswordlessScreenText | undefined;
  passwordChangeText: PasswordChangeScreenText | undefined;
  passwordChangeDoneText: PasswordChangeDoneScreenText | undefined;
  passwordResetDoneText: PasswordResetDoneScreenText | undefined;
  registrationOptionText: RegistrationOptionScreenText | undefined;
  registrationUserText: RegistrationUserScreenText | undefined;
  registrationOrgText: RegistrationOrgScreenText | undefined;
  linkingUserDoneText: LinkingUserDoneScreenText | undefined;
  externalUserNotFoundText: ExternalUserNotFoundScreenText | undefined;
  successLoginText: SuccessLoginScreenText | undefined;
  logoutText: LogoutDoneScreenText | undefined;
  footerText: FooterText | undefined;
  passwordlessPromptText: PasswordlessPromptScreenText | undefined;
  passwordlessRegistrationText: PasswordlessRegistrationScreenText | undefined;
  passwordlessRegistrationDoneText: PasswordlessRegistrationDoneScreenText | undefined;
  externalRegistrationUserOverviewText: ExternalRegistrationUserOverviewScreenText | undefined;
}

export interface SetCustomLoginTextsResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomLoginTextsToDefaultRequest {
  language: string;
}

export interface ResetCustomLoginTextsToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomPasswordResetMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordResetMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultPasswordResetMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordResetMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomPasswordResetMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomPasswordResetMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordResetMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordResetMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomVerifyEmailMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyEmailMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultVerifyEmailMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyEmailMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomVerifyEmailMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomVerifyEmailMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyEmailMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyEmailMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomVerifyPhoneMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyPhoneMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultVerifyPhoneMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyPhoneMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomVerifyPhoneMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomVerifyPhoneMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyPhoneMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyPhoneMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomDomainClaimedMessageTextRequest {
  language: string;
}

export interface GetCustomDomainClaimedMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultDomainClaimedMessageTextRequest {
  language: string;
}

export interface GetDefaultDomainClaimedMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomDomainClaimedMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomDomainClaimedMessageTextResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetCustomDomainClaimedMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomDomainClaimedMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomPasswordlessRegistrationMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordlessRegistrationMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultPasswordlessRegistrationMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordlessRegistrationMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomPasswordlessRegistrationMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomPasswordlessRegistrationMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomPasswordChangeMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordChangeMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultPasswordChangeMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordChangeMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomPasswordChangeMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomPasswordChangeMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordChangeMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordChangeMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetOrgIDPByIDRequest {
  id: string;
}

export interface GetOrgIDPByIDResponse {
  idp: IDP | undefined;
}

export interface ListOrgIDPsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: IDPFieldName;
  /** criteria the client is looking for */
  queries: IDPQuery[];
}

export interface IDPQuery {
  idpIdQuery?: IDPIDQuery | undefined;
  idpNameQuery?: IDPNameQuery | undefined;
  ownerTypeQuery?: IDPOwnerTypeQuery | undefined;
}

export interface ListOrgIDPsResponse {
  details: ListDetails | undefined;
  sortingColumn: IDPFieldName;
  result: IDP[];
}

export interface AddOrgOIDCIDPRequest {
  name: string;
  stylingType: IDPStylingType;
  clientId: string;
  clientSecret: string;
  issuer: string;
  scopes: string[];
  displayNameMapping: OIDCMappingField;
  usernameMapping: OIDCMappingField;
  autoRegister: boolean;
}

export interface AddOrgOIDCIDPResponse {
  details: ObjectDetails | undefined;
  idpId: string;
}

export interface AddOrgJWTIDPRequest {
  name: string;
  stylingType: IDPStylingType;
  jwtEndpoint: string;
  issuer: string;
  keysEndpoint: string;
  headerName: string;
  autoRegister: boolean;
}

export interface AddOrgJWTIDPResponse {
  details: ObjectDetails | undefined;
  idpId: string;
}

export interface DeactivateOrgIDPRequest {
  idpId: string;
}

export interface DeactivateOrgIDPResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateOrgIDPRequest {
  idpId: string;
}

export interface ReactivateOrgIDPResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgIDPRequest {
  idpId: string;
}

/** This is an empty response */
export interface RemoveOrgIDPResponse {
}

export interface UpdateOrgIDPRequest {
  idpId: string;
  name: string;
  stylingType: IDPStylingType;
  autoRegister: boolean;
}

export interface UpdateOrgIDPResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOrgIDPOIDCConfigRequest {
  idpId: string;
  clientId: string;
  clientSecret: string;
  issuer: string;
  scopes: string[];
  displayNameMapping: OIDCMappingField;
  usernameMapping: OIDCMappingField;
}

export interface UpdateOrgIDPOIDCConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOrgIDPJWTConfigRequest {
  idpId: string;
  jwtEndpoint: string;
  issuer: string;
  keysEndpoint: string;
  headerName: string;
}

export interface UpdateOrgIDPJWTConfigResponse {
  details: ObjectDetails | undefined;
}

export interface ListProvidersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProviderQuery[];
}

export interface ProviderQuery {
  idpIdQuery?: IDPIDQuery | undefined;
  idpNameQuery?: IDPNameQuery | undefined;
  ownerTypeQuery?: IDPOwnerTypeQuery | undefined;
}

export interface ListProvidersResponse {
  details: ListDetails | undefined;
  result: Provider[];
}

export interface GetProviderByIDRequest {
  id: string;
}

export interface GetProviderByIDResponse {
  idp: Provider | undefined;
}

export interface AddGenericOAuthProviderRequest {
  name: string;
  clientId: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  /** identifying attribute of the user in the response of the user_endpoint */
  idAttribute: string;
  providerOptions: Options | undefined;
}

export interface AddGenericOAuthProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGenericOAuthProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  /** identifying attribute of the user in the response of the user_endpoint */
  idAttribute: string;
  providerOptions: Options | undefined;
}

export interface UpdateGenericOAuthProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGenericOIDCProviderRequest {
  name: string;
  issuer: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
  isIdTokenMapping: boolean;
}

export interface AddGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGenericOIDCProviderRequest {
  id: string;
  name: string;
  issuer: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
  isIdTokenMapping: boolean;
}

export interface UpdateGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
}

export interface MigrateGenericOIDCProviderRequest {
  id: string;
  azure?: AddAzureADProviderRequest | undefined;
  google?: AddGoogleProviderRequest | undefined;
}

export interface MigrateGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddJWTProviderRequest {
  name: string;
  issuer: string;
  jwtEndpoint: string;
  keysEndpoint: string;
  headerName: string;
  providerOptions: Options | undefined;
}

export interface AddJWTProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateJWTProviderRequest {
  id: string;
  name: string;
  issuer: string;
  jwtEndpoint: string;
  keysEndpoint: string;
  headerName: string;
  providerOptions: Options | undefined;
}

export interface UpdateJWTProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddAzureADProviderRequest {
  name: string;
  clientId: string;
  clientSecret: string;
  /** if not provided the `common` tenant will be used */
  tenant: AzureADTenant | undefined;
  emailVerified: boolean;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddAzureADProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateAzureADProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  /** if not provided the `common` tenant will be used */
  tenant: AzureADTenant | undefined;
  emailVerified: boolean;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateAzureADProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitHubProviderRequest {
  /** GitHub will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitHubProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitHubProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitHubProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitHubEnterpriseServerProviderRequest {
  clientId: string;
  name: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitHubEnterpriseServerProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitHubEnterpriseServerProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitHubEnterpriseServerProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitLabProviderRequest {
  /** GitLab will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitLabProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitLabProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitLabProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitLabSelfHostedProviderRequest {
  issuer: string;
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitLabSelfHostedProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitLabSelfHostedProviderRequest {
  id: string;
  issuer: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitLabSelfHostedProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGoogleProviderRequest {
  /** Google will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGoogleProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGoogleProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGoogleProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddLDAPProviderRequest {
  name: string;
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  bindPassword: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
  providerOptions: Options | undefined;
}

export interface AddLDAPProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateLDAPProviderRequest {
  id: string;
  name: string;
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  bindPassword: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
  providerOptions: Options | undefined;
}

export interface UpdateLDAPProviderResponse {
  details: ObjectDetails | undefined;
}

export interface DeleteProviderRequest {
  id: string;
}

export interface DeleteProviderResponse {
  details: ObjectDetails | undefined;
}

export interface ListActionsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: ActionFieldName;
  /** criteria the client is looking for */
  queries: ActionQuery[];
}

export interface ActionQuery {
  actionIdQuery?: ActionIDQuery | undefined;
  actionNameQuery?: ActionNameQuery | undefined;
  actionStateQuery?: ActionStateQuery | undefined;
}

export interface ListActionsResponse {
  details: ListDetails | undefined;
  sortingColumn: ActionFieldName;
  result: Action[];
}

export interface CreateActionRequest {
  name: string;
  script: string;
  timeout: Duration | undefined;
  allowedToFail: boolean;
}

export interface CreateActionResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface GetActionRequest {
  id: string;
}

export interface GetActionResponse {
  action: Action | undefined;
}

export interface UpdateActionRequest {
  id: string;
  name: string;
  script: string;
  timeout: Duration | undefined;
  allowedToFail: boolean;
}

export interface UpdateActionResponse {
  details: ObjectDetails | undefined;
}

export interface DeleteActionRequest {
  id: string;
}

export interface DeleteActionResponse {
}

export interface ListFlowTypesRequest {
}

export interface ListFlowTypesResponse {
  result: FlowType[];
}

export interface ListFlowTriggerTypesRequest {
  type: string;
}

export interface ListFlowTriggerTypesResponse {
  result: TriggerType[];
}

export interface DeactivateActionRequest {
  id: string;
}

export interface DeactivateActionResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateActionRequest {
  id: string;
}

export interface ReactivateActionResponse {
  details: ObjectDetails | undefined;
}

export interface GetFlowRequest {
  /** id of the flow */
  type: string;
}

export interface GetFlowResponse {
  flow: Flow | undefined;
}

export interface ClearFlowRequest {
  /** id of the flow */
  type: string;
}

export interface ClearFlowResponse {
  details: ObjectDetails | undefined;
}

export interface SetTriggerActionsRequest {
  /** id of the flow type */
  flowType: string;
  /** id of the trigger type */
  triggerType: string;
  actionIds: string[];
}

export interface SetTriggerActionsResponse {
  details: ObjectDetails | undefined;
}

function createBaseHealthzRequest(): HealthzRequest {
  return {};
}

export const HealthzRequest = {
  encode(_: HealthzRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthzRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthzRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HealthzRequest {
    return {};
  },

  toJSON(_: HealthzRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthzRequest>, I>>(base?: I): HealthzRequest {
    return HealthzRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthzRequest>, I>>(_: I): HealthzRequest {
    const message = createBaseHealthzRequest();
    return message;
  },
};

function createBaseHealthzResponse(): HealthzResponse {
  return {};
}

export const HealthzResponse = {
  encode(_: HealthzResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthzResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthzResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HealthzResponse {
    return {};
  },

  toJSON(_: HealthzResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthzResponse>, I>>(base?: I): HealthzResponse {
    return HealthzResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthzResponse>, I>>(_: I): HealthzResponse {
    const message = createBaseHealthzResponse();
    return message;
  },
};

function createBaseGetOIDCInformationRequest(): GetOIDCInformationRequest {
  return {};
}

export const GetOIDCInformationRequest = {
  encode(_: GetOIDCInformationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOIDCInformationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOIDCInformationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetOIDCInformationRequest {
    return {};
  },

  toJSON(_: GetOIDCInformationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOIDCInformationRequest>, I>>(base?: I): GetOIDCInformationRequest {
    return GetOIDCInformationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOIDCInformationRequest>, I>>(_: I): GetOIDCInformationRequest {
    const message = createBaseGetOIDCInformationRequest();
    return message;
  },
};

function createBaseGetOIDCInformationResponse(): GetOIDCInformationResponse {
  return { issuer: "", discoveryEndpoint: "" };
}

export const GetOIDCInformationResponse = {
  encode(message: GetOIDCInformationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.discoveryEndpoint !== "") {
      writer.uint32(18).string(message.discoveryEndpoint);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOIDCInformationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOIDCInformationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.discoveryEndpoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOIDCInformationResponse {
    return {
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      discoveryEndpoint: isSet(object.discoveryEndpoint) ? String(object.discoveryEndpoint) : "",
    };
  },

  toJSON(message: GetOIDCInformationResponse): unknown {
    const obj: any = {};
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.discoveryEndpoint !== "") {
      obj.discoveryEndpoint = message.discoveryEndpoint;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOIDCInformationResponse>, I>>(base?: I): GetOIDCInformationResponse {
    return GetOIDCInformationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOIDCInformationResponse>, I>>(object: I): GetOIDCInformationResponse {
    const message = createBaseGetOIDCInformationResponse();
    message.issuer = object.issuer ?? "";
    message.discoveryEndpoint = object.discoveryEndpoint ?? "";
    return message;
  },
};

function createBaseGetIAMRequest(): GetIAMRequest {
  return {};
}

export const GetIAMRequest = {
  encode(_: GetIAMRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIAMRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIAMRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetIAMRequest {
    return {};
  },

  toJSON(_: GetIAMRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIAMRequest>, I>>(base?: I): GetIAMRequest {
    return GetIAMRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIAMRequest>, I>>(_: I): GetIAMRequest {
    const message = createBaseGetIAMRequest();
    return message;
  },
};

function createBaseGetIAMResponse(): GetIAMResponse {
  return { globalOrgId: "", iamProjectId: "", defaultOrgId: "" };
}

export const GetIAMResponse = {
  encode(message: GetIAMResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.globalOrgId !== "") {
      writer.uint32(10).string(message.globalOrgId);
    }
    if (message.iamProjectId !== "") {
      writer.uint32(18).string(message.iamProjectId);
    }
    if (message.defaultOrgId !== "") {
      writer.uint32(26).string(message.defaultOrgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIAMResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIAMResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.globalOrgId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.iamProjectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.defaultOrgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIAMResponse {
    return {
      globalOrgId: isSet(object.globalOrgId) ? String(object.globalOrgId) : "",
      iamProjectId: isSet(object.iamProjectId) ? String(object.iamProjectId) : "",
      defaultOrgId: isSet(object.defaultOrgId) ? String(object.defaultOrgId) : "",
    };
  },

  toJSON(message: GetIAMResponse): unknown {
    const obj: any = {};
    if (message.globalOrgId !== "") {
      obj.globalOrgId = message.globalOrgId;
    }
    if (message.iamProjectId !== "") {
      obj.iamProjectId = message.iamProjectId;
    }
    if (message.defaultOrgId !== "") {
      obj.defaultOrgId = message.defaultOrgId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIAMResponse>, I>>(base?: I): GetIAMResponse {
    return GetIAMResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIAMResponse>, I>>(object: I): GetIAMResponse {
    const message = createBaseGetIAMResponse();
    message.globalOrgId = object.globalOrgId ?? "";
    message.iamProjectId = object.iamProjectId ?? "";
    message.defaultOrgId = object.defaultOrgId ?? "";
    return message;
  },
};

function createBaseGetSupportedLanguagesRequest(): GetSupportedLanguagesRequest {
  return {};
}

export const GetSupportedLanguagesRequest = {
  encode(_: GetSupportedLanguagesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSupportedLanguagesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSupportedLanguagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSupportedLanguagesRequest {
    return {};
  },

  toJSON(_: GetSupportedLanguagesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSupportedLanguagesRequest>, I>>(base?: I): GetSupportedLanguagesRequest {
    return GetSupportedLanguagesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSupportedLanguagesRequest>, I>>(_: I): GetSupportedLanguagesRequest {
    const message = createBaseGetSupportedLanguagesRequest();
    return message;
  },
};

function createBaseGetSupportedLanguagesResponse(): GetSupportedLanguagesResponse {
  return { languages: [] };
}

export const GetSupportedLanguagesResponse = {
  encode(message: GetSupportedLanguagesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.languages) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSupportedLanguagesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSupportedLanguagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSupportedLanguagesResponse {
    return { languages: Array.isArray(object?.languages) ? object.languages.map((e: any) => String(e)) : [] };
  },

  toJSON(message: GetSupportedLanguagesResponse): unknown {
    const obj: any = {};
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSupportedLanguagesResponse>, I>>(base?: I): GetSupportedLanguagesResponse {
    return GetSupportedLanguagesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSupportedLanguagesResponse>, I>>(
    object: I,
  ): GetSupportedLanguagesResponse {
    const message = createBaseGetSupportedLanguagesResponse();
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetUserByIDRequest(): GetUserByIDRequest {
  return { id: "" };
}

export const GetUserByIDRequest = {
  encode(message: GetUserByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByIDRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetUserByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByIDRequest>, I>>(base?: I): GetUserByIDRequest {
    return GetUserByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByIDRequest>, I>>(object: I): GetUserByIDRequest {
    const message = createBaseGetUserByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetUserByIDResponse(): GetUserByIDResponse {
  return { user: undefined };
}

export const GetUserByIDResponse = {
  encode(message: GetUserByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByIDResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: GetUserByIDResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByIDResponse>, I>>(base?: I): GetUserByIDResponse {
    return GetUserByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByIDResponse>, I>>(object: I): GetUserByIDResponse {
    const message = createBaseGetUserByIDResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseGetUserByLoginNameGlobalRequest(): GetUserByLoginNameGlobalRequest {
  return { loginName: "" };
}

export const GetUserByLoginNameGlobalRequest = {
  encode(message: GetUserByLoginNameGlobalRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.loginName !== "") {
      writer.uint32(10).string(message.loginName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserByLoginNameGlobalRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByLoginNameGlobalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.loginName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByLoginNameGlobalRequest {
    return { loginName: isSet(object.loginName) ? String(object.loginName) : "" };
  },

  toJSON(message: GetUserByLoginNameGlobalRequest): unknown {
    const obj: any = {};
    if (message.loginName !== "") {
      obj.loginName = message.loginName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByLoginNameGlobalRequest>, I>>(base?: I): GetUserByLoginNameGlobalRequest {
    return GetUserByLoginNameGlobalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByLoginNameGlobalRequest>, I>>(
    object: I,
  ): GetUserByLoginNameGlobalRequest {
    const message = createBaseGetUserByLoginNameGlobalRequest();
    message.loginName = object.loginName ?? "";
    return message;
  },
};

function createBaseGetUserByLoginNameGlobalResponse(): GetUserByLoginNameGlobalResponse {
  return { user: undefined };
}

export const GetUserByLoginNameGlobalResponse = {
  encode(message: GetUserByLoginNameGlobalResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserByLoginNameGlobalResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByLoginNameGlobalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByLoginNameGlobalResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: GetUserByLoginNameGlobalResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByLoginNameGlobalResponse>, I>>(
    base?: I,
  ): GetUserByLoginNameGlobalResponse {
    return GetUserByLoginNameGlobalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByLoginNameGlobalResponse>, I>>(
    object: I,
  ): GetUserByLoginNameGlobalResponse {
    const message = createBaseGetUserByLoginNameGlobalResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseListUsersRequest(): ListUsersRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListUsersRequest = {
  encode(message: ListUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      SearchQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(SearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? userFieldNameFromJSON(object.sortingColumn) : 0,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => SearchQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUsersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = userFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUsersRequest>, I>>(base?: I): ListUsersRequest {
    return ListUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUsersRequest>, I>>(object: I): ListUsersRequest {
    const message = createBaseListUsersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => SearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUsersResponse(): ListUsersResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListUsersResponse = {
  encode(message: ListUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      User.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? userFieldNameFromJSON(object.sortingColumn) : 0,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => User.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUsersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = userFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUsersResponse>, I>>(base?: I): ListUsersResponse {
    return ListUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUsersResponse>, I>>(object: I): ListUsersResponse {
    const message = createBaseListUsersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserChangesRequest(): ListUserChangesRequest {
  return { query: undefined, userId: "" };
}

export const ListUserChangesRequest = {
  encode(message: ListUserChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserChangesRequest {
    return {
      query: isSet(object.query) ? ChangeQuery.fromJSON(object.query) : undefined,
      userId: isSet(object.userId) ? String(object.userId) : "",
    };
  },

  toJSON(message: ListUserChangesRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ChangeQuery.toJSON(message.query);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserChangesRequest>, I>>(base?: I): ListUserChangesRequest {
    return ListUserChangesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserChangesRequest>, I>>(object: I): ListUserChangesRequest {
    const message = createBaseListUserChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseListUserChangesResponse(): ListUserChangesResponse {
  return { result: [] };
}

export const ListUserChangesResponse = {
  encode(message: ListUserChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserChangesResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => Change.fromJSON(e)) : [] };
  },

  toJSON(message: ListUserChangesResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => Change.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserChangesResponse>, I>>(base?: I): ListUserChangesResponse {
    return ListUserChangesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserChangesResponse>, I>>(object: I): ListUserChangesResponse {
    const message = createBaseListUserChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIsUserUniqueRequest(): IsUserUniqueRequest {
  return { userName: "", email: "" };
}

export const IsUserUniqueRequest = {
  encode(message: IsUserUniqueRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IsUserUniqueRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsUserUniqueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsUserUniqueRequest {
    return {
      userName: isSet(object.userName) ? String(object.userName) : "",
      email: isSet(object.email) ? String(object.email) : "",
    };
  },

  toJSON(message: IsUserUniqueRequest): unknown {
    const obj: any = {};
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IsUserUniqueRequest>, I>>(base?: I): IsUserUniqueRequest {
    return IsUserUniqueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IsUserUniqueRequest>, I>>(object: I): IsUserUniqueRequest {
    const message = createBaseIsUserUniqueRequest();
    message.userName = object.userName ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseIsUserUniqueResponse(): IsUserUniqueResponse {
  return { isUnique: false };
}

export const IsUserUniqueResponse = {
  encode(message: IsUserUniqueResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isUnique === true) {
      writer.uint32(8).bool(message.isUnique);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IsUserUniqueResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsUserUniqueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isUnique = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsUserUniqueResponse {
    return { isUnique: isSet(object.isUnique) ? Boolean(object.isUnique) : false };
  },

  toJSON(message: IsUserUniqueResponse): unknown {
    const obj: any = {};
    if (message.isUnique === true) {
      obj.isUnique = message.isUnique;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IsUserUniqueResponse>, I>>(base?: I): IsUserUniqueResponse {
    return IsUserUniqueResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IsUserUniqueResponse>, I>>(object: I): IsUserUniqueResponse {
    const message = createBaseIsUserUniqueResponse();
    message.isUnique = object.isUnique ?? false;
    return message;
  },
};

function createBaseAddHumanUserRequest(): AddHumanUserRequest {
  return { userName: "", profile: undefined, email: undefined, phone: undefined, initialPassword: "" };
}

export const AddHumanUserRequest = {
  encode(message: AddHumanUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.profile !== undefined) {
      AddHumanUserRequest_Profile.encode(message.profile, writer.uint32(18).fork()).ldelim();
    }
    if (message.email !== undefined) {
      AddHumanUserRequest_Email.encode(message.email, writer.uint32(26).fork()).ldelim();
    }
    if (message.phone !== undefined) {
      AddHumanUserRequest_Phone.encode(message.phone, writer.uint32(34).fork()).ldelim();
    }
    if (message.initialPassword !== "") {
      writer.uint32(42).string(message.initialPassword);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = AddHumanUserRequest_Profile.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = AddHumanUserRequest_Email.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.phone = AddHumanUserRequest_Phone.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.initialPassword = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddHumanUserRequest {
    return {
      userName: isSet(object.userName) ? String(object.userName) : "",
      profile: isSet(object.profile) ? AddHumanUserRequest_Profile.fromJSON(object.profile) : undefined,
      email: isSet(object.email) ? AddHumanUserRequest_Email.fromJSON(object.email) : undefined,
      phone: isSet(object.phone) ? AddHumanUserRequest_Phone.fromJSON(object.phone) : undefined,
      initialPassword: isSet(object.initialPassword) ? String(object.initialPassword) : "",
    };
  },

  toJSON(message: AddHumanUserRequest): unknown {
    const obj: any = {};
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.profile !== undefined) {
      obj.profile = AddHumanUserRequest_Profile.toJSON(message.profile);
    }
    if (message.email !== undefined) {
      obj.email = AddHumanUserRequest_Email.toJSON(message.email);
    }
    if (message.phone !== undefined) {
      obj.phone = AddHumanUserRequest_Phone.toJSON(message.phone);
    }
    if (message.initialPassword !== "") {
      obj.initialPassword = message.initialPassword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddHumanUserRequest>, I>>(base?: I): AddHumanUserRequest {
    return AddHumanUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddHumanUserRequest>, I>>(object: I): AddHumanUserRequest {
    const message = createBaseAddHumanUserRequest();
    message.userName = object.userName ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? AddHumanUserRequest_Profile.fromPartial(object.profile)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null)
      ? AddHumanUserRequest_Email.fromPartial(object.email)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null)
      ? AddHumanUserRequest_Phone.fromPartial(object.phone)
      : undefined;
    message.initialPassword = object.initialPassword ?? "";
    return message;
  },
};

function createBaseAddHumanUserRequest_Profile(): AddHumanUserRequest_Profile {
  return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}

export const AddHumanUserRequest_Profile = {
  encode(message: AddHumanUserRequest_Profile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(42).string(message.preferredLanguage);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserRequest_Profile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserRequest_Profile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddHumanUserRequest_Profile {
    return {
      firstName: isSet(object.firstName) ? String(object.firstName) : "",
      lastName: isSet(object.lastName) ? String(object.lastName) : "",
      nickName: isSet(object.nickName) ? String(object.nickName) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      preferredLanguage: isSet(object.preferredLanguage) ? String(object.preferredLanguage) : "",
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
    };
  },

  toJSON(message: AddHumanUserRequest_Profile): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.preferredLanguage !== "") {
      obj.preferredLanguage = message.preferredLanguage;
    }
    if (message.gender !== 0) {
      obj.gender = genderToJSON(message.gender);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddHumanUserRequest_Profile>, I>>(base?: I): AddHumanUserRequest_Profile {
    return AddHumanUserRequest_Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddHumanUserRequest_Profile>, I>>(object: I): AddHumanUserRequest_Profile {
    const message = createBaseAddHumanUserRequest_Profile();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.nickName = object.nickName ?? "";
    message.displayName = object.displayName ?? "";
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.gender = object.gender ?? 0;
    return message;
  },
};

function createBaseAddHumanUserRequest_Email(): AddHumanUserRequest_Email {
  return { email: "", isEmailVerified: false };
}

export const AddHumanUserRequest_Email = {
  encode(message: AddHumanUserRequest_Email, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.isEmailVerified === true) {
      writer.uint32(16).bool(message.isEmailVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserRequest_Email {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserRequest_Email();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddHumanUserRequest_Email {
    return {
      email: isSet(object.email) ? String(object.email) : "",
      isEmailVerified: isSet(object.isEmailVerified) ? Boolean(object.isEmailVerified) : false,
    };
  },

  toJSON(message: AddHumanUserRequest_Email): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.isEmailVerified === true) {
      obj.isEmailVerified = message.isEmailVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddHumanUserRequest_Email>, I>>(base?: I): AddHumanUserRequest_Email {
    return AddHumanUserRequest_Email.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddHumanUserRequest_Email>, I>>(object: I): AddHumanUserRequest_Email {
    const message = createBaseAddHumanUserRequest_Email();
    message.email = object.email ?? "";
    message.isEmailVerified = object.isEmailVerified ?? false;
    return message;
  },
};

function createBaseAddHumanUserRequest_Phone(): AddHumanUserRequest_Phone {
  return { phone: "", isPhoneVerified: false };
}

export const AddHumanUserRequest_Phone = {
  encode(message: AddHumanUserRequest_Phone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.phone !== "") {
      writer.uint32(10).string(message.phone);
    }
    if (message.isPhoneVerified === true) {
      writer.uint32(16).bool(message.isPhoneVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserRequest_Phone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserRequest_Phone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPhoneVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddHumanUserRequest_Phone {
    return {
      phone: isSet(object.phone) ? String(object.phone) : "",
      isPhoneVerified: isSet(object.isPhoneVerified) ? Boolean(object.isPhoneVerified) : false,
    };
  },

  toJSON(message: AddHumanUserRequest_Phone): unknown {
    const obj: any = {};
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.isPhoneVerified === true) {
      obj.isPhoneVerified = message.isPhoneVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddHumanUserRequest_Phone>, I>>(base?: I): AddHumanUserRequest_Phone {
    return AddHumanUserRequest_Phone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddHumanUserRequest_Phone>, I>>(object: I): AddHumanUserRequest_Phone {
    const message = createBaseAddHumanUserRequest_Phone();
    message.phone = object.phone ?? "";
    message.isPhoneVerified = object.isPhoneVerified ?? false;
    return message;
  },
};

function createBaseAddHumanUserResponse(): AddHumanUserResponse {
  return { userId: "", details: undefined };
}

export const AddHumanUserResponse = {
  encode(message: AddHumanUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddHumanUserResponse {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddHumanUserResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddHumanUserResponse>, I>>(base?: I): AddHumanUserResponse {
    return AddHumanUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddHumanUserResponse>, I>>(object: I): AddHumanUserResponse {
    const message = createBaseAddHumanUserResponse();
    message.userId = object.userId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseImportHumanUserRequest(): ImportHumanUserRequest {
  return {
    userName: "",
    profile: undefined,
    email: undefined,
    phone: undefined,
    password: "",
    hashedPassword: undefined,
    passwordChangeRequired: false,
    requestPasswordlessRegistration: false,
    otpCode: "",
    idps: [],
  };
}

export const ImportHumanUserRequest = {
  encode(message: ImportHumanUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.profile !== undefined) {
      ImportHumanUserRequest_Profile.encode(message.profile, writer.uint32(18).fork()).ldelim();
    }
    if (message.email !== undefined) {
      ImportHumanUserRequest_Email.encode(message.email, writer.uint32(26).fork()).ldelim();
    }
    if (message.phone !== undefined) {
      ImportHumanUserRequest_Phone.encode(message.phone, writer.uint32(34).fork()).ldelim();
    }
    if (message.password !== "") {
      writer.uint32(42).string(message.password);
    }
    if (message.hashedPassword !== undefined) {
      ImportHumanUserRequest_HashedPassword.encode(message.hashedPassword, writer.uint32(50).fork()).ldelim();
    }
    if (message.passwordChangeRequired === true) {
      writer.uint32(56).bool(message.passwordChangeRequired);
    }
    if (message.requestPasswordlessRegistration === true) {
      writer.uint32(64).bool(message.requestPasswordlessRegistration);
    }
    if (message.otpCode !== "") {
      writer.uint32(74).string(message.otpCode);
    }
    for (const v of message.idps) {
      ImportHumanUserRequest_IDP.encode(v!, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = ImportHumanUserRequest_Profile.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = ImportHumanUserRequest_Email.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.phone = ImportHumanUserRequest_Phone.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.password = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.hashedPassword = ImportHumanUserRequest_HashedPassword.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.passwordChangeRequired = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.requestPasswordlessRegistration = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.otpCode = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.idps.push(ImportHumanUserRequest_IDP.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportHumanUserRequest {
    return {
      userName: isSet(object.userName) ? String(object.userName) : "",
      profile: isSet(object.profile) ? ImportHumanUserRequest_Profile.fromJSON(object.profile) : undefined,
      email: isSet(object.email) ? ImportHumanUserRequest_Email.fromJSON(object.email) : undefined,
      phone: isSet(object.phone) ? ImportHumanUserRequest_Phone.fromJSON(object.phone) : undefined,
      password: isSet(object.password) ? String(object.password) : "",
      hashedPassword: isSet(object.hashedPassword)
        ? ImportHumanUserRequest_HashedPassword.fromJSON(object.hashedPassword)
        : undefined,
      passwordChangeRequired: isSet(object.passwordChangeRequired) ? Boolean(object.passwordChangeRequired) : false,
      requestPasswordlessRegistration: isSet(object.requestPasswordlessRegistration)
        ? Boolean(object.requestPasswordlessRegistration)
        : false,
      otpCode: isSet(object.otpCode) ? String(object.otpCode) : "",
      idps: Array.isArray(object?.idps) ? object.idps.map((e: any) => ImportHumanUserRequest_IDP.fromJSON(e)) : [],
    };
  },

  toJSON(message: ImportHumanUserRequest): unknown {
    const obj: any = {};
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.profile !== undefined) {
      obj.profile = ImportHumanUserRequest_Profile.toJSON(message.profile);
    }
    if (message.email !== undefined) {
      obj.email = ImportHumanUserRequest_Email.toJSON(message.email);
    }
    if (message.phone !== undefined) {
      obj.phone = ImportHumanUserRequest_Phone.toJSON(message.phone);
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.hashedPassword !== undefined) {
      obj.hashedPassword = ImportHumanUserRequest_HashedPassword.toJSON(message.hashedPassword);
    }
    if (message.passwordChangeRequired === true) {
      obj.passwordChangeRequired = message.passwordChangeRequired;
    }
    if (message.requestPasswordlessRegistration === true) {
      obj.requestPasswordlessRegistration = message.requestPasswordlessRegistration;
    }
    if (message.otpCode !== "") {
      obj.otpCode = message.otpCode;
    }
    if (message.idps?.length) {
      obj.idps = message.idps.map((e) => ImportHumanUserRequest_IDP.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportHumanUserRequest>, I>>(base?: I): ImportHumanUserRequest {
    return ImportHumanUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportHumanUserRequest>, I>>(object: I): ImportHumanUserRequest {
    const message = createBaseImportHumanUserRequest();
    message.userName = object.userName ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? ImportHumanUserRequest_Profile.fromPartial(object.profile)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null)
      ? ImportHumanUserRequest_Email.fromPartial(object.email)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null)
      ? ImportHumanUserRequest_Phone.fromPartial(object.phone)
      : undefined;
    message.password = object.password ?? "";
    message.hashedPassword = (object.hashedPassword !== undefined && object.hashedPassword !== null)
      ? ImportHumanUserRequest_HashedPassword.fromPartial(object.hashedPassword)
      : undefined;
    message.passwordChangeRequired = object.passwordChangeRequired ?? false;
    message.requestPasswordlessRegistration = object.requestPasswordlessRegistration ?? false;
    message.otpCode = object.otpCode ?? "";
    message.idps = object.idps?.map((e) => ImportHumanUserRequest_IDP.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportHumanUserRequest_Profile(): ImportHumanUserRequest_Profile {
  return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}

export const ImportHumanUserRequest_Profile = {
  encode(message: ImportHumanUserRequest_Profile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(42).string(message.preferredLanguage);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_Profile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_Profile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportHumanUserRequest_Profile {
    return {
      firstName: isSet(object.firstName) ? String(object.firstName) : "",
      lastName: isSet(object.lastName) ? String(object.lastName) : "",
      nickName: isSet(object.nickName) ? String(object.nickName) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      preferredLanguage: isSet(object.preferredLanguage) ? String(object.preferredLanguage) : "",
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
    };
  },

  toJSON(message: ImportHumanUserRequest_Profile): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.preferredLanguage !== "") {
      obj.preferredLanguage = message.preferredLanguage;
    }
    if (message.gender !== 0) {
      obj.gender = genderToJSON(message.gender);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportHumanUserRequest_Profile>, I>>(base?: I): ImportHumanUserRequest_Profile {
    return ImportHumanUserRequest_Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportHumanUserRequest_Profile>, I>>(
    object: I,
  ): ImportHumanUserRequest_Profile {
    const message = createBaseImportHumanUserRequest_Profile();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.nickName = object.nickName ?? "";
    message.displayName = object.displayName ?? "";
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.gender = object.gender ?? 0;
    return message;
  },
};

function createBaseImportHumanUserRequest_Email(): ImportHumanUserRequest_Email {
  return { email: "", isEmailVerified: false };
}

export const ImportHumanUserRequest_Email = {
  encode(message: ImportHumanUserRequest_Email, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.isEmailVerified === true) {
      writer.uint32(16).bool(message.isEmailVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_Email {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_Email();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportHumanUserRequest_Email {
    return {
      email: isSet(object.email) ? String(object.email) : "",
      isEmailVerified: isSet(object.isEmailVerified) ? Boolean(object.isEmailVerified) : false,
    };
  },

  toJSON(message: ImportHumanUserRequest_Email): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.isEmailVerified === true) {
      obj.isEmailVerified = message.isEmailVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportHumanUserRequest_Email>, I>>(base?: I): ImportHumanUserRequest_Email {
    return ImportHumanUserRequest_Email.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportHumanUserRequest_Email>, I>>(object: I): ImportHumanUserRequest_Email {
    const message = createBaseImportHumanUserRequest_Email();
    message.email = object.email ?? "";
    message.isEmailVerified = object.isEmailVerified ?? false;
    return message;
  },
};

function createBaseImportHumanUserRequest_Phone(): ImportHumanUserRequest_Phone {
  return { phone: "", isPhoneVerified: false };
}

export const ImportHumanUserRequest_Phone = {
  encode(message: ImportHumanUserRequest_Phone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.phone !== "") {
      writer.uint32(10).string(message.phone);
    }
    if (message.isPhoneVerified === true) {
      writer.uint32(16).bool(message.isPhoneVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_Phone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_Phone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPhoneVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportHumanUserRequest_Phone {
    return {
      phone: isSet(object.phone) ? String(object.phone) : "",
      isPhoneVerified: isSet(object.isPhoneVerified) ? Boolean(object.isPhoneVerified) : false,
    };
  },

  toJSON(message: ImportHumanUserRequest_Phone): unknown {
    const obj: any = {};
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.isPhoneVerified === true) {
      obj.isPhoneVerified = message.isPhoneVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportHumanUserRequest_Phone>, I>>(base?: I): ImportHumanUserRequest_Phone {
    return ImportHumanUserRequest_Phone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportHumanUserRequest_Phone>, I>>(object: I): ImportHumanUserRequest_Phone {
    const message = createBaseImportHumanUserRequest_Phone();
    message.phone = object.phone ?? "";
    message.isPhoneVerified = object.isPhoneVerified ?? false;
    return message;
  },
};

function createBaseImportHumanUserRequest_HashedPassword(): ImportHumanUserRequest_HashedPassword {
  return { value: "" };
}

export const ImportHumanUserRequest_HashedPassword = {
  encode(message: ImportHumanUserRequest_HashedPassword, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_HashedPassword {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_HashedPassword();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportHumanUserRequest_HashedPassword {
    return { value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: ImportHumanUserRequest_HashedPassword): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportHumanUserRequest_HashedPassword>, I>>(
    base?: I,
  ): ImportHumanUserRequest_HashedPassword {
    return ImportHumanUserRequest_HashedPassword.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportHumanUserRequest_HashedPassword>, I>>(
    object: I,
  ): ImportHumanUserRequest_HashedPassword {
    const message = createBaseImportHumanUserRequest_HashedPassword();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseImportHumanUserRequest_IDP(): ImportHumanUserRequest_IDP {
  return { configId: "", externalUserId: "", displayName: "" };
}

export const ImportHumanUserRequest_IDP = {
  encode(message: ImportHumanUserRequest_IDP, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.configId !== "") {
      writer.uint32(10).string(message.configId);
    }
    if (message.externalUserId !== "") {
      writer.uint32(18).string(message.externalUserId);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_IDP {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_IDP();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.configId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.externalUserId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportHumanUserRequest_IDP {
    return {
      configId: isSet(object.configId) ? String(object.configId) : "",
      externalUserId: isSet(object.externalUserId) ? String(object.externalUserId) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
    };
  },

  toJSON(message: ImportHumanUserRequest_IDP): unknown {
    const obj: any = {};
    if (message.configId !== "") {
      obj.configId = message.configId;
    }
    if (message.externalUserId !== "") {
      obj.externalUserId = message.externalUserId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportHumanUserRequest_IDP>, I>>(base?: I): ImportHumanUserRequest_IDP {
    return ImportHumanUserRequest_IDP.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportHumanUserRequest_IDP>, I>>(object: I): ImportHumanUserRequest_IDP {
    const message = createBaseImportHumanUserRequest_IDP();
    message.configId = object.configId ?? "";
    message.externalUserId = object.externalUserId ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseImportHumanUserResponse(): ImportHumanUserResponse {
  return { userId: "", details: undefined, passwordlessRegistration: undefined };
}

export const ImportHumanUserResponse = {
  encode(message: ImportHumanUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    if (message.passwordlessRegistration !== undefined) {
      ImportHumanUserResponse_PasswordlessRegistration.encode(
        message.passwordlessRegistration,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.passwordlessRegistration = ImportHumanUserResponse_PasswordlessRegistration.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportHumanUserResponse {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      passwordlessRegistration: isSet(object.passwordlessRegistration)
        ? ImportHumanUserResponse_PasswordlessRegistration.fromJSON(object.passwordlessRegistration)
        : undefined,
    };
  },

  toJSON(message: ImportHumanUserResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.passwordlessRegistration !== undefined) {
      obj.passwordlessRegistration = ImportHumanUserResponse_PasswordlessRegistration.toJSON(
        message.passwordlessRegistration,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportHumanUserResponse>, I>>(base?: I): ImportHumanUserResponse {
    return ImportHumanUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportHumanUserResponse>, I>>(object: I): ImportHumanUserResponse {
    const message = createBaseImportHumanUserResponse();
    message.userId = object.userId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.passwordlessRegistration =
      (object.passwordlessRegistration !== undefined && object.passwordlessRegistration !== null)
        ? ImportHumanUserResponse_PasswordlessRegistration.fromPartial(object.passwordlessRegistration)
        : undefined;
    return message;
  },
};

function createBaseImportHumanUserResponse_PasswordlessRegistration(): ImportHumanUserResponse_PasswordlessRegistration {
  return { link: "", lifetime: undefined, expiration: undefined };
}

export const ImportHumanUserResponse_PasswordlessRegistration = {
  encode(
    message: ImportHumanUserResponse_PasswordlessRegistration,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.link !== "") {
      writer.uint32(10).string(message.link);
    }
    if (message.lifetime !== undefined) {
      Duration.encode(message.lifetime, writer.uint32(18).fork()).ldelim();
    }
    if (message.expiration !== undefined) {
      Duration.encode(message.expiration, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserResponse_PasswordlessRegistration {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserResponse_PasswordlessRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.link = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportHumanUserResponse_PasswordlessRegistration {
    return {
      link: isSet(object.link) ? String(object.link) : "",
      lifetime: isSet(object.lifetime) ? Duration.fromJSON(object.lifetime) : undefined,
      expiration: isSet(object.expiration) ? Duration.fromJSON(object.expiration) : undefined,
    };
  },

  toJSON(message: ImportHumanUserResponse_PasswordlessRegistration): unknown {
    const obj: any = {};
    if (message.link !== "") {
      obj.link = message.link;
    }
    if (message.lifetime !== undefined) {
      obj.lifetime = Duration.toJSON(message.lifetime);
    }
    if (message.expiration !== undefined) {
      obj.expiration = Duration.toJSON(message.expiration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImportHumanUserResponse_PasswordlessRegistration>, I>>(
    base?: I,
  ): ImportHumanUserResponse_PasswordlessRegistration {
    return ImportHumanUserResponse_PasswordlessRegistration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImportHumanUserResponse_PasswordlessRegistration>, I>>(
    object: I,
  ): ImportHumanUserResponse_PasswordlessRegistration {
    const message = createBaseImportHumanUserResponse_PasswordlessRegistration();
    message.link = object.link ?? "";
    message.lifetime = (object.lifetime !== undefined && object.lifetime !== null)
      ? Duration.fromPartial(object.lifetime)
      : undefined;
    message.expiration = (object.expiration !== undefined && object.expiration !== null)
      ? Duration.fromPartial(object.expiration)
      : undefined;
    return message;
  },
};

function createBaseAddMachineUserRequest(): AddMachineUserRequest {
  return { userName: "", name: "", description: "", accessTokenType: 0 };
}

export const AddMachineUserRequest = {
  encode(message: AddMachineUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.accessTokenType !== 0) {
      writer.uint32(32).int32(message.accessTokenType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMachineUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMachineUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accessTokenType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMachineUserRequest {
    return {
      userName: isSet(object.userName) ? String(object.userName) : "",
      name: isSet(object.name) ? String(object.name) : "",
      description: isSet(object.description) ? String(object.description) : "",
      accessTokenType: isSet(object.accessTokenType) ? accessTokenTypeFromJSON(object.accessTokenType) : 0,
    };
  },

  toJSON(message: AddMachineUserRequest): unknown {
    const obj: any = {};
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.accessTokenType !== 0) {
      obj.accessTokenType = accessTokenTypeToJSON(message.accessTokenType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMachineUserRequest>, I>>(base?: I): AddMachineUserRequest {
    return AddMachineUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMachineUserRequest>, I>>(object: I): AddMachineUserRequest {
    const message = createBaseAddMachineUserRequest();
    message.userName = object.userName ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.accessTokenType = object.accessTokenType ?? 0;
    return message;
  },
};

function createBaseAddMachineUserResponse(): AddMachineUserResponse {
  return { userId: "", details: undefined };
}

export const AddMachineUserResponse = {
  encode(message: AddMachineUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMachineUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMachineUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMachineUserResponse {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddMachineUserResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMachineUserResponse>, I>>(base?: I): AddMachineUserResponse {
    return AddMachineUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMachineUserResponse>, I>>(object: I): AddMachineUserResponse {
    const message = createBaseAddMachineUserResponse();
    message.userId = object.userId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateUserRequest(): DeactivateUserRequest {
  return { id: "" };
}

export const DeactivateUserRequest = {
  encode(message: DeactivateUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateUserRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: DeactivateUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateUserRequest>, I>>(base?: I): DeactivateUserRequest {
    return DeactivateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateUserRequest>, I>>(object: I): DeactivateUserRequest {
    const message = createBaseDeactivateUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateUserResponse(): DeactivateUserResponse {
  return { details: undefined };
}

export const DeactivateUserResponse = {
  encode(message: DeactivateUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateUserResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateUserResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateUserResponse>, I>>(base?: I): DeactivateUserResponse {
    return DeactivateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateUserResponse>, I>>(object: I): DeactivateUserResponse {
    const message = createBaseDeactivateUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateUserRequest(): ReactivateUserRequest {
  return { id: "" };
}

export const ReactivateUserRequest = {
  encode(message: ReactivateUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateUserRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: ReactivateUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateUserRequest>, I>>(base?: I): ReactivateUserRequest {
    return ReactivateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateUserRequest>, I>>(object: I): ReactivateUserRequest {
    const message = createBaseReactivateUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseReactivateUserResponse(): ReactivateUserResponse {
  return { details: undefined };
}

export const ReactivateUserResponse = {
  encode(message: ReactivateUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateUserResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateUserResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateUserResponse>, I>>(base?: I): ReactivateUserResponse {
    return ReactivateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateUserResponse>, I>>(object: I): ReactivateUserResponse {
    const message = createBaseReactivateUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseLockUserRequest(): LockUserRequest {
  return { id: "" };
}

export const LockUserRequest = {
  encode(message: LockUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LockUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LockUserRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: LockUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LockUserRequest>, I>>(base?: I): LockUserRequest {
    return LockUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LockUserRequest>, I>>(object: I): LockUserRequest {
    const message = createBaseLockUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseLockUserResponse(): LockUserResponse {
  return { details: undefined };
}

export const LockUserResponse = {
  encode(message: LockUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LockUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LockUserResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: LockUserResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LockUserResponse>, I>>(base?: I): LockUserResponse {
    return LockUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LockUserResponse>, I>>(object: I): LockUserResponse {
    const message = createBaseLockUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUnlockUserRequest(): UnlockUserRequest {
  return { id: "" };
}

export const UnlockUserRequest = {
  encode(message: UnlockUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnlockUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlockUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnlockUserRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: UnlockUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnlockUserRequest>, I>>(base?: I): UnlockUserRequest {
    return UnlockUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnlockUserRequest>, I>>(object: I): UnlockUserRequest {
    const message = createBaseUnlockUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUnlockUserResponse(): UnlockUserResponse {
  return { details: undefined };
}

export const UnlockUserResponse = {
  encode(message: UnlockUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnlockUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlockUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnlockUserResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UnlockUserResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnlockUserResponse>, I>>(base?: I): UnlockUserResponse {
    return UnlockUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnlockUserResponse>, I>>(object: I): UnlockUserResponse {
    const message = createBaseUnlockUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveUserRequest(): RemoveUserRequest {
  return { id: "" };
}

export const RemoveUserRequest = {
  encode(message: RemoveUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveUserRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: RemoveUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveUserRequest>, I>>(base?: I): RemoveUserRequest {
    return RemoveUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveUserRequest>, I>>(object: I): RemoveUserRequest {
    const message = createBaseRemoveUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveUserResponse(): RemoveUserResponse {
  return { details: undefined };
}

export const RemoveUserResponse = {
  encode(message: RemoveUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveUserResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveUserResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveUserResponse>, I>>(base?: I): RemoveUserResponse {
    return RemoveUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveUserResponse>, I>>(object: I): RemoveUserResponse {
    const message = createBaseRemoveUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserNameRequest(): UpdateUserNameRequest {
  return { userId: "", userName: "" };
}

export const UpdateUserNameRequest = {
  encode(message: UpdateUserNameRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.userName !== "") {
      writer.uint32(18).string(message.userName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserNameRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserNameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserNameRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      userName: isSet(object.userName) ? String(object.userName) : "",
    };
  },

  toJSON(message: UpdateUserNameRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserNameRequest>, I>>(base?: I): UpdateUserNameRequest {
    return UpdateUserNameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserNameRequest>, I>>(object: I): UpdateUserNameRequest {
    const message = createBaseUpdateUserNameRequest();
    message.userId = object.userId ?? "";
    message.userName = object.userName ?? "";
    return message;
  },
};

function createBaseUpdateUserNameResponse(): UpdateUserNameResponse {
  return { details: undefined };
}

export const UpdateUserNameResponse = {
  encode(message: UpdateUserNameResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserNameResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserNameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserNameResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateUserNameResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserNameResponse>, I>>(base?: I): UpdateUserNameResponse {
    return UpdateUserNameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserNameResponse>, I>>(object: I): UpdateUserNameResponse {
    const message = createBaseUpdateUserNameResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListUserMetadataRequest(): ListUserMetadataRequest {
  return { id: "", query: undefined, queries: [] };
}

export const ListUserMetadataRequest = {
  encode(message: ListUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      MetadataQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(MetadataQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserMetadataRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => MetadataQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUserMetadataRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => MetadataQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserMetadataRequest>, I>>(base?: I): ListUserMetadataRequest {
    return ListUserMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserMetadataRequest>, I>>(object: I): ListUserMetadataRequest {
    const message = createBaseListUserMetadataRequest();
    message.id = object.id ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => MetadataQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserMetadataResponse(): ListUserMetadataResponse {
  return { details: undefined, result: [] };
}

export const ListUserMetadataResponse = {
  encode(message: ListUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Metadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserMetadataResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Metadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUserMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Metadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserMetadataResponse>, I>>(base?: I): ListUserMetadataResponse {
    return ListUserMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserMetadataResponse>, I>>(object: I): ListUserMetadataResponse {
    const message = createBaseListUserMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUserMetadataRequest(): GetUserMetadataRequest {
  return { id: "", key: "" };
}

export const GetUserMetadataRequest = {
  encode(message: GetUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserMetadataRequest {
    return { id: isSet(object.id) ? String(object.id) : "", key: isSet(object.key) ? String(object.key) : "" };
  },

  toJSON(message: GetUserMetadataRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserMetadataRequest>, I>>(base?: I): GetUserMetadataRequest {
    return GetUserMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserMetadataRequest>, I>>(object: I): GetUserMetadataRequest {
    const message = createBaseGetUserMetadataRequest();
    message.id = object.id ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseGetUserMetadataResponse(): GetUserMetadataResponse {
  return { metadata: undefined };
}

export const GetUserMetadataResponse = {
  encode(message: GetUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserMetadataResponse {
    return { metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined };
  },

  toJSON(message: GetUserMetadataResponse): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserMetadataResponse>, I>>(base?: I): GetUserMetadataResponse {
    return GetUserMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserMetadataResponse>, I>>(object: I): GetUserMetadataResponse {
    const message = createBaseGetUserMetadataResponse();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSetUserMetadataRequest(): SetUserMetadataRequest {
  return { id: "", key: "", value: new Uint8Array(0) };
}

export const SetUserMetadataRequest = {
  encode(message: SetUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(26).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUserMetadataRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: SetUserMetadataRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUserMetadataRequest>, I>>(base?: I): SetUserMetadataRequest {
    return SetUserMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUserMetadataRequest>, I>>(object: I): SetUserMetadataRequest {
    const message = createBaseSetUserMetadataRequest();
    message.id = object.id ?? "";
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSetUserMetadataResponse(): SetUserMetadataResponse {
  return { id: "", details: undefined };
}

export const SetUserMetadataResponse = {
  encode(message: SetUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUserMetadataResponse {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: SetUserMetadataResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUserMetadataResponse>, I>>(base?: I): SetUserMetadataResponse {
    return SetUserMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUserMetadataResponse>, I>>(object: I): SetUserMetadataResponse {
    const message = createBaseSetUserMetadataResponse();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkSetUserMetadataRequest(): BulkSetUserMetadataRequest {
  return { id: "", metadata: [] };
}

export const BulkSetUserMetadataRequest = {
  encode(message: BulkSetUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.metadata) {
      BulkSetUserMetadataRequest_Metadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata.push(BulkSetUserMetadataRequest_Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkSetUserMetadataRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      metadata: Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => BulkSetUserMetadataRequest_Metadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BulkSetUserMetadataRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => BulkSetUserMetadataRequest_Metadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkSetUserMetadataRequest>, I>>(base?: I): BulkSetUserMetadataRequest {
    return BulkSetUserMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkSetUserMetadataRequest>, I>>(object: I): BulkSetUserMetadataRequest {
    const message = createBaseBulkSetUserMetadataRequest();
    message.id = object.id ?? "";
    message.metadata = object.metadata?.map((e) => BulkSetUserMetadataRequest_Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkSetUserMetadataRequest_Metadata(): BulkSetUserMetadataRequest_Metadata {
  return { key: "", value: new Uint8Array(0) };
}

export const BulkSetUserMetadataRequest_Metadata = {
  encode(message: BulkSetUserMetadataRequest_Metadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetUserMetadataRequest_Metadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetUserMetadataRequest_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkSetUserMetadataRequest_Metadata {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: BulkSetUserMetadataRequest_Metadata): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkSetUserMetadataRequest_Metadata>, I>>(
    base?: I,
  ): BulkSetUserMetadataRequest_Metadata {
    return BulkSetUserMetadataRequest_Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkSetUserMetadataRequest_Metadata>, I>>(
    object: I,
  ): BulkSetUserMetadataRequest_Metadata {
    const message = createBaseBulkSetUserMetadataRequest_Metadata();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBulkSetUserMetadataResponse(): BulkSetUserMetadataResponse {
  return { details: undefined };
}

export const BulkSetUserMetadataResponse = {
  encode(message: BulkSetUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkSetUserMetadataResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: BulkSetUserMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkSetUserMetadataResponse>, I>>(base?: I): BulkSetUserMetadataResponse {
    return BulkSetUserMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkSetUserMetadataResponse>, I>>(object: I): BulkSetUserMetadataResponse {
    const message = createBaseBulkSetUserMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveUserMetadataRequest(): RemoveUserMetadataRequest {
  return { id: "", key: "" };
}

export const RemoveUserMetadataRequest = {
  encode(message: RemoveUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveUserMetadataRequest {
    return { id: isSet(object.id) ? String(object.id) : "", key: isSet(object.key) ? String(object.key) : "" };
  },

  toJSON(message: RemoveUserMetadataRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveUserMetadataRequest>, I>>(base?: I): RemoveUserMetadataRequest {
    return RemoveUserMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveUserMetadataRequest>, I>>(object: I): RemoveUserMetadataRequest {
    const message = createBaseRemoveUserMetadataRequest();
    message.id = object.id ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseRemoveUserMetadataResponse(): RemoveUserMetadataResponse {
  return { details: undefined };
}

export const RemoveUserMetadataResponse = {
  encode(message: RemoveUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveUserMetadataResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveUserMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveUserMetadataResponse>, I>>(base?: I): RemoveUserMetadataResponse {
    return RemoveUserMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveUserMetadataResponse>, I>>(object: I): RemoveUserMetadataResponse {
    const message = createBaseRemoveUserMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkRemoveUserMetadataRequest(): BulkRemoveUserMetadataRequest {
  return { id: "", keys: [] };
}

export const BulkRemoveUserMetadataRequest = {
  encode(message: BulkRemoveUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.keys) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkRemoveUserMetadataRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      keys: Array.isArray(object?.keys) ? object.keys.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: BulkRemoveUserMetadataRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.keys?.length) {
      obj.keys = message.keys;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkRemoveUserMetadataRequest>, I>>(base?: I): BulkRemoveUserMetadataRequest {
    return BulkRemoveUserMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkRemoveUserMetadataRequest>, I>>(
    object: I,
  ): BulkRemoveUserMetadataRequest {
    const message = createBaseBulkRemoveUserMetadataRequest();
    message.id = object.id ?? "";
    message.keys = object.keys?.map((e) => e) || [];
    return message;
  },
};

function createBaseBulkRemoveUserMetadataResponse(): BulkRemoveUserMetadataResponse {
  return { details: undefined };
}

export const BulkRemoveUserMetadataResponse = {
  encode(message: BulkRemoveUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkRemoveUserMetadataResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: BulkRemoveUserMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkRemoveUserMetadataResponse>, I>>(base?: I): BulkRemoveUserMetadataResponse {
    return BulkRemoveUserMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkRemoveUserMetadataResponse>, I>>(
    object: I,
  ): BulkRemoveUserMetadataResponse {
    const message = createBaseBulkRemoveUserMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetHumanProfileRequest(): GetHumanProfileRequest {
  return { userId: "" };
}

export const GetHumanProfileRequest = {
  encode(message: GetHumanProfileRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanProfileRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHumanProfileRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: GetHumanProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHumanProfileRequest>, I>>(base?: I): GetHumanProfileRequest {
    return GetHumanProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHumanProfileRequest>, I>>(object: I): GetHumanProfileRequest {
    const message = createBaseGetHumanProfileRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetHumanProfileResponse(): GetHumanProfileResponse {
  return { details: undefined, profile: undefined };
}

export const GetHumanProfileResponse = {
  encode(message: GetHumanProfileResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanProfileResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHumanProfileResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
    };
  },

  toJSON(message: GetHumanProfileResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHumanProfileResponse>, I>>(base?: I): GetHumanProfileResponse {
    return GetHumanProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHumanProfileResponse>, I>>(object: I): GetHumanProfileResponse {
    const message = createBaseGetHumanProfileResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseUpdateHumanProfileRequest(): UpdateHumanProfileRequest {
  return { userId: "", firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}

export const UpdateHumanProfileRequest = {
  encode(message: UpdateHumanProfileRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(26).string(message.lastName);
    }
    if (message.nickName !== "") {
      writer.uint32(34).string(message.nickName);
    }
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(50).string(message.preferredLanguage);
    }
    if (message.gender !== 0) {
      writer.uint32(56).int32(message.gender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanProfileRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHumanProfileRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      firstName: isSet(object.firstName) ? String(object.firstName) : "",
      lastName: isSet(object.lastName) ? String(object.lastName) : "",
      nickName: isSet(object.nickName) ? String(object.nickName) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      preferredLanguage: isSet(object.preferredLanguage) ? String(object.preferredLanguage) : "",
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
    };
  },

  toJSON(message: UpdateHumanProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.preferredLanguage !== "") {
      obj.preferredLanguage = message.preferredLanguage;
    }
    if (message.gender !== 0) {
      obj.gender = genderToJSON(message.gender);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateHumanProfileRequest>, I>>(base?: I): UpdateHumanProfileRequest {
    return UpdateHumanProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateHumanProfileRequest>, I>>(object: I): UpdateHumanProfileRequest {
    const message = createBaseUpdateHumanProfileRequest();
    message.userId = object.userId ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.nickName = object.nickName ?? "";
    message.displayName = object.displayName ?? "";
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.gender = object.gender ?? 0;
    return message;
  },
};

function createBaseUpdateHumanProfileResponse(): UpdateHumanProfileResponse {
  return { details: undefined };
}

export const UpdateHumanProfileResponse = {
  encode(message: UpdateHumanProfileResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanProfileResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHumanProfileResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateHumanProfileResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateHumanProfileResponse>, I>>(base?: I): UpdateHumanProfileResponse {
    return UpdateHumanProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateHumanProfileResponse>, I>>(object: I): UpdateHumanProfileResponse {
    const message = createBaseUpdateHumanProfileResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetHumanEmailRequest(): GetHumanEmailRequest {
  return { userId: "" };
}

export const GetHumanEmailRequest = {
  encode(message: GetHumanEmailRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanEmailRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHumanEmailRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: GetHumanEmailRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHumanEmailRequest>, I>>(base?: I): GetHumanEmailRequest {
    return GetHumanEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHumanEmailRequest>, I>>(object: I): GetHumanEmailRequest {
    const message = createBaseGetHumanEmailRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetHumanEmailResponse(): GetHumanEmailResponse {
  return { details: undefined, email: undefined };
}

export const GetHumanEmailResponse = {
  encode(message: GetHumanEmailResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.email !== undefined) {
      Email.encode(message.email, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanEmailResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = Email.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHumanEmailResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      email: isSet(object.email) ? Email.fromJSON(object.email) : undefined,
    };
  },

  toJSON(message: GetHumanEmailResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.email !== undefined) {
      obj.email = Email.toJSON(message.email);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHumanEmailResponse>, I>>(base?: I): GetHumanEmailResponse {
    return GetHumanEmailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHumanEmailResponse>, I>>(object: I): GetHumanEmailResponse {
    const message = createBaseGetHumanEmailResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null) ? Email.fromPartial(object.email) : undefined;
    return message;
  },
};

function createBaseUpdateHumanEmailRequest(): UpdateHumanEmailRequest {
  return { userId: "", email: "", isEmailVerified: false };
}

export const UpdateHumanEmailRequest = {
  encode(message: UpdateHumanEmailRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.isEmailVerified === true) {
      writer.uint32(24).bool(message.isEmailVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanEmailRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHumanEmailRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      email: isSet(object.email) ? String(object.email) : "",
      isEmailVerified: isSet(object.isEmailVerified) ? Boolean(object.isEmailVerified) : false,
    };
  },

  toJSON(message: UpdateHumanEmailRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.isEmailVerified === true) {
      obj.isEmailVerified = message.isEmailVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateHumanEmailRequest>, I>>(base?: I): UpdateHumanEmailRequest {
    return UpdateHumanEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateHumanEmailRequest>, I>>(object: I): UpdateHumanEmailRequest {
    const message = createBaseUpdateHumanEmailRequest();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    message.isEmailVerified = object.isEmailVerified ?? false;
    return message;
  },
};

function createBaseUpdateHumanEmailResponse(): UpdateHumanEmailResponse {
  return { details: undefined };
}

export const UpdateHumanEmailResponse = {
  encode(message: UpdateHumanEmailResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanEmailResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHumanEmailResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateHumanEmailResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateHumanEmailResponse>, I>>(base?: I): UpdateHumanEmailResponse {
    return UpdateHumanEmailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateHumanEmailResponse>, I>>(object: I): UpdateHumanEmailResponse {
    const message = createBaseUpdateHumanEmailResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResendHumanInitializationRequest(): ResendHumanInitializationRequest {
  return { userId: "", email: "" };
}

export const ResendHumanInitializationRequest = {
  encode(message: ResendHumanInitializationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanInitializationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanInitializationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendHumanInitializationRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      email: isSet(object.email) ? String(object.email) : "",
    };
  },

  toJSON(message: ResendHumanInitializationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendHumanInitializationRequest>, I>>(
    base?: I,
  ): ResendHumanInitializationRequest {
    return ResendHumanInitializationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendHumanInitializationRequest>, I>>(
    object: I,
  ): ResendHumanInitializationRequest {
    const message = createBaseResendHumanInitializationRequest();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseResendHumanInitializationResponse(): ResendHumanInitializationResponse {
  return { details: undefined };
}

export const ResendHumanInitializationResponse = {
  encode(message: ResendHumanInitializationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanInitializationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanInitializationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendHumanInitializationResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResendHumanInitializationResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendHumanInitializationResponse>, I>>(
    base?: I,
  ): ResendHumanInitializationResponse {
    return ResendHumanInitializationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendHumanInitializationResponse>, I>>(
    object: I,
  ): ResendHumanInitializationResponse {
    const message = createBaseResendHumanInitializationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResendHumanEmailVerificationRequest(): ResendHumanEmailVerificationRequest {
  return { userId: "" };
}

export const ResendHumanEmailVerificationRequest = {
  encode(message: ResendHumanEmailVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanEmailVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanEmailVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendHumanEmailVerificationRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: ResendHumanEmailVerificationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendHumanEmailVerificationRequest>, I>>(
    base?: I,
  ): ResendHumanEmailVerificationRequest {
    return ResendHumanEmailVerificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendHumanEmailVerificationRequest>, I>>(
    object: I,
  ): ResendHumanEmailVerificationRequest {
    const message = createBaseResendHumanEmailVerificationRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseResendHumanEmailVerificationResponse(): ResendHumanEmailVerificationResponse {
  return { details: undefined };
}

export const ResendHumanEmailVerificationResponse = {
  encode(message: ResendHumanEmailVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanEmailVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanEmailVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendHumanEmailVerificationResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResendHumanEmailVerificationResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendHumanEmailVerificationResponse>, I>>(
    base?: I,
  ): ResendHumanEmailVerificationResponse {
    return ResendHumanEmailVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendHumanEmailVerificationResponse>, I>>(
    object: I,
  ): ResendHumanEmailVerificationResponse {
    const message = createBaseResendHumanEmailVerificationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetHumanPhoneRequest(): GetHumanPhoneRequest {
  return { userId: "" };
}

export const GetHumanPhoneRequest = {
  encode(message: GetHumanPhoneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanPhoneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanPhoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHumanPhoneRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: GetHumanPhoneRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHumanPhoneRequest>, I>>(base?: I): GetHumanPhoneRequest {
    return GetHumanPhoneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHumanPhoneRequest>, I>>(object: I): GetHumanPhoneRequest {
    const message = createBaseGetHumanPhoneRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetHumanPhoneResponse(): GetHumanPhoneResponse {
  return { details: undefined, phone: undefined };
}

export const GetHumanPhoneResponse = {
  encode(message: GetHumanPhoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.phone !== undefined) {
      Phone.encode(message.phone, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanPhoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanPhoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phone = Phone.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHumanPhoneResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      phone: isSet(object.phone) ? Phone.fromJSON(object.phone) : undefined,
    };
  },

  toJSON(message: GetHumanPhoneResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.phone !== undefined) {
      obj.phone = Phone.toJSON(message.phone);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHumanPhoneResponse>, I>>(base?: I): GetHumanPhoneResponse {
    return GetHumanPhoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHumanPhoneResponse>, I>>(object: I): GetHumanPhoneResponse {
    const message = createBaseGetHumanPhoneResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null) ? Phone.fromPartial(object.phone) : undefined;
    return message;
  },
};

function createBaseUpdateHumanPhoneRequest(): UpdateHumanPhoneRequest {
  return { userId: "", phone: "", isPhoneVerified: false };
}

export const UpdateHumanPhoneRequest = {
  encode(message: UpdateHumanPhoneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.phone !== "") {
      writer.uint32(18).string(message.phone);
    }
    if (message.isPhoneVerified === true) {
      writer.uint32(24).bool(message.isPhoneVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanPhoneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanPhoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isPhoneVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHumanPhoneRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      phone: isSet(object.phone) ? String(object.phone) : "",
      isPhoneVerified: isSet(object.isPhoneVerified) ? Boolean(object.isPhoneVerified) : false,
    };
  },

  toJSON(message: UpdateHumanPhoneRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.isPhoneVerified === true) {
      obj.isPhoneVerified = message.isPhoneVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateHumanPhoneRequest>, I>>(base?: I): UpdateHumanPhoneRequest {
    return UpdateHumanPhoneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateHumanPhoneRequest>, I>>(object: I): UpdateHumanPhoneRequest {
    const message = createBaseUpdateHumanPhoneRequest();
    message.userId = object.userId ?? "";
    message.phone = object.phone ?? "";
    message.isPhoneVerified = object.isPhoneVerified ?? false;
    return message;
  },
};

function createBaseUpdateHumanPhoneResponse(): UpdateHumanPhoneResponse {
  return { details: undefined };
}

export const UpdateHumanPhoneResponse = {
  encode(message: UpdateHumanPhoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanPhoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanPhoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHumanPhoneResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateHumanPhoneResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateHumanPhoneResponse>, I>>(base?: I): UpdateHumanPhoneResponse {
    return UpdateHumanPhoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateHumanPhoneResponse>, I>>(object: I): UpdateHumanPhoneResponse {
    const message = createBaseUpdateHumanPhoneResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanPhoneRequest(): RemoveHumanPhoneRequest {
  return { userId: "" };
}

export const RemoveHumanPhoneRequest = {
  encode(message: RemoveHumanPhoneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanPhoneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanPhoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanPhoneRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: RemoveHumanPhoneRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanPhoneRequest>, I>>(base?: I): RemoveHumanPhoneRequest {
    return RemoveHumanPhoneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanPhoneRequest>, I>>(object: I): RemoveHumanPhoneRequest {
    const message = createBaseRemoveHumanPhoneRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveHumanPhoneResponse(): RemoveHumanPhoneResponse {
  return { details: undefined };
}

export const RemoveHumanPhoneResponse = {
  encode(message: RemoveHumanPhoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanPhoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanPhoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanPhoneResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveHumanPhoneResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanPhoneResponse>, I>>(base?: I): RemoveHumanPhoneResponse {
    return RemoveHumanPhoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanPhoneResponse>, I>>(object: I): RemoveHumanPhoneResponse {
    const message = createBaseRemoveHumanPhoneResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResendHumanPhoneVerificationRequest(): ResendHumanPhoneVerificationRequest {
  return { userId: "" };
}

export const ResendHumanPhoneVerificationRequest = {
  encode(message: ResendHumanPhoneVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanPhoneVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanPhoneVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendHumanPhoneVerificationRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: ResendHumanPhoneVerificationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendHumanPhoneVerificationRequest>, I>>(
    base?: I,
  ): ResendHumanPhoneVerificationRequest {
    return ResendHumanPhoneVerificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendHumanPhoneVerificationRequest>, I>>(
    object: I,
  ): ResendHumanPhoneVerificationRequest {
    const message = createBaseResendHumanPhoneVerificationRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseResendHumanPhoneVerificationResponse(): ResendHumanPhoneVerificationResponse {
  return { details: undefined };
}

export const ResendHumanPhoneVerificationResponse = {
  encode(message: ResendHumanPhoneVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanPhoneVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanPhoneVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendHumanPhoneVerificationResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResendHumanPhoneVerificationResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendHumanPhoneVerificationResponse>, I>>(
    base?: I,
  ): ResendHumanPhoneVerificationResponse {
    return ResendHumanPhoneVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendHumanPhoneVerificationResponse>, I>>(
    object: I,
  ): ResendHumanPhoneVerificationResponse {
    const message = createBaseResendHumanPhoneVerificationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanAvatarRequest(): RemoveHumanAvatarRequest {
  return { userId: "" };
}

export const RemoveHumanAvatarRequest = {
  encode(message: RemoveHumanAvatarRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAvatarRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAvatarRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanAvatarRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: RemoveHumanAvatarRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanAvatarRequest>, I>>(base?: I): RemoveHumanAvatarRequest {
    return RemoveHumanAvatarRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanAvatarRequest>, I>>(object: I): RemoveHumanAvatarRequest {
    const message = createBaseRemoveHumanAvatarRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveHumanAvatarResponse(): RemoveHumanAvatarResponse {
  return { details: undefined };
}

export const RemoveHumanAvatarResponse = {
  encode(message: RemoveHumanAvatarResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAvatarResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAvatarResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanAvatarResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveHumanAvatarResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanAvatarResponse>, I>>(base?: I): RemoveHumanAvatarResponse {
    return RemoveHumanAvatarResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanAvatarResponse>, I>>(object: I): RemoveHumanAvatarResponse {
    const message = createBaseRemoveHumanAvatarResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSetHumanInitialPasswordRequest(): SetHumanInitialPasswordRequest {
  return { userId: "", password: "" };
}

export const SetHumanInitialPasswordRequest = {
  encode(message: SetHumanInitialPasswordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHumanInitialPasswordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHumanInitialPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetHumanInitialPasswordRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      password: isSet(object.password) ? String(object.password) : "",
    };
  },

  toJSON(message: SetHumanInitialPasswordRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetHumanInitialPasswordRequest>, I>>(base?: I): SetHumanInitialPasswordRequest {
    return SetHumanInitialPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetHumanInitialPasswordRequest>, I>>(
    object: I,
  ): SetHumanInitialPasswordRequest {
    const message = createBaseSetHumanInitialPasswordRequest();
    message.userId = object.userId ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSetHumanInitialPasswordResponse(): SetHumanInitialPasswordResponse {
  return { details: undefined };
}

export const SetHumanInitialPasswordResponse = {
  encode(message: SetHumanInitialPasswordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHumanInitialPasswordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHumanInitialPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetHumanInitialPasswordResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetHumanInitialPasswordResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetHumanInitialPasswordResponse>, I>>(base?: I): SetHumanInitialPasswordResponse {
    return SetHumanInitialPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetHumanInitialPasswordResponse>, I>>(
    object: I,
  ): SetHumanInitialPasswordResponse {
    const message = createBaseSetHumanInitialPasswordResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSetHumanPasswordRequest(): SetHumanPasswordRequest {
  return { userId: "", password: "", noChangeRequired: false };
}

export const SetHumanPasswordRequest = {
  encode(message: SetHumanPasswordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.noChangeRequired === true) {
      writer.uint32(24).bool(message.noChangeRequired);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHumanPasswordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHumanPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.noChangeRequired = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetHumanPasswordRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      password: isSet(object.password) ? String(object.password) : "",
      noChangeRequired: isSet(object.noChangeRequired) ? Boolean(object.noChangeRequired) : false,
    };
  },

  toJSON(message: SetHumanPasswordRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.noChangeRequired === true) {
      obj.noChangeRequired = message.noChangeRequired;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetHumanPasswordRequest>, I>>(base?: I): SetHumanPasswordRequest {
    return SetHumanPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetHumanPasswordRequest>, I>>(object: I): SetHumanPasswordRequest {
    const message = createBaseSetHumanPasswordRequest();
    message.userId = object.userId ?? "";
    message.password = object.password ?? "";
    message.noChangeRequired = object.noChangeRequired ?? false;
    return message;
  },
};

function createBaseSetHumanPasswordResponse(): SetHumanPasswordResponse {
  return { details: undefined };
}

export const SetHumanPasswordResponse = {
  encode(message: SetHumanPasswordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHumanPasswordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHumanPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetHumanPasswordResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetHumanPasswordResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetHumanPasswordResponse>, I>>(base?: I): SetHumanPasswordResponse {
    return SetHumanPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetHumanPasswordResponse>, I>>(object: I): SetHumanPasswordResponse {
    const message = createBaseSetHumanPasswordResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSendHumanResetPasswordNotificationRequest(): SendHumanResetPasswordNotificationRequest {
  return { userId: "", type: 0 };
}

export const SendHumanResetPasswordNotificationRequest = {
  encode(message: SendHumanResetPasswordNotificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendHumanResetPasswordNotificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendHumanResetPasswordNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendHumanResetPasswordNotificationRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      type: isSet(object.type) ? sendHumanResetPasswordNotificationRequest_TypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: SendHumanResetPasswordNotificationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.type !== 0) {
      obj.type = sendHumanResetPasswordNotificationRequest_TypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendHumanResetPasswordNotificationRequest>, I>>(
    base?: I,
  ): SendHumanResetPasswordNotificationRequest {
    return SendHumanResetPasswordNotificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendHumanResetPasswordNotificationRequest>, I>>(
    object: I,
  ): SendHumanResetPasswordNotificationRequest {
    const message = createBaseSendHumanResetPasswordNotificationRequest();
    message.userId = object.userId ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseSendHumanResetPasswordNotificationResponse(): SendHumanResetPasswordNotificationResponse {
  return { details: undefined };
}

export const SendHumanResetPasswordNotificationResponse = {
  encode(message: SendHumanResetPasswordNotificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendHumanResetPasswordNotificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendHumanResetPasswordNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendHumanResetPasswordNotificationResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SendHumanResetPasswordNotificationResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendHumanResetPasswordNotificationResponse>, I>>(
    base?: I,
  ): SendHumanResetPasswordNotificationResponse {
    return SendHumanResetPasswordNotificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendHumanResetPasswordNotificationResponse>, I>>(
    object: I,
  ): SendHumanResetPasswordNotificationResponse {
    const message = createBaseSendHumanResetPasswordNotificationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListHumanAuthFactorsRequest(): ListHumanAuthFactorsRequest {
  return { userId: "" };
}

export const ListHumanAuthFactorsRequest = {
  encode(message: ListHumanAuthFactorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanAuthFactorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanAuthFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHumanAuthFactorsRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: ListHumanAuthFactorsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListHumanAuthFactorsRequest>, I>>(base?: I): ListHumanAuthFactorsRequest {
    return ListHumanAuthFactorsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListHumanAuthFactorsRequest>, I>>(object: I): ListHumanAuthFactorsRequest {
    const message = createBaseListHumanAuthFactorsRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseListHumanAuthFactorsResponse(): ListHumanAuthFactorsResponse {
  return { result: [] };
}

export const ListHumanAuthFactorsResponse = {
  encode(message: ListHumanAuthFactorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      AuthFactor.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanAuthFactorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanAuthFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(AuthFactor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHumanAuthFactorsResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => AuthFactor.fromJSON(e)) : [] };
  },

  toJSON(message: ListHumanAuthFactorsResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => AuthFactor.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListHumanAuthFactorsResponse>, I>>(base?: I): ListHumanAuthFactorsResponse {
    return ListHumanAuthFactorsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListHumanAuthFactorsResponse>, I>>(object: I): ListHumanAuthFactorsResponse {
    const message = createBaseListHumanAuthFactorsResponse();
    message.result = object.result?.map((e) => AuthFactor.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveHumanAuthFactorOTPRequest(): RemoveHumanAuthFactorOTPRequest {
  return { userId: "" };
}

export const RemoveHumanAuthFactorOTPRequest = {
  encode(message: RemoveHumanAuthFactorOTPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorOTPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorOTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanAuthFactorOTPRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: RemoveHumanAuthFactorOTPRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanAuthFactorOTPRequest>, I>>(base?: I): RemoveHumanAuthFactorOTPRequest {
    return RemoveHumanAuthFactorOTPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanAuthFactorOTPRequest>, I>>(
    object: I,
  ): RemoveHumanAuthFactorOTPRequest {
    const message = createBaseRemoveHumanAuthFactorOTPRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveHumanAuthFactorOTPResponse(): RemoveHumanAuthFactorOTPResponse {
  return { details: undefined };
}

export const RemoveHumanAuthFactorOTPResponse = {
  encode(message: RemoveHumanAuthFactorOTPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorOTPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorOTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanAuthFactorOTPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveHumanAuthFactorOTPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanAuthFactorOTPResponse>, I>>(
    base?: I,
  ): RemoveHumanAuthFactorOTPResponse {
    return RemoveHumanAuthFactorOTPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanAuthFactorOTPResponse>, I>>(
    object: I,
  ): RemoveHumanAuthFactorOTPResponse {
    const message = createBaseRemoveHumanAuthFactorOTPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanAuthFactorU2FRequest(): RemoveHumanAuthFactorU2FRequest {
  return { userId: "", tokenId: "" };
}

export const RemoveHumanAuthFactorU2FRequest = {
  encode(message: RemoveHumanAuthFactorU2FRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorU2FRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorU2FRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanAuthFactorU2FRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      tokenId: isSet(object.tokenId) ? String(object.tokenId) : "",
    };
  },

  toJSON(message: RemoveHumanAuthFactorU2FRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.tokenId !== "") {
      obj.tokenId = message.tokenId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanAuthFactorU2FRequest>, I>>(base?: I): RemoveHumanAuthFactorU2FRequest {
    return RemoveHumanAuthFactorU2FRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanAuthFactorU2FRequest>, I>>(
    object: I,
  ): RemoveHumanAuthFactorU2FRequest {
    const message = createBaseRemoveHumanAuthFactorU2FRequest();
    message.userId = object.userId ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseRemoveHumanAuthFactorU2FResponse(): RemoveHumanAuthFactorU2FResponse {
  return { details: undefined };
}

export const RemoveHumanAuthFactorU2FResponse = {
  encode(message: RemoveHumanAuthFactorU2FResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorU2FResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorU2FResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanAuthFactorU2FResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveHumanAuthFactorU2FResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanAuthFactorU2FResponse>, I>>(
    base?: I,
  ): RemoveHumanAuthFactorU2FResponse {
    return RemoveHumanAuthFactorU2FResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanAuthFactorU2FResponse>, I>>(
    object: I,
  ): RemoveHumanAuthFactorU2FResponse {
    const message = createBaseRemoveHumanAuthFactorU2FResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListHumanPasswordlessRequest(): ListHumanPasswordlessRequest {
  return { userId: "" };
}

export const ListHumanPasswordlessRequest = {
  encode(message: ListHumanPasswordlessRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanPasswordlessRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanPasswordlessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHumanPasswordlessRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: ListHumanPasswordlessRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListHumanPasswordlessRequest>, I>>(base?: I): ListHumanPasswordlessRequest {
    return ListHumanPasswordlessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListHumanPasswordlessRequest>, I>>(object: I): ListHumanPasswordlessRequest {
    const message = createBaseListHumanPasswordlessRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseListHumanPasswordlessResponse(): ListHumanPasswordlessResponse {
  return { result: [] };
}

export const ListHumanPasswordlessResponse = {
  encode(message: ListHumanPasswordlessResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      WebAuthNToken.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanPasswordlessResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanPasswordlessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(WebAuthNToken.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHumanPasswordlessResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => WebAuthNToken.fromJSON(e)) : [] };
  },

  toJSON(message: ListHumanPasswordlessResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => WebAuthNToken.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListHumanPasswordlessResponse>, I>>(base?: I): ListHumanPasswordlessResponse {
    return ListHumanPasswordlessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListHumanPasswordlessResponse>, I>>(
    object: I,
  ): ListHumanPasswordlessResponse {
    const message = createBaseListHumanPasswordlessResponse();
    message.result = object.result?.map((e) => WebAuthNToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddPasswordlessRegistrationRequest(): AddPasswordlessRegistrationRequest {
  return { userId: "" };
}

export const AddPasswordlessRegistrationRequest = {
  encode(message: AddPasswordlessRegistrationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPasswordlessRegistrationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPasswordlessRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPasswordlessRegistrationRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: AddPasswordlessRegistrationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPasswordlessRegistrationRequest>, I>>(
    base?: I,
  ): AddPasswordlessRegistrationRequest {
    return AddPasswordlessRegistrationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPasswordlessRegistrationRequest>, I>>(
    object: I,
  ): AddPasswordlessRegistrationRequest {
    const message = createBaseAddPasswordlessRegistrationRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseAddPasswordlessRegistrationResponse(): AddPasswordlessRegistrationResponse {
  return { details: undefined, link: "", expiration: undefined };
}

export const AddPasswordlessRegistrationResponse = {
  encode(message: AddPasswordlessRegistrationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.link !== "") {
      writer.uint32(18).string(message.link);
    }
    if (message.expiration !== undefined) {
      Duration.encode(message.expiration, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPasswordlessRegistrationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPasswordlessRegistrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.link = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPasswordlessRegistrationResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      link: isSet(object.link) ? String(object.link) : "",
      expiration: isSet(object.expiration) ? Duration.fromJSON(object.expiration) : undefined,
    };
  },

  toJSON(message: AddPasswordlessRegistrationResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.link !== "") {
      obj.link = message.link;
    }
    if (message.expiration !== undefined) {
      obj.expiration = Duration.toJSON(message.expiration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPasswordlessRegistrationResponse>, I>>(
    base?: I,
  ): AddPasswordlessRegistrationResponse {
    return AddPasswordlessRegistrationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPasswordlessRegistrationResponse>, I>>(
    object: I,
  ): AddPasswordlessRegistrationResponse {
    const message = createBaseAddPasswordlessRegistrationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.link = object.link ?? "";
    message.expiration = (object.expiration !== undefined && object.expiration !== null)
      ? Duration.fromPartial(object.expiration)
      : undefined;
    return message;
  },
};

function createBaseSendPasswordlessRegistrationRequest(): SendPasswordlessRegistrationRequest {
  return { userId: "" };
}

export const SendPasswordlessRegistrationRequest = {
  encode(message: SendPasswordlessRegistrationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendPasswordlessRegistrationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendPasswordlessRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendPasswordlessRegistrationRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: SendPasswordlessRegistrationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendPasswordlessRegistrationRequest>, I>>(
    base?: I,
  ): SendPasswordlessRegistrationRequest {
    return SendPasswordlessRegistrationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendPasswordlessRegistrationRequest>, I>>(
    object: I,
  ): SendPasswordlessRegistrationRequest {
    const message = createBaseSendPasswordlessRegistrationRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseSendPasswordlessRegistrationResponse(): SendPasswordlessRegistrationResponse {
  return { details: undefined };
}

export const SendPasswordlessRegistrationResponse = {
  encode(message: SendPasswordlessRegistrationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendPasswordlessRegistrationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendPasswordlessRegistrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendPasswordlessRegistrationResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SendPasswordlessRegistrationResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendPasswordlessRegistrationResponse>, I>>(
    base?: I,
  ): SendPasswordlessRegistrationResponse {
    return SendPasswordlessRegistrationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendPasswordlessRegistrationResponse>, I>>(
    object: I,
  ): SendPasswordlessRegistrationResponse {
    const message = createBaseSendPasswordlessRegistrationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanPasswordlessRequest(): RemoveHumanPasswordlessRequest {
  return { userId: "", tokenId: "" };
}

export const RemoveHumanPasswordlessRequest = {
  encode(message: RemoveHumanPasswordlessRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanPasswordlessRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanPasswordlessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanPasswordlessRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      tokenId: isSet(object.tokenId) ? String(object.tokenId) : "",
    };
  },

  toJSON(message: RemoveHumanPasswordlessRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.tokenId !== "") {
      obj.tokenId = message.tokenId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanPasswordlessRequest>, I>>(base?: I): RemoveHumanPasswordlessRequest {
    return RemoveHumanPasswordlessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanPasswordlessRequest>, I>>(
    object: I,
  ): RemoveHumanPasswordlessRequest {
    const message = createBaseRemoveHumanPasswordlessRequest();
    message.userId = object.userId ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseRemoveHumanPasswordlessResponse(): RemoveHumanPasswordlessResponse {
  return { details: undefined };
}

export const RemoveHumanPasswordlessResponse = {
  encode(message: RemoveHumanPasswordlessResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanPasswordlessResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanPasswordlessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanPasswordlessResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveHumanPasswordlessResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanPasswordlessResponse>, I>>(base?: I): RemoveHumanPasswordlessResponse {
    return RemoveHumanPasswordlessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanPasswordlessResponse>, I>>(
    object: I,
  ): RemoveHumanPasswordlessResponse {
    const message = createBaseRemoveHumanPasswordlessResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateMachineRequest(): UpdateMachineRequest {
  return { userId: "", description: "", name: "", accessTokenType: 0 };
}

export const UpdateMachineRequest = {
  encode(message: UpdateMachineRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.accessTokenType !== 0) {
      writer.uint32(32).int32(message.accessTokenType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateMachineRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMachineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accessTokenType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMachineRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      description: isSet(object.description) ? String(object.description) : "",
      name: isSet(object.name) ? String(object.name) : "",
      accessTokenType: isSet(object.accessTokenType) ? accessTokenTypeFromJSON(object.accessTokenType) : 0,
    };
  },

  toJSON(message: UpdateMachineRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.accessTokenType !== 0) {
      obj.accessTokenType = accessTokenTypeToJSON(message.accessTokenType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMachineRequest>, I>>(base?: I): UpdateMachineRequest {
    return UpdateMachineRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMachineRequest>, I>>(object: I): UpdateMachineRequest {
    const message = createBaseUpdateMachineRequest();
    message.userId = object.userId ?? "";
    message.description = object.description ?? "";
    message.name = object.name ?? "";
    message.accessTokenType = object.accessTokenType ?? 0;
    return message;
  },
};

function createBaseUpdateMachineResponse(): UpdateMachineResponse {
  return { details: undefined };
}

export const UpdateMachineResponse = {
  encode(message: UpdateMachineResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateMachineResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMachineResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMachineResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateMachineResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMachineResponse>, I>>(base?: I): UpdateMachineResponse {
    return UpdateMachineResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMachineResponse>, I>>(object: I): UpdateMachineResponse {
    const message = createBaseUpdateMachineResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGenerateMachineSecretRequest(): GenerateMachineSecretRequest {
  return { userId: "" };
}

export const GenerateMachineSecretRequest = {
  encode(message: GenerateMachineSecretRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenerateMachineSecretRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateMachineSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateMachineSecretRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: GenerateMachineSecretRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateMachineSecretRequest>, I>>(base?: I): GenerateMachineSecretRequest {
    return GenerateMachineSecretRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateMachineSecretRequest>, I>>(object: I): GenerateMachineSecretRequest {
    const message = createBaseGenerateMachineSecretRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGenerateMachineSecretResponse(): GenerateMachineSecretResponse {
  return { clientId: "", clientSecret: "", details: undefined };
}

export const GenerateMachineSecretResponse = {
  encode(message: GenerateMachineSecretResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(18).string(message.clientSecret);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenerateMachineSecretResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateMachineSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateMachineSecretResponse {
    return {
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: GenerateMachineSecretResponse): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateMachineSecretResponse>, I>>(base?: I): GenerateMachineSecretResponse {
    return GenerateMachineSecretResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateMachineSecretResponse>, I>>(
    object: I,
  ): GenerateMachineSecretResponse {
    const message = createBaseGenerateMachineSecretResponse();
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveMachineSecretRequest(): RemoveMachineSecretRequest {
  return { userId: "" };
}

export const RemoveMachineSecretRequest = {
  encode(message: RemoveMachineSecretRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMachineSecretRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMachineSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMachineSecretRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: RemoveMachineSecretRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMachineSecretRequest>, I>>(base?: I): RemoveMachineSecretRequest {
    return RemoveMachineSecretRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMachineSecretRequest>, I>>(object: I): RemoveMachineSecretRequest {
    const message = createBaseRemoveMachineSecretRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveMachineSecretResponse(): RemoveMachineSecretResponse {
  return { details: undefined };
}

export const RemoveMachineSecretResponse = {
  encode(message: RemoveMachineSecretResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMachineSecretResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMachineSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMachineSecretResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveMachineSecretResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMachineSecretResponse>, I>>(base?: I): RemoveMachineSecretResponse {
    return RemoveMachineSecretResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMachineSecretResponse>, I>>(object: I): RemoveMachineSecretResponse {
    const message = createBaseRemoveMachineSecretResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetMachineKeyByIDsRequest(): GetMachineKeyByIDsRequest {
  return { userId: "", keyId: "" };
}

export const GetMachineKeyByIDsRequest = {
  encode(message: GetMachineKeyByIDsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.keyId !== "") {
      writer.uint32(18).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMachineKeyByIDsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMachineKeyByIDsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMachineKeyByIDsRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      keyId: isSet(object.keyId) ? String(object.keyId) : "",
    };
  },

  toJSON(message: GetMachineKeyByIDsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMachineKeyByIDsRequest>, I>>(base?: I): GetMachineKeyByIDsRequest {
    return GetMachineKeyByIDsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMachineKeyByIDsRequest>, I>>(object: I): GetMachineKeyByIDsRequest {
    const message = createBaseGetMachineKeyByIDsRequest();
    message.userId = object.userId ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseGetMachineKeyByIDsResponse(): GetMachineKeyByIDsResponse {
  return { key: undefined };
}

export const GetMachineKeyByIDsResponse = {
  encode(message: GetMachineKeyByIDsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== undefined) {
      Key.encode(message.key, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMachineKeyByIDsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMachineKeyByIDsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = Key.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMachineKeyByIDsResponse {
    return { key: isSet(object.key) ? Key.fromJSON(object.key) : undefined };
  },

  toJSON(message: GetMachineKeyByIDsResponse): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = Key.toJSON(message.key);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMachineKeyByIDsResponse>, I>>(base?: I): GetMachineKeyByIDsResponse {
    return GetMachineKeyByIDsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMachineKeyByIDsResponse>, I>>(object: I): GetMachineKeyByIDsResponse {
    const message = createBaseGetMachineKeyByIDsResponse();
    message.key = (object.key !== undefined && object.key !== null) ? Key.fromPartial(object.key) : undefined;
    return message;
  },
};

function createBaseListMachineKeysRequest(): ListMachineKeysRequest {
  return { userId: "", query: undefined };
}

export const ListMachineKeysRequest = {
  encode(message: ListMachineKeysRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListMachineKeysRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMachineKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMachineKeysRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
    };
  },

  toJSON(message: ListMachineKeysRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMachineKeysRequest>, I>>(base?: I): ListMachineKeysRequest {
    return ListMachineKeysRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMachineKeysRequest>, I>>(object: I): ListMachineKeysRequest {
    const message = createBaseListMachineKeysRequest();
    message.userId = object.userId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListMachineKeysResponse(): ListMachineKeysResponse {
  return { details: undefined, result: [] };
}

export const ListMachineKeysResponse = {
  encode(message: ListMachineKeysResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Key.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListMachineKeysResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMachineKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Key.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMachineKeysResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Key.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListMachineKeysResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Key.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMachineKeysResponse>, I>>(base?: I): ListMachineKeysResponse {
    return ListMachineKeysResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMachineKeysResponse>, I>>(object: I): ListMachineKeysResponse {
    const message = createBaseListMachineKeysResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Key.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddMachineKeyRequest(): AddMachineKeyRequest {
  return { userId: "", type: 0, expirationDate: undefined };
}

export const AddMachineKeyRequest = {
  encode(message: AddMachineKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMachineKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMachineKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMachineKeyRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      type: isSet(object.type) ? keyTypeFromJSON(object.type) : 0,
      expirationDate: isSet(object.expirationDate) ? fromJsonTimestamp(object.expirationDate) : undefined,
    };
  },

  toJSON(message: AddMachineKeyRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.type !== 0) {
      obj.type = keyTypeToJSON(message.type);
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = message.expirationDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMachineKeyRequest>, I>>(base?: I): AddMachineKeyRequest {
    return AddMachineKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMachineKeyRequest>, I>>(object: I): AddMachineKeyRequest {
    const message = createBaseAddMachineKeyRequest();
    message.userId = object.userId ?? "";
    message.type = object.type ?? 0;
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseAddMachineKeyResponse(): AddMachineKeyResponse {
  return { keyId: "", keyDetails: new Uint8Array(0), details: undefined };
}

export const AddMachineKeyResponse = {
  encode(message: AddMachineKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.keyId !== "") {
      writer.uint32(10).string(message.keyId);
    }
    if (message.keyDetails.length !== 0) {
      writer.uint32(18).bytes(message.keyDetails);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMachineKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMachineKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyDetails = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMachineKeyResponse {
    return {
      keyId: isSet(object.keyId) ? String(object.keyId) : "",
      keyDetails: isSet(object.keyDetails) ? bytesFromBase64(object.keyDetails) : new Uint8Array(0),
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddMachineKeyResponse): unknown {
    const obj: any = {};
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.keyDetails.length !== 0) {
      obj.keyDetails = base64FromBytes(message.keyDetails);
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMachineKeyResponse>, I>>(base?: I): AddMachineKeyResponse {
    return AddMachineKeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMachineKeyResponse>, I>>(object: I): AddMachineKeyResponse {
    const message = createBaseAddMachineKeyResponse();
    message.keyId = object.keyId ?? "";
    message.keyDetails = object.keyDetails ?? new Uint8Array(0);
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveMachineKeyRequest(): RemoveMachineKeyRequest {
  return { userId: "", keyId: "" };
}

export const RemoveMachineKeyRequest = {
  encode(message: RemoveMachineKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.keyId !== "") {
      writer.uint32(18).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMachineKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMachineKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMachineKeyRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      keyId: isSet(object.keyId) ? String(object.keyId) : "",
    };
  },

  toJSON(message: RemoveMachineKeyRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMachineKeyRequest>, I>>(base?: I): RemoveMachineKeyRequest {
    return RemoveMachineKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMachineKeyRequest>, I>>(object: I): RemoveMachineKeyRequest {
    const message = createBaseRemoveMachineKeyRequest();
    message.userId = object.userId ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseRemoveMachineKeyResponse(): RemoveMachineKeyResponse {
  return { details: undefined };
}

export const RemoveMachineKeyResponse = {
  encode(message: RemoveMachineKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMachineKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMachineKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMachineKeyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveMachineKeyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMachineKeyResponse>, I>>(base?: I): RemoveMachineKeyResponse {
    return RemoveMachineKeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMachineKeyResponse>, I>>(object: I): RemoveMachineKeyResponse {
    const message = createBaseRemoveMachineKeyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPersonalAccessTokenByIDsRequest(): GetPersonalAccessTokenByIDsRequest {
  return { userId: "", tokenId: "" };
}

export const GetPersonalAccessTokenByIDsRequest = {
  encode(message: GetPersonalAccessTokenByIDsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPersonalAccessTokenByIDsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPersonalAccessTokenByIDsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPersonalAccessTokenByIDsRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      tokenId: isSet(object.tokenId) ? String(object.tokenId) : "",
    };
  },

  toJSON(message: GetPersonalAccessTokenByIDsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.tokenId !== "") {
      obj.tokenId = message.tokenId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPersonalAccessTokenByIDsRequest>, I>>(
    base?: I,
  ): GetPersonalAccessTokenByIDsRequest {
    return GetPersonalAccessTokenByIDsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPersonalAccessTokenByIDsRequest>, I>>(
    object: I,
  ): GetPersonalAccessTokenByIDsRequest {
    const message = createBaseGetPersonalAccessTokenByIDsRequest();
    message.userId = object.userId ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseGetPersonalAccessTokenByIDsResponse(): GetPersonalAccessTokenByIDsResponse {
  return { token: undefined };
}

export const GetPersonalAccessTokenByIDsResponse = {
  encode(message: GetPersonalAccessTokenByIDsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token !== undefined) {
      PersonalAccessToken.encode(message.token, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPersonalAccessTokenByIDsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPersonalAccessTokenByIDsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = PersonalAccessToken.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPersonalAccessTokenByIDsResponse {
    return { token: isSet(object.token) ? PersonalAccessToken.fromJSON(object.token) : undefined };
  },

  toJSON(message: GetPersonalAccessTokenByIDsResponse): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = PersonalAccessToken.toJSON(message.token);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPersonalAccessTokenByIDsResponse>, I>>(
    base?: I,
  ): GetPersonalAccessTokenByIDsResponse {
    return GetPersonalAccessTokenByIDsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPersonalAccessTokenByIDsResponse>, I>>(
    object: I,
  ): GetPersonalAccessTokenByIDsResponse {
    const message = createBaseGetPersonalAccessTokenByIDsResponse();
    message.token = (object.token !== undefined && object.token !== null)
      ? PersonalAccessToken.fromPartial(object.token)
      : undefined;
    return message;
  },
};

function createBaseListPersonalAccessTokensRequest(): ListPersonalAccessTokensRequest {
  return { userId: "", query: undefined };
}

export const ListPersonalAccessTokensRequest = {
  encode(message: ListPersonalAccessTokensRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPersonalAccessTokensRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPersonalAccessTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPersonalAccessTokensRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
    };
  },

  toJSON(message: ListPersonalAccessTokensRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPersonalAccessTokensRequest>, I>>(base?: I): ListPersonalAccessTokensRequest {
    return ListPersonalAccessTokensRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPersonalAccessTokensRequest>, I>>(
    object: I,
  ): ListPersonalAccessTokensRequest {
    const message = createBaseListPersonalAccessTokensRequest();
    message.userId = object.userId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListPersonalAccessTokensResponse(): ListPersonalAccessTokensResponse {
  return { details: undefined, result: [] };
}

export const ListPersonalAccessTokensResponse = {
  encode(message: ListPersonalAccessTokensResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      PersonalAccessToken.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPersonalAccessTokensResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPersonalAccessTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(PersonalAccessToken.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPersonalAccessTokensResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => PersonalAccessToken.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListPersonalAccessTokensResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => PersonalAccessToken.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPersonalAccessTokensResponse>, I>>(
    base?: I,
  ): ListPersonalAccessTokensResponse {
    return ListPersonalAccessTokensResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPersonalAccessTokensResponse>, I>>(
    object: I,
  ): ListPersonalAccessTokensResponse {
    const message = createBaseListPersonalAccessTokensResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => PersonalAccessToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddPersonalAccessTokenRequest(): AddPersonalAccessTokenRequest {
  return { userId: "", expirationDate: undefined };
}

export const AddPersonalAccessTokenRequest = {
  encode(message: AddPersonalAccessTokenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPersonalAccessTokenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPersonalAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPersonalAccessTokenRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      expirationDate: isSet(object.expirationDate) ? fromJsonTimestamp(object.expirationDate) : undefined,
    };
  },

  toJSON(message: AddPersonalAccessTokenRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = message.expirationDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPersonalAccessTokenRequest>, I>>(base?: I): AddPersonalAccessTokenRequest {
    return AddPersonalAccessTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPersonalAccessTokenRequest>, I>>(
    object: I,
  ): AddPersonalAccessTokenRequest {
    const message = createBaseAddPersonalAccessTokenRequest();
    message.userId = object.userId ?? "";
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseAddPersonalAccessTokenResponse(): AddPersonalAccessTokenResponse {
  return { tokenId: "", token: "", details: undefined };
}

export const AddPersonalAccessTokenResponse = {
  encode(message: AddPersonalAccessTokenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tokenId !== "") {
      writer.uint32(10).string(message.tokenId);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPersonalAccessTokenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPersonalAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tokenId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPersonalAccessTokenResponse {
    return {
      tokenId: isSet(object.tokenId) ? String(object.tokenId) : "",
      token: isSet(object.token) ? String(object.token) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddPersonalAccessTokenResponse): unknown {
    const obj: any = {};
    if (message.tokenId !== "") {
      obj.tokenId = message.tokenId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPersonalAccessTokenResponse>, I>>(base?: I): AddPersonalAccessTokenResponse {
    return AddPersonalAccessTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPersonalAccessTokenResponse>, I>>(
    object: I,
  ): AddPersonalAccessTokenResponse {
    const message = createBaseAddPersonalAccessTokenResponse();
    message.tokenId = object.tokenId ?? "";
    message.token = object.token ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemovePersonalAccessTokenRequest(): RemovePersonalAccessTokenRequest {
  return { userId: "", tokenId: "" };
}

export const RemovePersonalAccessTokenRequest = {
  encode(message: RemovePersonalAccessTokenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemovePersonalAccessTokenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemovePersonalAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemovePersonalAccessTokenRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      tokenId: isSet(object.tokenId) ? String(object.tokenId) : "",
    };
  },

  toJSON(message: RemovePersonalAccessTokenRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.tokenId !== "") {
      obj.tokenId = message.tokenId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemovePersonalAccessTokenRequest>, I>>(
    base?: I,
  ): RemovePersonalAccessTokenRequest {
    return RemovePersonalAccessTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemovePersonalAccessTokenRequest>, I>>(
    object: I,
  ): RemovePersonalAccessTokenRequest {
    const message = createBaseRemovePersonalAccessTokenRequest();
    message.userId = object.userId ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseRemovePersonalAccessTokenResponse(): RemovePersonalAccessTokenResponse {
  return { details: undefined };
}

export const RemovePersonalAccessTokenResponse = {
  encode(message: RemovePersonalAccessTokenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemovePersonalAccessTokenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemovePersonalAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemovePersonalAccessTokenResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemovePersonalAccessTokenResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemovePersonalAccessTokenResponse>, I>>(
    base?: I,
  ): RemovePersonalAccessTokenResponse {
    return RemovePersonalAccessTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemovePersonalAccessTokenResponse>, I>>(
    object: I,
  ): RemovePersonalAccessTokenResponse {
    const message = createBaseRemovePersonalAccessTokenResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListHumanLinkedIDPsRequest(): ListHumanLinkedIDPsRequest {
  return { userId: "", query: undefined };
}

export const ListHumanLinkedIDPsRequest = {
  encode(message: ListHumanLinkedIDPsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanLinkedIDPsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanLinkedIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHumanLinkedIDPsRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
    };
  },

  toJSON(message: ListHumanLinkedIDPsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListHumanLinkedIDPsRequest>, I>>(base?: I): ListHumanLinkedIDPsRequest {
    return ListHumanLinkedIDPsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListHumanLinkedIDPsRequest>, I>>(object: I): ListHumanLinkedIDPsRequest {
    const message = createBaseListHumanLinkedIDPsRequest();
    message.userId = object.userId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListHumanLinkedIDPsResponse(): ListHumanLinkedIDPsResponse {
  return { details: undefined, result: [] };
}

export const ListHumanLinkedIDPsResponse = {
  encode(message: ListHumanLinkedIDPsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      IDPUserLink.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanLinkedIDPsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanLinkedIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(IDPUserLink.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHumanLinkedIDPsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => IDPUserLink.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListHumanLinkedIDPsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => IDPUserLink.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListHumanLinkedIDPsResponse>, I>>(base?: I): ListHumanLinkedIDPsResponse {
    return ListHumanLinkedIDPsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListHumanLinkedIDPsResponse>, I>>(object: I): ListHumanLinkedIDPsResponse {
    const message = createBaseListHumanLinkedIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => IDPUserLink.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveHumanLinkedIDPRequest(): RemoveHumanLinkedIDPRequest {
  return { userId: "", idpId: "", linkedUserId: "" };
}

export const RemoveHumanLinkedIDPRequest = {
  encode(message: RemoveHumanLinkedIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    if (message.linkedUserId !== "") {
      writer.uint32(26).string(message.linkedUserId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanLinkedIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanLinkedIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.linkedUserId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanLinkedIDPRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      linkedUserId: isSet(object.linkedUserId) ? String(object.linkedUserId) : "",
    };
  },

  toJSON(message: RemoveHumanLinkedIDPRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.linkedUserId !== "") {
      obj.linkedUserId = message.linkedUserId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanLinkedIDPRequest>, I>>(base?: I): RemoveHumanLinkedIDPRequest {
    return RemoveHumanLinkedIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanLinkedIDPRequest>, I>>(object: I): RemoveHumanLinkedIDPRequest {
    const message = createBaseRemoveHumanLinkedIDPRequest();
    message.userId = object.userId ?? "";
    message.idpId = object.idpId ?? "";
    message.linkedUserId = object.linkedUserId ?? "";
    return message;
  },
};

function createBaseRemoveHumanLinkedIDPResponse(): RemoveHumanLinkedIDPResponse {
  return { details: undefined };
}

export const RemoveHumanLinkedIDPResponse = {
  encode(message: RemoveHumanLinkedIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanLinkedIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanLinkedIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveHumanLinkedIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveHumanLinkedIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveHumanLinkedIDPResponse>, I>>(base?: I): RemoveHumanLinkedIDPResponse {
    return RemoveHumanLinkedIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveHumanLinkedIDPResponse>, I>>(object: I): RemoveHumanLinkedIDPResponse {
    const message = createBaseRemoveHumanLinkedIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListUserMembershipsRequest(): ListUserMembershipsRequest {
  return { userId: "", query: undefined, queries: [] };
}

export const ListUserMembershipsRequest = {
  encode(message: ListUserMembershipsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      MembershipQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserMembershipsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMembershipsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(MembershipQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserMembershipsRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => MembershipQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUserMembershipsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => MembershipQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserMembershipsRequest>, I>>(base?: I): ListUserMembershipsRequest {
    return ListUserMembershipsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserMembershipsRequest>, I>>(object: I): ListUserMembershipsRequest {
    const message = createBaseListUserMembershipsRequest();
    message.userId = object.userId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => MembershipQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserMembershipsResponse(): ListUserMembershipsResponse {
  return { details: undefined, result: [] };
}

export const ListUserMembershipsResponse = {
  encode(message: ListUserMembershipsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Membership.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserMembershipsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMembershipsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Membership.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserMembershipsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Membership.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUserMembershipsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Membership.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserMembershipsResponse>, I>>(base?: I): ListUserMembershipsResponse {
    return ListUserMembershipsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserMembershipsResponse>, I>>(object: I): ListUserMembershipsResponse {
    const message = createBaseListUserMembershipsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Membership.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetMyOrgRequest(): GetMyOrgRequest {
  return {};
}

export const GetMyOrgRequest = {
  encode(_: GetMyOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMyOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMyOrgRequest {
    return {};
  },

  toJSON(_: GetMyOrgRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMyOrgRequest>, I>>(base?: I): GetMyOrgRequest {
    return GetMyOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMyOrgRequest>, I>>(_: I): GetMyOrgRequest {
    const message = createBaseGetMyOrgRequest();
    return message;
  },
};

function createBaseGetMyOrgResponse(): GetMyOrgResponse {
  return { org: undefined };
}

export const GetMyOrgResponse = {
  encode(message: GetMyOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.org !== undefined) {
      Org.encode(message.org, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMyOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = Org.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMyOrgResponse {
    return { org: isSet(object.org) ? Org.fromJSON(object.org) : undefined };
  },

  toJSON(message: GetMyOrgResponse): unknown {
    const obj: any = {};
    if (message.org !== undefined) {
      obj.org = Org.toJSON(message.org);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMyOrgResponse>, I>>(base?: I): GetMyOrgResponse {
    return GetMyOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMyOrgResponse>, I>>(object: I): GetMyOrgResponse {
    const message = createBaseGetMyOrgResponse();
    message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
    return message;
  },
};

function createBaseGetOrgByDomainGlobalRequest(): GetOrgByDomainGlobalRequest {
  return { domain: "" };
}

export const GetOrgByDomainGlobalRequest = {
  encode(message: GetOrgByDomainGlobalRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgByDomainGlobalRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgByDomainGlobalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgByDomainGlobalRequest {
    return { domain: isSet(object.domain) ? String(object.domain) : "" };
  },

  toJSON(message: GetOrgByDomainGlobalRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgByDomainGlobalRequest>, I>>(base?: I): GetOrgByDomainGlobalRequest {
    return GetOrgByDomainGlobalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgByDomainGlobalRequest>, I>>(object: I): GetOrgByDomainGlobalRequest {
    const message = createBaseGetOrgByDomainGlobalRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseListOrgChangesRequest(): ListOrgChangesRequest {
  return { query: undefined };
}

export const ListOrgChangesRequest = {
  encode(message: ListOrgChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgChangesRequest {
    return { query: isSet(object.query) ? ChangeQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: ListOrgChangesRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ChangeQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgChangesRequest>, I>>(base?: I): ListOrgChangesRequest {
    return ListOrgChangesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgChangesRequest>, I>>(object: I): ListOrgChangesRequest {
    const message = createBaseListOrgChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListOrgChangesResponse(): ListOrgChangesResponse {
  return { result: [] };
}

export const ListOrgChangesResponse = {
  encode(message: ListOrgChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgChangesResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => Change.fromJSON(e)) : [] };
  },

  toJSON(message: ListOrgChangesResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => Change.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgChangesResponse>, I>>(base?: I): ListOrgChangesResponse {
    return ListOrgChangesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgChangesResponse>, I>>(object: I): ListOrgChangesResponse {
    const message = createBaseListOrgChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetOrgByDomainGlobalResponse(): GetOrgByDomainGlobalResponse {
  return { org: undefined };
}

export const GetOrgByDomainGlobalResponse = {
  encode(message: GetOrgByDomainGlobalResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.org !== undefined) {
      Org.encode(message.org, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgByDomainGlobalResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgByDomainGlobalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = Org.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgByDomainGlobalResponse {
    return { org: isSet(object.org) ? Org.fromJSON(object.org) : undefined };
  },

  toJSON(message: GetOrgByDomainGlobalResponse): unknown {
    const obj: any = {};
    if (message.org !== undefined) {
      obj.org = Org.toJSON(message.org);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgByDomainGlobalResponse>, I>>(base?: I): GetOrgByDomainGlobalResponse {
    return GetOrgByDomainGlobalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgByDomainGlobalResponse>, I>>(object: I): GetOrgByDomainGlobalResponse {
    const message = createBaseGetOrgByDomainGlobalResponse();
    message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
    return message;
  },
};

function createBaseAddOrgRequest(): AddOrgRequest {
  return { name: "" };
}

export const AddOrgRequest = {
  encode(message: AddOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgRequest {
    return { name: isSet(object.name) ? String(object.name) : "" };
  },

  toJSON(message: AddOrgRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgRequest>, I>>(base?: I): AddOrgRequest {
    return AddOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgRequest>, I>>(object: I): AddOrgRequest {
    const message = createBaseAddOrgRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAddOrgResponse(): AddOrgResponse {
  return { id: "", details: undefined };
}

export const AddOrgResponse = {
  encode(message: AddOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgResponse {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddOrgResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgResponse>, I>>(base?: I): AddOrgResponse {
    return AddOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgResponse>, I>>(object: I): AddOrgResponse {
    const message = createBaseAddOrgResponse();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgRequest(): UpdateOrgRequest {
  return { name: "" };
}

export const UpdateOrgRequest = {
  encode(message: UpdateOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgRequest {
    return { name: isSet(object.name) ? String(object.name) : "" };
  },

  toJSON(message: UpdateOrgRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgRequest>, I>>(base?: I): UpdateOrgRequest {
    return UpdateOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgRequest>, I>>(object: I): UpdateOrgRequest {
    const message = createBaseUpdateOrgRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateOrgResponse(): UpdateOrgResponse {
  return { details: undefined };
}

export const UpdateOrgResponse = {
  encode(message: UpdateOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgResponse>, I>>(base?: I): UpdateOrgResponse {
    return UpdateOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgResponse>, I>>(object: I): UpdateOrgResponse {
    const message = createBaseUpdateOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateOrgRequest(): DeactivateOrgRequest {
  return {};
}

export const DeactivateOrgRequest = {
  encode(_: DeactivateOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeactivateOrgRequest {
    return {};
  },

  toJSON(_: DeactivateOrgRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateOrgRequest>, I>>(base?: I): DeactivateOrgRequest {
    return DeactivateOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateOrgRequest>, I>>(_: I): DeactivateOrgRequest {
    const message = createBaseDeactivateOrgRequest();
    return message;
  },
};

function createBaseDeactivateOrgResponse(): DeactivateOrgResponse {
  return { details: undefined };
}

export const DeactivateOrgResponse = {
  encode(message: DeactivateOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateOrgResponse>, I>>(base?: I): DeactivateOrgResponse {
    return DeactivateOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateOrgResponse>, I>>(object: I): DeactivateOrgResponse {
    const message = createBaseDeactivateOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateOrgRequest(): ReactivateOrgRequest {
  return {};
}

export const ReactivateOrgRequest = {
  encode(_: ReactivateOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReactivateOrgRequest {
    return {};
  },

  toJSON(_: ReactivateOrgRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateOrgRequest>, I>>(base?: I): ReactivateOrgRequest {
    return ReactivateOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateOrgRequest>, I>>(_: I): ReactivateOrgRequest {
    const message = createBaseReactivateOrgRequest();
    return message;
  },
};

function createBaseReactivateOrgResponse(): ReactivateOrgResponse {
  return { details: undefined };
}

export const ReactivateOrgResponse = {
  encode(message: ReactivateOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateOrgResponse>, I>>(base?: I): ReactivateOrgResponse {
    return ReactivateOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateOrgResponse>, I>>(object: I): ReactivateOrgResponse {
    const message = createBaseReactivateOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgRequest(): RemoveOrgRequest {
  return {};
}

export const RemoveOrgRequest = {
  encode(_: RemoveOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveOrgRequest {
    return {};
  },

  toJSON(_: RemoveOrgRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgRequest>, I>>(base?: I): RemoveOrgRequest {
    return RemoveOrgRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgRequest>, I>>(_: I): RemoveOrgRequest {
    const message = createBaseRemoveOrgRequest();
    return message;
  },
};

function createBaseRemoveOrgResponse(): RemoveOrgResponse {
  return { details: undefined };
}

export const RemoveOrgResponse = {
  encode(message: RemoveOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgResponse>, I>>(base?: I): RemoveOrgResponse {
    return RemoveOrgResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgResponse>, I>>(object: I): RemoveOrgResponse {
    const message = createBaseRemoveOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListOrgDomainsRequest(): ListOrgDomainsRequest {
  return { query: undefined, queries: [] };
}

export const ListOrgDomainsRequest = {
  encode(message: ListOrgDomainsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      DomainSearchQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgDomainsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgDomainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(DomainSearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgDomainsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => DomainSearchQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgDomainsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => DomainSearchQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgDomainsRequest>, I>>(base?: I): ListOrgDomainsRequest {
    return ListOrgDomainsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgDomainsRequest>, I>>(object: I): ListOrgDomainsRequest {
    const message = createBaseListOrgDomainsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => DomainSearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListOrgDomainsResponse(): ListOrgDomainsResponse {
  return { details: undefined, result: [] };
}

export const ListOrgDomainsResponse = {
  encode(message: ListOrgDomainsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Domain.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgDomainsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgDomainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Domain.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgDomainsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Domain.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgDomainsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Domain.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgDomainsResponse>, I>>(base?: I): ListOrgDomainsResponse {
    return ListOrgDomainsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgDomainsResponse>, I>>(object: I): ListOrgDomainsResponse {
    const message = createBaseListOrgDomainsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Domain.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOrgDomainRequest(): AddOrgDomainRequest {
  return { domain: "" };
}

export const AddOrgDomainRequest = {
  encode(message: AddOrgDomainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgDomainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgDomainRequest {
    return { domain: isSet(object.domain) ? String(object.domain) : "" };
  },

  toJSON(message: AddOrgDomainRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgDomainRequest>, I>>(base?: I): AddOrgDomainRequest {
    return AddOrgDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgDomainRequest>, I>>(object: I): AddOrgDomainRequest {
    const message = createBaseAddOrgDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseAddOrgDomainResponse(): AddOrgDomainResponse {
  return { details: undefined };
}

export const AddOrgDomainResponse = {
  encode(message: AddOrgDomainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgDomainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgDomainResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddOrgDomainResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgDomainResponse>, I>>(base?: I): AddOrgDomainResponse {
    return AddOrgDomainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgDomainResponse>, I>>(object: I): AddOrgDomainResponse {
    const message = createBaseAddOrgDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgDomainRequest(): RemoveOrgDomainRequest {
  return { domain: "" };
}

export const RemoveOrgDomainRequest = {
  encode(message: RemoveOrgDomainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgDomainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgDomainRequest {
    return { domain: isSet(object.domain) ? String(object.domain) : "" };
  },

  toJSON(message: RemoveOrgDomainRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgDomainRequest>, I>>(base?: I): RemoveOrgDomainRequest {
    return RemoveOrgDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgDomainRequest>, I>>(object: I): RemoveOrgDomainRequest {
    const message = createBaseRemoveOrgDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseRemoveOrgDomainResponse(): RemoveOrgDomainResponse {
  return { details: undefined };
}

export const RemoveOrgDomainResponse = {
  encode(message: RemoveOrgDomainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgDomainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgDomainResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveOrgDomainResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgDomainResponse>, I>>(base?: I): RemoveOrgDomainResponse {
    return RemoveOrgDomainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgDomainResponse>, I>>(object: I): RemoveOrgDomainResponse {
    const message = createBaseRemoveOrgDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGenerateOrgDomainValidationRequest(): GenerateOrgDomainValidationRequest {
  return { domain: "", type: 0 };
}

export const GenerateOrgDomainValidationRequest = {
  encode(message: GenerateOrgDomainValidationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenerateOrgDomainValidationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateOrgDomainValidationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateOrgDomainValidationRequest {
    return {
      domain: isSet(object.domain) ? String(object.domain) : "",
      type: isSet(object.type) ? domainValidationTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: GenerateOrgDomainValidationRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.type !== 0) {
      obj.type = domainValidationTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateOrgDomainValidationRequest>, I>>(
    base?: I,
  ): GenerateOrgDomainValidationRequest {
    return GenerateOrgDomainValidationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateOrgDomainValidationRequest>, I>>(
    object: I,
  ): GenerateOrgDomainValidationRequest {
    const message = createBaseGenerateOrgDomainValidationRequest();
    message.domain = object.domain ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseGenerateOrgDomainValidationResponse(): GenerateOrgDomainValidationResponse {
  return { token: "", url: "" };
}

export const GenerateOrgDomainValidationResponse = {
  encode(message: GenerateOrgDomainValidationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenerateOrgDomainValidationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateOrgDomainValidationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateOrgDomainValidationResponse {
    return { token: isSet(object.token) ? String(object.token) : "", url: isSet(object.url) ? String(object.url) : "" };
  },

  toJSON(message: GenerateOrgDomainValidationResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateOrgDomainValidationResponse>, I>>(
    base?: I,
  ): GenerateOrgDomainValidationResponse {
    return GenerateOrgDomainValidationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateOrgDomainValidationResponse>, I>>(
    object: I,
  ): GenerateOrgDomainValidationResponse {
    const message = createBaseGenerateOrgDomainValidationResponse();
    message.token = object.token ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseValidateOrgDomainRequest(): ValidateOrgDomainRequest {
  return { domain: "" };
}

export const ValidateOrgDomainRequest = {
  encode(message: ValidateOrgDomainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidateOrgDomainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateOrgDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateOrgDomainRequest {
    return { domain: isSet(object.domain) ? String(object.domain) : "" };
  },

  toJSON(message: ValidateOrgDomainRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateOrgDomainRequest>, I>>(base?: I): ValidateOrgDomainRequest {
    return ValidateOrgDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateOrgDomainRequest>, I>>(object: I): ValidateOrgDomainRequest {
    const message = createBaseValidateOrgDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseValidateOrgDomainResponse(): ValidateOrgDomainResponse {
  return { details: undefined };
}

export const ValidateOrgDomainResponse = {
  encode(message: ValidateOrgDomainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidateOrgDomainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateOrgDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateOrgDomainResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ValidateOrgDomainResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateOrgDomainResponse>, I>>(base?: I): ValidateOrgDomainResponse {
    return ValidateOrgDomainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateOrgDomainResponse>, I>>(object: I): ValidateOrgDomainResponse {
    const message = createBaseValidateOrgDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSetPrimaryOrgDomainRequest(): SetPrimaryOrgDomainRequest {
  return { domain: "" };
}

export const SetPrimaryOrgDomainRequest = {
  encode(message: SetPrimaryOrgDomainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPrimaryOrgDomainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPrimaryOrgDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPrimaryOrgDomainRequest {
    return { domain: isSet(object.domain) ? String(object.domain) : "" };
  },

  toJSON(message: SetPrimaryOrgDomainRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPrimaryOrgDomainRequest>, I>>(base?: I): SetPrimaryOrgDomainRequest {
    return SetPrimaryOrgDomainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPrimaryOrgDomainRequest>, I>>(object: I): SetPrimaryOrgDomainRequest {
    const message = createBaseSetPrimaryOrgDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseSetPrimaryOrgDomainResponse(): SetPrimaryOrgDomainResponse {
  return { details: undefined };
}

export const SetPrimaryOrgDomainResponse = {
  encode(message: SetPrimaryOrgDomainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPrimaryOrgDomainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPrimaryOrgDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPrimaryOrgDomainResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetPrimaryOrgDomainResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPrimaryOrgDomainResponse>, I>>(base?: I): SetPrimaryOrgDomainResponse {
    return SetPrimaryOrgDomainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPrimaryOrgDomainResponse>, I>>(object: I): SetPrimaryOrgDomainResponse {
    const message = createBaseSetPrimaryOrgDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListOrgMemberRolesRequest(): ListOrgMemberRolesRequest {
  return {};
}

export const ListOrgMemberRolesRequest = {
  encode(_: ListOrgMemberRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMemberRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMemberRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListOrgMemberRolesRequest {
    return {};
  },

  toJSON(_: ListOrgMemberRolesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgMemberRolesRequest>, I>>(base?: I): ListOrgMemberRolesRequest {
    return ListOrgMemberRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgMemberRolesRequest>, I>>(_: I): ListOrgMemberRolesRequest {
    const message = createBaseListOrgMemberRolesRequest();
    return message;
  },
};

function createBaseListOrgMemberRolesResponse(): ListOrgMemberRolesResponse {
  return { result: [] };
}

export const ListOrgMemberRolesResponse = {
  encode(message: ListOrgMemberRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMemberRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMemberRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgMemberRolesResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => String(e)) : [] };
  },

  toJSON(message: ListOrgMemberRolesResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgMemberRolesResponse>, I>>(base?: I): ListOrgMemberRolesResponse {
    return ListOrgMemberRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgMemberRolesResponse>, I>>(object: I): ListOrgMemberRolesResponse {
    const message = createBaseListOrgMemberRolesResponse();
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseListOrgMembersRequest(): ListOrgMembersRequest {
  return { query: undefined, queries: [] };
}

export const ListOrgMembersRequest = {
  encode(message: ListOrgMembersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      SearchQuery1.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMembersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(SearchQuery1.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgMembersRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => SearchQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgMembersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgMembersRequest>, I>>(base?: I): ListOrgMembersRequest {
    return ListOrgMembersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgMembersRequest>, I>>(object: I): ListOrgMembersRequest {
    const message = createBaseListOrgMembersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SearchQuery1.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListOrgMembersResponse(): ListOrgMembersResponse {
  return { details: undefined, result: [] };
}

export const ListOrgMembersResponse = {
  encode(message: ListOrgMembersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Member.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMembersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Member.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgMembersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Member.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgMembersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Member.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgMembersResponse>, I>>(base?: I): ListOrgMembersResponse {
    return ListOrgMembersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgMembersResponse>, I>>(object: I): ListOrgMembersResponse {
    const message = createBaseListOrgMembersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOrgMemberRequest(): AddOrgMemberRequest {
  return { userId: "", roles: [] };
}

export const AddOrgMemberRequest = {
  encode(message: AddOrgMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgMemberRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: AddOrgMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgMemberRequest>, I>>(base?: I): AddOrgMemberRequest {
    return AddOrgMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgMemberRequest>, I>>(object: I): AddOrgMemberRequest {
    const message = createBaseAddOrgMemberRequest();
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddOrgMemberResponse(): AddOrgMemberResponse {
  return { details: undefined };
}

export const AddOrgMemberResponse = {
  encode(message: AddOrgMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddOrgMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgMemberResponse>, I>>(base?: I): AddOrgMemberResponse {
    return AddOrgMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgMemberResponse>, I>>(object: I): AddOrgMemberResponse {
    const message = createBaseAddOrgMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgMemberRequest(): UpdateOrgMemberRequest {
  return { userId: "", roles: [] };
}

export const UpdateOrgMemberRequest = {
  encode(message: UpdateOrgMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgMemberRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: UpdateOrgMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgMemberRequest>, I>>(base?: I): UpdateOrgMemberRequest {
    return UpdateOrgMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgMemberRequest>, I>>(object: I): UpdateOrgMemberRequest {
    const message = createBaseUpdateOrgMemberRequest();
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateOrgMemberResponse(): UpdateOrgMemberResponse {
  return { details: undefined };
}

export const UpdateOrgMemberResponse = {
  encode(message: UpdateOrgMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOrgMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgMemberResponse>, I>>(base?: I): UpdateOrgMemberResponse {
    return UpdateOrgMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgMemberResponse>, I>>(object: I): UpdateOrgMemberResponse {
    const message = createBaseUpdateOrgMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgMemberRequest(): RemoveOrgMemberRequest {
  return { userId: "" };
}

export const RemoveOrgMemberRequest = {
  encode(message: RemoveOrgMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgMemberRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: RemoveOrgMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgMemberRequest>, I>>(base?: I): RemoveOrgMemberRequest {
    return RemoveOrgMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgMemberRequest>, I>>(object: I): RemoveOrgMemberRequest {
    const message = createBaseRemoveOrgMemberRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveOrgMemberResponse(): RemoveOrgMemberResponse {
  return { details: undefined };
}

export const RemoveOrgMemberResponse = {
  encode(message: RemoveOrgMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveOrgMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgMemberResponse>, I>>(base?: I): RemoveOrgMemberResponse {
    return RemoveOrgMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgMemberResponse>, I>>(object: I): RemoveOrgMemberResponse {
    const message = createBaseRemoveOrgMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListOrgMetadataRequest(): ListOrgMetadataRequest {
  return { query: undefined, queries: [] };
}

export const ListOrgMetadataRequest = {
  encode(message: ListOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      MetadataQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(MetadataQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgMetadataRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => MetadataQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgMetadataRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => MetadataQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgMetadataRequest>, I>>(base?: I): ListOrgMetadataRequest {
    return ListOrgMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgMetadataRequest>, I>>(object: I): ListOrgMetadataRequest {
    const message = createBaseListOrgMetadataRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => MetadataQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListOrgMetadataResponse(): ListOrgMetadataResponse {
  return { details: undefined, result: [] };
}

export const ListOrgMetadataResponse = {
  encode(message: ListOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Metadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgMetadataResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Metadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Metadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgMetadataResponse>, I>>(base?: I): ListOrgMetadataResponse {
    return ListOrgMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgMetadataResponse>, I>>(object: I): ListOrgMetadataResponse {
    const message = createBaseListOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetOrgMetadataRequest(): GetOrgMetadataRequest {
  return { key: "" };
}

export const GetOrgMetadataRequest = {
  encode(message: GetOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgMetadataRequest {
    return { key: isSet(object.key) ? String(object.key) : "" };
  },

  toJSON(message: GetOrgMetadataRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgMetadataRequest>, I>>(base?: I): GetOrgMetadataRequest {
    return GetOrgMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgMetadataRequest>, I>>(object: I): GetOrgMetadataRequest {
    const message = createBaseGetOrgMetadataRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseGetOrgMetadataResponse(): GetOrgMetadataResponse {
  return { metadata: undefined };
}

export const GetOrgMetadataResponse = {
  encode(message: GetOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgMetadataResponse {
    return { metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined };
  },

  toJSON(message: GetOrgMetadataResponse): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgMetadataResponse>, I>>(base?: I): GetOrgMetadataResponse {
    return GetOrgMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgMetadataResponse>, I>>(object: I): GetOrgMetadataResponse {
    const message = createBaseGetOrgMetadataResponse();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSetOrgMetadataRequest(): SetOrgMetadataRequest {
  return { key: "", value: new Uint8Array(0) };
}

export const SetOrgMetadataRequest = {
  encode(message: SetOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetOrgMetadataRequest {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: SetOrgMetadataRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetOrgMetadataRequest>, I>>(base?: I): SetOrgMetadataRequest {
    return SetOrgMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetOrgMetadataRequest>, I>>(object: I): SetOrgMetadataRequest {
    const message = createBaseSetOrgMetadataRequest();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSetOrgMetadataResponse(): SetOrgMetadataResponse {
  return { details: undefined };
}

export const SetOrgMetadataResponse = {
  encode(message: SetOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetOrgMetadataResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetOrgMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetOrgMetadataResponse>, I>>(base?: I): SetOrgMetadataResponse {
    return SetOrgMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetOrgMetadataResponse>, I>>(object: I): SetOrgMetadataResponse {
    const message = createBaseSetOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkSetOrgMetadataRequest(): BulkSetOrgMetadataRequest {
  return { metadata: [] };
}

export const BulkSetOrgMetadataRequest = {
  encode(message: BulkSetOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadata) {
      BulkSetOrgMetadataRequest_Metadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata.push(BulkSetOrgMetadataRequest_Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkSetOrgMetadataRequest {
    return {
      metadata: Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => BulkSetOrgMetadataRequest_Metadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BulkSetOrgMetadataRequest): unknown {
    const obj: any = {};
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => BulkSetOrgMetadataRequest_Metadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkSetOrgMetadataRequest>, I>>(base?: I): BulkSetOrgMetadataRequest {
    return BulkSetOrgMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkSetOrgMetadataRequest>, I>>(object: I): BulkSetOrgMetadataRequest {
    const message = createBaseBulkSetOrgMetadataRequest();
    message.metadata = object.metadata?.map((e) => BulkSetOrgMetadataRequest_Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkSetOrgMetadataRequest_Metadata(): BulkSetOrgMetadataRequest_Metadata {
  return { key: "", value: new Uint8Array(0) };
}

export const BulkSetOrgMetadataRequest_Metadata = {
  encode(message: BulkSetOrgMetadataRequest_Metadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetOrgMetadataRequest_Metadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetOrgMetadataRequest_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkSetOrgMetadataRequest_Metadata {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: BulkSetOrgMetadataRequest_Metadata): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkSetOrgMetadataRequest_Metadata>, I>>(
    base?: I,
  ): BulkSetOrgMetadataRequest_Metadata {
    return BulkSetOrgMetadataRequest_Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkSetOrgMetadataRequest_Metadata>, I>>(
    object: I,
  ): BulkSetOrgMetadataRequest_Metadata {
    const message = createBaseBulkSetOrgMetadataRequest_Metadata();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBulkSetOrgMetadataResponse(): BulkSetOrgMetadataResponse {
  return { details: undefined };
}

export const BulkSetOrgMetadataResponse = {
  encode(message: BulkSetOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkSetOrgMetadataResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: BulkSetOrgMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkSetOrgMetadataResponse>, I>>(base?: I): BulkSetOrgMetadataResponse {
    return BulkSetOrgMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkSetOrgMetadataResponse>, I>>(object: I): BulkSetOrgMetadataResponse {
    const message = createBaseBulkSetOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgMetadataRequest(): RemoveOrgMetadataRequest {
  return { key: "" };
}

export const RemoveOrgMetadataRequest = {
  encode(message: RemoveOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgMetadataRequest {
    return { key: isSet(object.key) ? String(object.key) : "" };
  },

  toJSON(message: RemoveOrgMetadataRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgMetadataRequest>, I>>(base?: I): RemoveOrgMetadataRequest {
    return RemoveOrgMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgMetadataRequest>, I>>(object: I): RemoveOrgMetadataRequest {
    const message = createBaseRemoveOrgMetadataRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseRemoveOrgMetadataResponse(): RemoveOrgMetadataResponse {
  return { details: undefined };
}

export const RemoveOrgMetadataResponse = {
  encode(message: RemoveOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgMetadataResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveOrgMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgMetadataResponse>, I>>(base?: I): RemoveOrgMetadataResponse {
    return RemoveOrgMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgMetadataResponse>, I>>(object: I): RemoveOrgMetadataResponse {
    const message = createBaseRemoveOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkRemoveOrgMetadataRequest(): BulkRemoveOrgMetadataRequest {
  return { keys: [] };
}

export const BulkRemoveOrgMetadataRequest = {
  encode(message: BulkRemoveOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.keys) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkRemoveOrgMetadataRequest {
    return { keys: Array.isArray(object?.keys) ? object.keys.map((e: any) => String(e)) : [] };
  },

  toJSON(message: BulkRemoveOrgMetadataRequest): unknown {
    const obj: any = {};
    if (message.keys?.length) {
      obj.keys = message.keys;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkRemoveOrgMetadataRequest>, I>>(base?: I): BulkRemoveOrgMetadataRequest {
    return BulkRemoveOrgMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkRemoveOrgMetadataRequest>, I>>(object: I): BulkRemoveOrgMetadataRequest {
    const message = createBaseBulkRemoveOrgMetadataRequest();
    message.keys = object.keys?.map((e) => e) || [];
    return message;
  },
};

function createBaseBulkRemoveOrgMetadataResponse(): BulkRemoveOrgMetadataResponse {
  return { details: undefined };
}

export const BulkRemoveOrgMetadataResponse = {
  encode(message: BulkRemoveOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkRemoveOrgMetadataResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: BulkRemoveOrgMetadataResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkRemoveOrgMetadataResponse>, I>>(base?: I): BulkRemoveOrgMetadataResponse {
    return BulkRemoveOrgMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkRemoveOrgMetadataResponse>, I>>(
    object: I,
  ): BulkRemoveOrgMetadataResponse {
    const message = createBaseBulkRemoveOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetProjectByIDRequest(): GetProjectByIDRequest {
  return { id: "" };
}

export const GetProjectByIDRequest = {
  encode(message: GetProjectByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectByIDRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetProjectByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProjectByIDRequest>, I>>(base?: I): GetProjectByIDRequest {
    return GetProjectByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProjectByIDRequest>, I>>(object: I): GetProjectByIDRequest {
    const message = createBaseGetProjectByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetProjectByIDResponse(): GetProjectByIDResponse {
  return { project: undefined };
}

export const GetProjectByIDResponse = {
  encode(message: GetProjectByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectByIDResponse {
    return { project: isSet(object.project) ? Project.fromJSON(object.project) : undefined };
  },

  toJSON(message: GetProjectByIDResponse): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProjectByIDResponse>, I>>(base?: I): GetProjectByIDResponse {
    return GetProjectByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProjectByIDResponse>, I>>(object: I): GetProjectByIDResponse {
    const message = createBaseGetProjectByIDResponse();
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseGetGrantedProjectByIDRequest(): GetGrantedProjectByIDRequest {
  return { projectId: "", grantId: "" };
}

export const GetGrantedProjectByIDRequest = {
  encode(message: GetGrantedProjectByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGrantedProjectByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGrantedProjectByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGrantedProjectByIDRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: GetGrantedProjectByIDRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGrantedProjectByIDRequest>, I>>(base?: I): GetGrantedProjectByIDRequest {
    return GetGrantedProjectByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGrantedProjectByIDRequest>, I>>(object: I): GetGrantedProjectByIDRequest {
    const message = createBaseGetGrantedProjectByIDRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseGetGrantedProjectByIDResponse(): GetGrantedProjectByIDResponse {
  return { grantedProject: undefined };
}

export const GetGrantedProjectByIDResponse = {
  encode(message: GetGrantedProjectByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.grantedProject !== undefined) {
      GrantedProject.encode(message.grantedProject, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGrantedProjectByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGrantedProjectByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grantedProject = GrantedProject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGrantedProjectByIDResponse {
    return {
      grantedProject: isSet(object.grantedProject) ? GrantedProject.fromJSON(object.grantedProject) : undefined,
    };
  },

  toJSON(message: GetGrantedProjectByIDResponse): unknown {
    const obj: any = {};
    if (message.grantedProject !== undefined) {
      obj.grantedProject = GrantedProject.toJSON(message.grantedProject);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGrantedProjectByIDResponse>, I>>(base?: I): GetGrantedProjectByIDResponse {
    return GetGrantedProjectByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGrantedProjectByIDResponse>, I>>(
    object: I,
  ): GetGrantedProjectByIDResponse {
    const message = createBaseGetGrantedProjectByIDResponse();
    message.grantedProject = (object.grantedProject !== undefined && object.grantedProject !== null)
      ? GrantedProject.fromPartial(object.grantedProject)
      : undefined;
    return message;
  },
};

function createBaseListProjectsRequest(): ListProjectsRequest {
  return { query: undefined, queries: [] };
}

export const ListProjectsRequest = {
  encode(message: ListProjectsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProjectQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(ProjectQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => ProjectQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => ProjectQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectsRequest>, I>>(base?: I): ListProjectsRequest {
    return ListProjectsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectsRequest>, I>>(object: I): ListProjectsRequest {
    const message = createBaseListProjectsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProjectQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectsResponse(): ListProjectsResponse {
  return { details: undefined, result: [] };
}

export const ListProjectsResponse = {
  encode(message: ListProjectsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Project.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Project.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Project.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Project.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectsResponse>, I>>(base?: I): ListProjectsResponse {
    return ListProjectsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectsResponse>, I>>(object: I): ListProjectsResponse {
    const message = createBaseListProjectsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGrantedProjectsRequest(): ListGrantedProjectsRequest {
  return { query: undefined, queries: [] };
}

export const ListGrantedProjectsRequest = {
  encode(message: ListGrantedProjectsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProjectQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListGrantedProjectsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantedProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(ProjectQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGrantedProjectsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => ProjectQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListGrantedProjectsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => ProjectQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGrantedProjectsRequest>, I>>(base?: I): ListGrantedProjectsRequest {
    return ListGrantedProjectsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGrantedProjectsRequest>, I>>(object: I): ListGrantedProjectsRequest {
    const message = createBaseListGrantedProjectsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProjectQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGrantedProjectsResponse(): ListGrantedProjectsResponse {
  return { details: undefined, result: [] };
}

export const ListGrantedProjectsResponse = {
  encode(message: ListGrantedProjectsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      GrantedProject.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListGrantedProjectsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantedProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(GrantedProject.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGrantedProjectsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => GrantedProject.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListGrantedProjectsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => GrantedProject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGrantedProjectsResponse>, I>>(base?: I): ListGrantedProjectsResponse {
    return ListGrantedProjectsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGrantedProjectsResponse>, I>>(object: I): ListGrantedProjectsResponse {
    const message = createBaseListGrantedProjectsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => GrantedProject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectChangesRequest(): ListProjectChangesRequest {
  return { query: undefined, projectId: "" };
}

export const ListProjectChangesRequest = {
  encode(message: ListProjectChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectChangesRequest {
    return {
      query: isSet(object.query) ? ChangeQuery.fromJSON(object.query) : undefined,
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
    };
  },

  toJSON(message: ListProjectChangesRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ChangeQuery.toJSON(message.query);
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectChangesRequest>, I>>(base?: I): ListProjectChangesRequest {
    return ListProjectChangesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectChangesRequest>, I>>(object: I): ListProjectChangesRequest {
    const message = createBaseListProjectChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseListProjectChangesResponse(): ListProjectChangesResponse {
  return { result: [] };
}

export const ListProjectChangesResponse = {
  encode(message: ListProjectChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectChangesResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => Change.fromJSON(e)) : [] };
  },

  toJSON(message: ListProjectChangesResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => Change.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectChangesResponse>, I>>(base?: I): ListProjectChangesResponse {
    return ListProjectChangesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectChangesResponse>, I>>(object: I): ListProjectChangesResponse {
    const message = createBaseListProjectChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddProjectRequest(): AddProjectRequest {
  return {
    name: "",
    projectRoleAssertion: false,
    projectRoleCheck: false,
    hasProjectCheck: false,
    privateLabelingSetting: 0,
  };
}

export const AddProjectRequest = {
  encode(message: AddProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.projectRoleAssertion === true) {
      writer.uint32(16).bool(message.projectRoleAssertion);
    }
    if (message.projectRoleCheck === true) {
      writer.uint32(24).bool(message.projectRoleCheck);
    }
    if (message.hasProjectCheck === true) {
      writer.uint32(32).bool(message.hasProjectCheck);
    }
    if (message.privateLabelingSetting !== 0) {
      writer.uint32(40).int32(message.privateLabelingSetting);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.projectRoleAssertion = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.projectRoleCheck = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasProjectCheck = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.privateLabelingSetting = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      projectRoleAssertion: isSet(object.projectRoleAssertion) ? Boolean(object.projectRoleAssertion) : false,
      projectRoleCheck: isSet(object.projectRoleCheck) ? Boolean(object.projectRoleCheck) : false,
      hasProjectCheck: isSet(object.hasProjectCheck) ? Boolean(object.hasProjectCheck) : false,
      privateLabelingSetting: isSet(object.privateLabelingSetting)
        ? privateLabelingSettingFromJSON(object.privateLabelingSetting)
        : 0,
    };
  },

  toJSON(message: AddProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectRoleAssertion === true) {
      obj.projectRoleAssertion = message.projectRoleAssertion;
    }
    if (message.projectRoleCheck === true) {
      obj.projectRoleCheck = message.projectRoleCheck;
    }
    if (message.hasProjectCheck === true) {
      obj.hasProjectCheck = message.hasProjectCheck;
    }
    if (message.privateLabelingSetting !== 0) {
      obj.privateLabelingSetting = privateLabelingSettingToJSON(message.privateLabelingSetting);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectRequest>, I>>(base?: I): AddProjectRequest {
    return AddProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectRequest>, I>>(object: I): AddProjectRequest {
    const message = createBaseAddProjectRequest();
    message.name = object.name ?? "";
    message.projectRoleAssertion = object.projectRoleAssertion ?? false;
    message.projectRoleCheck = object.projectRoleCheck ?? false;
    message.hasProjectCheck = object.hasProjectCheck ?? false;
    message.privateLabelingSetting = object.privateLabelingSetting ?? 0;
    return message;
  },
};

function createBaseAddProjectResponse(): AddProjectResponse {
  return { id: "", details: undefined };
}

export const AddProjectResponse = {
  encode(message: AddProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectResponse {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddProjectResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectResponse>, I>>(base?: I): AddProjectResponse {
    return AddProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectResponse>, I>>(object: I): AddProjectResponse {
    const message = createBaseAddProjectResponse();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectRequest(): UpdateProjectRequest {
  return {
    id: "",
    name: "",
    projectRoleAssertion: false,
    projectRoleCheck: false,
    hasProjectCheck: false,
    privateLabelingSetting: 0,
  };
}

export const UpdateProjectRequest = {
  encode(message: UpdateProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.projectRoleAssertion === true) {
      writer.uint32(24).bool(message.projectRoleAssertion);
    }
    if (message.projectRoleCheck === true) {
      writer.uint32(32).bool(message.projectRoleCheck);
    }
    if (message.hasProjectCheck === true) {
      writer.uint32(40).bool(message.hasProjectCheck);
    }
    if (message.privateLabelingSetting !== 0) {
      writer.uint32(48).int32(message.privateLabelingSetting);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.projectRoleAssertion = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.projectRoleCheck = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasProjectCheck = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.privateLabelingSetting = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      projectRoleAssertion: isSet(object.projectRoleAssertion) ? Boolean(object.projectRoleAssertion) : false,
      projectRoleCheck: isSet(object.projectRoleCheck) ? Boolean(object.projectRoleCheck) : false,
      hasProjectCheck: isSet(object.hasProjectCheck) ? Boolean(object.hasProjectCheck) : false,
      privateLabelingSetting: isSet(object.privateLabelingSetting)
        ? privateLabelingSettingFromJSON(object.privateLabelingSetting)
        : 0,
    };
  },

  toJSON(message: UpdateProjectRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectRoleAssertion === true) {
      obj.projectRoleAssertion = message.projectRoleAssertion;
    }
    if (message.projectRoleCheck === true) {
      obj.projectRoleCheck = message.projectRoleCheck;
    }
    if (message.hasProjectCheck === true) {
      obj.hasProjectCheck = message.hasProjectCheck;
    }
    if (message.privateLabelingSetting !== 0) {
      obj.privateLabelingSetting = privateLabelingSettingToJSON(message.privateLabelingSetting);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectRequest>, I>>(base?: I): UpdateProjectRequest {
    return UpdateProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectRequest>, I>>(object: I): UpdateProjectRequest {
    const message = createBaseUpdateProjectRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.projectRoleAssertion = object.projectRoleAssertion ?? false;
    message.projectRoleCheck = object.projectRoleCheck ?? false;
    message.hasProjectCheck = object.hasProjectCheck ?? false;
    message.privateLabelingSetting = object.privateLabelingSetting ?? 0;
    return message;
  },
};

function createBaseUpdateProjectResponse(): UpdateProjectResponse {
  return { details: undefined };
}

export const UpdateProjectResponse = {
  encode(message: UpdateProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateProjectResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectResponse>, I>>(base?: I): UpdateProjectResponse {
    return UpdateProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectResponse>, I>>(object: I): UpdateProjectResponse {
    const message = createBaseUpdateProjectResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateProjectRequest(): DeactivateProjectRequest {
  return { id: "" };
}

export const DeactivateProjectRequest = {
  encode(message: DeactivateProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateProjectRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: DeactivateProjectRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateProjectRequest>, I>>(base?: I): DeactivateProjectRequest {
    return DeactivateProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateProjectRequest>, I>>(object: I): DeactivateProjectRequest {
    const message = createBaseDeactivateProjectRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateProjectResponse(): DeactivateProjectResponse {
  return { details: undefined };
}

export const DeactivateProjectResponse = {
  encode(message: DeactivateProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateProjectResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateProjectResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateProjectResponse>, I>>(base?: I): DeactivateProjectResponse {
    return DeactivateProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateProjectResponse>, I>>(object: I): DeactivateProjectResponse {
    const message = createBaseDeactivateProjectResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateProjectRequest(): ReactivateProjectRequest {
  return { id: "" };
}

export const ReactivateProjectRequest = {
  encode(message: ReactivateProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateProjectRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: ReactivateProjectRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateProjectRequest>, I>>(base?: I): ReactivateProjectRequest {
    return ReactivateProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateProjectRequest>, I>>(object: I): ReactivateProjectRequest {
    const message = createBaseReactivateProjectRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseReactivateProjectResponse(): ReactivateProjectResponse {
  return { details: undefined };
}

export const ReactivateProjectResponse = {
  encode(message: ReactivateProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateProjectResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateProjectResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateProjectResponse>, I>>(base?: I): ReactivateProjectResponse {
    return ReactivateProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateProjectResponse>, I>>(object: I): ReactivateProjectResponse {
    const message = createBaseReactivateProjectResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectRequest(): RemoveProjectRequest {
  return { id: "" };
}

export const RemoveProjectRequest = {
  encode(message: RemoveProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: RemoveProjectRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectRequest>, I>>(base?: I): RemoveProjectRequest {
    return RemoveProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectRequest>, I>>(object: I): RemoveProjectRequest {
    const message = createBaseRemoveProjectRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveProjectResponse(): RemoveProjectResponse {
  return { details: undefined };
}

export const RemoveProjectResponse = {
  encode(message: RemoveProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveProjectResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectResponse>, I>>(base?: I): RemoveProjectResponse {
    return RemoveProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectResponse>, I>>(object: I): RemoveProjectResponse {
    const message = createBaseRemoveProjectResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProjectMemberRolesRequest(): ListProjectMemberRolesRequest {
  return {};
}

export const ListProjectMemberRolesRequest = {
  encode(_: ListProjectMemberRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectMemberRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectMemberRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListProjectMemberRolesRequest {
    return {};
  },

  toJSON(_: ListProjectMemberRolesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectMemberRolesRequest>, I>>(base?: I): ListProjectMemberRolesRequest {
    return ListProjectMemberRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectMemberRolesRequest>, I>>(_: I): ListProjectMemberRolesRequest {
    const message = createBaseListProjectMemberRolesRequest();
    return message;
  },
};

function createBaseListProjectMemberRolesResponse(): ListProjectMemberRolesResponse {
  return { details: undefined, result: [] };
}

export const ListProjectMemberRolesResponse = {
  encode(message: ListProjectMemberRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectMemberRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectMemberRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectMemberRolesResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: ListProjectMemberRolesResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectMemberRolesResponse>, I>>(base?: I): ListProjectMemberRolesResponse {
    return ListProjectMemberRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectMemberRolesResponse>, I>>(
    object: I,
  ): ListProjectMemberRolesResponse {
    const message = createBaseListProjectMemberRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddProjectRoleRequest(): AddProjectRoleRequest {
  return { projectId: "", roleKey: "", displayName: "", group: "" };
}

export const AddProjectRoleRequest = {
  encode(message: AddProjectRoleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.roleKey !== "") {
      writer.uint32(18).string(message.roleKey);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.group !== "") {
      writer.uint32(34).string(message.group);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectRoleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roleKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.group = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectRoleRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      roleKey: isSet(object.roleKey) ? String(object.roleKey) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      group: isSet(object.group) ? String(object.group) : "",
    };
  },

  toJSON(message: AddProjectRoleRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.roleKey !== "") {
      obj.roleKey = message.roleKey;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.group !== "") {
      obj.group = message.group;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectRoleRequest>, I>>(base?: I): AddProjectRoleRequest {
    return AddProjectRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectRoleRequest>, I>>(object: I): AddProjectRoleRequest {
    const message = createBaseAddProjectRoleRequest();
    message.projectId = object.projectId ?? "";
    message.roleKey = object.roleKey ?? "";
    message.displayName = object.displayName ?? "";
    message.group = object.group ?? "";
    return message;
  },
};

function createBaseAddProjectRoleResponse(): AddProjectRoleResponse {
  return { details: undefined };
}

export const AddProjectRoleResponse = {
  encode(message: AddProjectRoleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectRoleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectRoleResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddProjectRoleResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectRoleResponse>, I>>(base?: I): AddProjectRoleResponse {
    return AddProjectRoleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectRoleResponse>, I>>(object: I): AddProjectRoleResponse {
    const message = createBaseAddProjectRoleResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkAddProjectRolesRequest(): BulkAddProjectRolesRequest {
  return { projectId: "", roles: [] };
}

export const BulkAddProjectRolesRequest = {
  encode(message: BulkAddProjectRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    for (const v of message.roles) {
      BulkAddProjectRolesRequest_Role.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkAddProjectRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAddProjectRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(BulkAddProjectRolesRequest_Role.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkAddProjectRolesRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      roles: Array.isArray(object?.roles)
        ? object.roles.map((e: any) => BulkAddProjectRolesRequest_Role.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BulkAddProjectRolesRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles.map((e) => BulkAddProjectRolesRequest_Role.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkAddProjectRolesRequest>, I>>(base?: I): BulkAddProjectRolesRequest {
    return BulkAddProjectRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkAddProjectRolesRequest>, I>>(object: I): BulkAddProjectRolesRequest {
    const message = createBaseBulkAddProjectRolesRequest();
    message.projectId = object.projectId ?? "";
    message.roles = object.roles?.map((e) => BulkAddProjectRolesRequest_Role.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkAddProjectRolesRequest_Role(): BulkAddProjectRolesRequest_Role {
  return { key: "", displayName: "", group: "" };
}

export const BulkAddProjectRolesRequest_Role = {
  encode(message: BulkAddProjectRolesRequest_Role, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.group !== "") {
      writer.uint32(26).string(message.group);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkAddProjectRolesRequest_Role {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAddProjectRolesRequest_Role();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.group = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkAddProjectRolesRequest_Role {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      group: isSet(object.group) ? String(object.group) : "",
    };
  },

  toJSON(message: BulkAddProjectRolesRequest_Role): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.group !== "") {
      obj.group = message.group;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkAddProjectRolesRequest_Role>, I>>(base?: I): BulkAddProjectRolesRequest_Role {
    return BulkAddProjectRolesRequest_Role.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkAddProjectRolesRequest_Role>, I>>(
    object: I,
  ): BulkAddProjectRolesRequest_Role {
    const message = createBaseBulkAddProjectRolesRequest_Role();
    message.key = object.key ?? "";
    message.displayName = object.displayName ?? "";
    message.group = object.group ?? "";
    return message;
  },
};

function createBaseBulkAddProjectRolesResponse(): BulkAddProjectRolesResponse {
  return { details: undefined };
}

export const BulkAddProjectRolesResponse = {
  encode(message: BulkAddProjectRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkAddProjectRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAddProjectRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkAddProjectRolesResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: BulkAddProjectRolesResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkAddProjectRolesResponse>, I>>(base?: I): BulkAddProjectRolesResponse {
    return BulkAddProjectRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkAddProjectRolesResponse>, I>>(object: I): BulkAddProjectRolesResponse {
    const message = createBaseBulkAddProjectRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectRoleRequest(): UpdateProjectRoleRequest {
  return { projectId: "", roleKey: "", displayName: "", group: "" };
}

export const UpdateProjectRoleRequest = {
  encode(message: UpdateProjectRoleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.roleKey !== "") {
      writer.uint32(18).string(message.roleKey);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.group !== "") {
      writer.uint32(34).string(message.group);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectRoleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roleKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.group = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectRoleRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      roleKey: isSet(object.roleKey) ? String(object.roleKey) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      group: isSet(object.group) ? String(object.group) : "",
    };
  },

  toJSON(message: UpdateProjectRoleRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.roleKey !== "") {
      obj.roleKey = message.roleKey;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.group !== "") {
      obj.group = message.group;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectRoleRequest>, I>>(base?: I): UpdateProjectRoleRequest {
    return UpdateProjectRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectRoleRequest>, I>>(object: I): UpdateProjectRoleRequest {
    const message = createBaseUpdateProjectRoleRequest();
    message.projectId = object.projectId ?? "";
    message.roleKey = object.roleKey ?? "";
    message.displayName = object.displayName ?? "";
    message.group = object.group ?? "";
    return message;
  },
};

function createBaseUpdateProjectRoleResponse(): UpdateProjectRoleResponse {
  return { details: undefined };
}

export const UpdateProjectRoleResponse = {
  encode(message: UpdateProjectRoleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectRoleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectRoleResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateProjectRoleResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectRoleResponse>, I>>(base?: I): UpdateProjectRoleResponse {
    return UpdateProjectRoleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectRoleResponse>, I>>(object: I): UpdateProjectRoleResponse {
    const message = createBaseUpdateProjectRoleResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectRoleRequest(): RemoveProjectRoleRequest {
  return { projectId: "", roleKey: "" };
}

export const RemoveProjectRoleRequest = {
  encode(message: RemoveProjectRoleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.roleKey !== "") {
      writer.uint32(18).string(message.roleKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectRoleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roleKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectRoleRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      roleKey: isSet(object.roleKey) ? String(object.roleKey) : "",
    };
  },

  toJSON(message: RemoveProjectRoleRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.roleKey !== "") {
      obj.roleKey = message.roleKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectRoleRequest>, I>>(base?: I): RemoveProjectRoleRequest {
    return RemoveProjectRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectRoleRequest>, I>>(object: I): RemoveProjectRoleRequest {
    const message = createBaseRemoveProjectRoleRequest();
    message.projectId = object.projectId ?? "";
    message.roleKey = object.roleKey ?? "";
    return message;
  },
};

function createBaseRemoveProjectRoleResponse(): RemoveProjectRoleResponse {
  return { details: undefined };
}

export const RemoveProjectRoleResponse = {
  encode(message: RemoveProjectRoleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectRoleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectRoleResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveProjectRoleResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectRoleResponse>, I>>(base?: I): RemoveProjectRoleResponse {
    return RemoveProjectRoleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectRoleResponse>, I>>(object: I): RemoveProjectRoleResponse {
    const message = createBaseRemoveProjectRoleResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProjectRolesRequest(): ListProjectRolesRequest {
  return { projectId: "", query: undefined, queries: [] };
}

export const ListProjectRolesRequest = {
  encode(message: ListProjectRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      RoleQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(RoleQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectRolesRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => RoleQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectRolesRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => RoleQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectRolesRequest>, I>>(base?: I): ListProjectRolesRequest {
    return ListProjectRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectRolesRequest>, I>>(object: I): ListProjectRolesRequest {
    const message = createBaseListProjectRolesRequest();
    message.projectId = object.projectId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => RoleQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectRolesResponse(): ListProjectRolesResponse {
  return { details: undefined, result: [] };
}

export const ListProjectRolesResponse = {
  encode(message: ListProjectRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Role.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Role.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectRolesResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Role.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectRolesResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Role.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectRolesResponse>, I>>(base?: I): ListProjectRolesResponse {
    return ListProjectRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectRolesResponse>, I>>(object: I): ListProjectRolesResponse {
    const message = createBaseListProjectRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Role.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGrantedProjectRolesRequest(): ListGrantedProjectRolesRequest {
  return { projectId: "", grantId: "", query: undefined, queries: [] };
}

export const ListGrantedProjectRolesRequest = {
  encode(message: ListGrantedProjectRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.queries) {
      RoleQuery.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListGrantedProjectRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantedProjectRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.queries.push(RoleQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGrantedProjectRolesRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => RoleQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListGrantedProjectRolesRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => RoleQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGrantedProjectRolesRequest>, I>>(base?: I): ListGrantedProjectRolesRequest {
    return ListGrantedProjectRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGrantedProjectRolesRequest>, I>>(
    object: I,
  ): ListGrantedProjectRolesRequest {
    const message = createBaseListGrantedProjectRolesRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => RoleQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGrantedProjectRolesResponse(): ListGrantedProjectRolesResponse {
  return { details: undefined, result: [] };
}

export const ListGrantedProjectRolesResponse = {
  encode(message: ListGrantedProjectRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Role.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListGrantedProjectRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantedProjectRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Role.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGrantedProjectRolesResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Role.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListGrantedProjectRolesResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Role.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGrantedProjectRolesResponse>, I>>(base?: I): ListGrantedProjectRolesResponse {
    return ListGrantedProjectRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGrantedProjectRolesResponse>, I>>(
    object: I,
  ): ListGrantedProjectRolesResponse {
    const message = createBaseListGrantedProjectRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Role.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectMembersRequest(): ListProjectMembersRequest {
  return { projectId: "", query: undefined, queries: [] };
}

export const ListProjectMembersRequest = {
  encode(message: ListProjectMembersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      SearchQuery1.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectMembersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(SearchQuery1.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectMembersRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => SearchQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectMembersRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectMembersRequest>, I>>(base?: I): ListProjectMembersRequest {
    return ListProjectMembersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectMembersRequest>, I>>(object: I): ListProjectMembersRequest {
    const message = createBaseListProjectMembersRequest();
    message.projectId = object.projectId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SearchQuery1.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectMembersResponse(): ListProjectMembersResponse {
  return { details: undefined, result: [] };
}

export const ListProjectMembersResponse = {
  encode(message: ListProjectMembersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Member.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectMembersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Member.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectMembersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Member.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectMembersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Member.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectMembersResponse>, I>>(base?: I): ListProjectMembersResponse {
    return ListProjectMembersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectMembersResponse>, I>>(object: I): ListProjectMembersResponse {
    const message = createBaseListProjectMembersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddProjectMemberRequest(): AddProjectMemberRequest {
  return { projectId: "", userId: "", roles: [] };
}

export const AddProjectMemberRequest = {
  encode(message: AddProjectMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectMemberRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: AddProjectMemberRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectMemberRequest>, I>>(base?: I): AddProjectMemberRequest {
    return AddProjectMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectMemberRequest>, I>>(object: I): AddProjectMemberRequest {
    const message = createBaseAddProjectMemberRequest();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddProjectMemberResponse(): AddProjectMemberResponse {
  return { details: undefined };
}

export const AddProjectMemberResponse = {
  encode(message: AddProjectMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddProjectMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectMemberResponse>, I>>(base?: I): AddProjectMemberResponse {
    return AddProjectMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectMemberResponse>, I>>(object: I): AddProjectMemberResponse {
    const message = createBaseAddProjectMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectMemberRequest(): UpdateProjectMemberRequest {
  return { projectId: "", userId: "", roles: [] };
}

export const UpdateProjectMemberRequest = {
  encode(message: UpdateProjectMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectMemberRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: UpdateProjectMemberRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectMemberRequest>, I>>(base?: I): UpdateProjectMemberRequest {
    return UpdateProjectMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectMemberRequest>, I>>(object: I): UpdateProjectMemberRequest {
    const message = createBaseUpdateProjectMemberRequest();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateProjectMemberResponse(): UpdateProjectMemberResponse {
  return { details: undefined };
}

export const UpdateProjectMemberResponse = {
  encode(message: UpdateProjectMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateProjectMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectMemberResponse>, I>>(base?: I): UpdateProjectMemberResponse {
    return UpdateProjectMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectMemberResponse>, I>>(object: I): UpdateProjectMemberResponse {
    const message = createBaseUpdateProjectMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectMemberRequest(): RemoveProjectMemberRequest {
  return { projectId: "", userId: "" };
}

export const RemoveProjectMemberRequest = {
  encode(message: RemoveProjectMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectMemberRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
    };
  },

  toJSON(message: RemoveProjectMemberRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectMemberRequest>, I>>(base?: I): RemoveProjectMemberRequest {
    return RemoveProjectMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectMemberRequest>, I>>(object: I): RemoveProjectMemberRequest {
    const message = createBaseRemoveProjectMemberRequest();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveProjectMemberResponse(): RemoveProjectMemberResponse {
  return { details: undefined };
}

export const RemoveProjectMemberResponse = {
  encode(message: RemoveProjectMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveProjectMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectMemberResponse>, I>>(base?: I): RemoveProjectMemberResponse {
    return RemoveProjectMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectMemberResponse>, I>>(object: I): RemoveProjectMemberResponse {
    const message = createBaseRemoveProjectMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetAppByIDRequest(): GetAppByIDRequest {
  return { projectId: "", appId: "" };
}

export const GetAppByIDRequest = {
  encode(message: GetAppByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAppByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAppByIDRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
    };
  },

  toJSON(message: GetAppByIDRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAppByIDRequest>, I>>(base?: I): GetAppByIDRequest {
    return GetAppByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAppByIDRequest>, I>>(object: I): GetAppByIDRequest {
    const message = createBaseGetAppByIDRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseGetAppByIDResponse(): GetAppByIDResponse {
  return { app: undefined };
}

export const GetAppByIDResponse = {
  encode(message: GetAppByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.app !== undefined) {
      App.encode(message.app, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAppByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.app = App.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAppByIDResponse {
    return { app: isSet(object.app) ? App.fromJSON(object.app) : undefined };
  },

  toJSON(message: GetAppByIDResponse): unknown {
    const obj: any = {};
    if (message.app !== undefined) {
      obj.app = App.toJSON(message.app);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAppByIDResponse>, I>>(base?: I): GetAppByIDResponse {
    return GetAppByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAppByIDResponse>, I>>(object: I): GetAppByIDResponse {
    const message = createBaseGetAppByIDResponse();
    message.app = (object.app !== undefined && object.app !== null) ? App.fromPartial(object.app) : undefined;
    return message;
  },
};

function createBaseListAppsRequest(): ListAppsRequest {
  return { projectId: "", query: undefined, queries: [] };
}

export const ListAppsRequest = {
  encode(message: ListAppsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      AppQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(AppQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppsRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => AppQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListAppsRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => AppQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAppsRequest>, I>>(base?: I): ListAppsRequest {
    return ListAppsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAppsRequest>, I>>(object: I): ListAppsRequest {
    const message = createBaseListAppsRequest();
    message.projectId = object.projectId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => AppQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAppsResponse(): ListAppsResponse {
  return { details: undefined, result: [] };
}

export const ListAppsResponse = {
  encode(message: ListAppsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      App.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(App.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => App.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListAppsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => App.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAppsResponse>, I>>(base?: I): ListAppsResponse {
    return ListAppsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAppsResponse>, I>>(object: I): ListAppsResponse {
    const message = createBaseListAppsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => App.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAppChangesRequest(): ListAppChangesRequest {
  return { query: undefined, projectId: "", appId: "" };
}

export const ListAppChangesRequest = {
  encode(message: ListAppChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(26).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppChangesRequest {
    return {
      query: isSet(object.query) ? ChangeQuery.fromJSON(object.query) : undefined,
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
    };
  },

  toJSON(message: ListAppChangesRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ChangeQuery.toJSON(message.query);
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAppChangesRequest>, I>>(base?: I): ListAppChangesRequest {
    return ListAppChangesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAppChangesRequest>, I>>(object: I): ListAppChangesRequest {
    const message = createBaseListAppChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseListAppChangesResponse(): ListAppChangesResponse {
  return { result: [] };
}

export const ListAppChangesResponse = {
  encode(message: ListAppChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppChangesResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => Change.fromJSON(e)) : [] };
  },

  toJSON(message: ListAppChangesResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => Change.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAppChangesResponse>, I>>(base?: I): ListAppChangesResponse {
    return ListAppChangesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAppChangesResponse>, I>>(object: I): ListAppChangesResponse {
    const message = createBaseListAppChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOIDCAppRequest(): AddOIDCAppRequest {
  return {
    projectId: "",
    name: "",
    redirectUris: [],
    responseTypes: [],
    grantTypes: [],
    appType: 0,
    authMethodType: 0,
    postLogoutRedirectUris: [],
    version: 0,
    devMode: false,
    accessTokenType: 0,
    accessTokenRoleAssertion: false,
    idTokenRoleAssertion: false,
    idTokenUserinfoAssertion: false,
    clockSkew: undefined,
    additionalOrigins: [],
    skipNativeAppSuccessPage: false,
  };
}

export const AddOIDCAppRequest = {
  encode(message: AddOIDCAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.redirectUris) {
      writer.uint32(26).string(v!);
    }
    writer.uint32(34).fork();
    for (const v of message.responseTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(42).fork();
    for (const v of message.grantTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.appType !== 0) {
      writer.uint32(48).int32(message.appType);
    }
    if (message.authMethodType !== 0) {
      writer.uint32(56).int32(message.authMethodType);
    }
    for (const v of message.postLogoutRedirectUris) {
      writer.uint32(66).string(v!);
    }
    if (message.version !== 0) {
      writer.uint32(72).int32(message.version);
    }
    if (message.devMode === true) {
      writer.uint32(80).bool(message.devMode);
    }
    if (message.accessTokenType !== 0) {
      writer.uint32(88).int32(message.accessTokenType);
    }
    if (message.accessTokenRoleAssertion === true) {
      writer.uint32(96).bool(message.accessTokenRoleAssertion);
    }
    if (message.idTokenRoleAssertion === true) {
      writer.uint32(104).bool(message.idTokenRoleAssertion);
    }
    if (message.idTokenUserinfoAssertion === true) {
      writer.uint32(112).bool(message.idTokenUserinfoAssertion);
    }
    if (message.clockSkew !== undefined) {
      Duration.encode(message.clockSkew, writer.uint32(122).fork()).ldelim();
    }
    for (const v of message.additionalOrigins) {
      writer.uint32(130).string(v!);
    }
    if (message.skipNativeAppSuccessPage === true) {
      writer.uint32(136).bool(message.skipNativeAppSuccessPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOIDCAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.redirectUris.push(reader.string());
          continue;
        case 4:
          if (tag === 32) {
            message.responseTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.responseTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag === 40) {
            message.grantTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.grantTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.appType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.authMethodType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.postLogoutRedirectUris.push(reader.string());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.version = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.devMode = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.accessTokenType = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.accessTokenRoleAssertion = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.idTokenRoleAssertion = reader.bool();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.idTokenUserinfoAssertion = reader.bool();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.clockSkew = Duration.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.additionalOrigins.push(reader.string());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.skipNativeAppSuccessPage = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCAppRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      redirectUris: Array.isArray(object?.redirectUris) ? object.redirectUris.map((e: any) => String(e)) : [],
      responseTypes: Array.isArray(object?.responseTypes)
        ? object.responseTypes.map((e: any) => oIDCResponseTypeFromJSON(e))
        : [],
      grantTypes: Array.isArray(object?.grantTypes) ? object.grantTypes.map((e: any) => oIDCGrantTypeFromJSON(e)) : [],
      appType: isSet(object.appType) ? oIDCAppTypeFromJSON(object.appType) : 0,
      authMethodType: isSet(object.authMethodType) ? oIDCAuthMethodTypeFromJSON(object.authMethodType) : 0,
      postLogoutRedirectUris: Array.isArray(object?.postLogoutRedirectUris)
        ? object.postLogoutRedirectUris.map((e: any) => String(e))
        : [],
      version: isSet(object.version) ? oIDCVersionFromJSON(object.version) : 0,
      devMode: isSet(object.devMode) ? Boolean(object.devMode) : false,
      accessTokenType: isSet(object.accessTokenType) ? oIDCTokenTypeFromJSON(object.accessTokenType) : 0,
      accessTokenRoleAssertion: isSet(object.accessTokenRoleAssertion)
        ? Boolean(object.accessTokenRoleAssertion)
        : false,
      idTokenRoleAssertion: isSet(object.idTokenRoleAssertion) ? Boolean(object.idTokenRoleAssertion) : false,
      idTokenUserinfoAssertion: isSet(object.idTokenUserinfoAssertion)
        ? Boolean(object.idTokenUserinfoAssertion)
        : false,
      clockSkew: isSet(object.clockSkew) ? Duration.fromJSON(object.clockSkew) : undefined,
      additionalOrigins: Array.isArray(object?.additionalOrigins)
        ? object.additionalOrigins.map((e: any) => String(e))
        : [],
      skipNativeAppSuccessPage: isSet(object.skipNativeAppSuccessPage)
        ? Boolean(object.skipNativeAppSuccessPage)
        : false,
    };
  },

  toJSON(message: AddOIDCAppRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.redirectUris?.length) {
      obj.redirectUris = message.redirectUris;
    }
    if (message.responseTypes?.length) {
      obj.responseTypes = message.responseTypes.map((e) => oIDCResponseTypeToJSON(e));
    }
    if (message.grantTypes?.length) {
      obj.grantTypes = message.grantTypes.map((e) => oIDCGrantTypeToJSON(e));
    }
    if (message.appType !== 0) {
      obj.appType = oIDCAppTypeToJSON(message.appType);
    }
    if (message.authMethodType !== 0) {
      obj.authMethodType = oIDCAuthMethodTypeToJSON(message.authMethodType);
    }
    if (message.postLogoutRedirectUris?.length) {
      obj.postLogoutRedirectUris = message.postLogoutRedirectUris;
    }
    if (message.version !== 0) {
      obj.version = oIDCVersionToJSON(message.version);
    }
    if (message.devMode === true) {
      obj.devMode = message.devMode;
    }
    if (message.accessTokenType !== 0) {
      obj.accessTokenType = oIDCTokenTypeToJSON(message.accessTokenType);
    }
    if (message.accessTokenRoleAssertion === true) {
      obj.accessTokenRoleAssertion = message.accessTokenRoleAssertion;
    }
    if (message.idTokenRoleAssertion === true) {
      obj.idTokenRoleAssertion = message.idTokenRoleAssertion;
    }
    if (message.idTokenUserinfoAssertion === true) {
      obj.idTokenUserinfoAssertion = message.idTokenUserinfoAssertion;
    }
    if (message.clockSkew !== undefined) {
      obj.clockSkew = Duration.toJSON(message.clockSkew);
    }
    if (message.additionalOrigins?.length) {
      obj.additionalOrigins = message.additionalOrigins;
    }
    if (message.skipNativeAppSuccessPage === true) {
      obj.skipNativeAppSuccessPage = message.skipNativeAppSuccessPage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOIDCAppRequest>, I>>(base?: I): AddOIDCAppRequest {
    return AddOIDCAppRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOIDCAppRequest>, I>>(object: I): AddOIDCAppRequest {
    const message = createBaseAddOIDCAppRequest();
    message.projectId = object.projectId ?? "";
    message.name = object.name ?? "";
    message.redirectUris = object.redirectUris?.map((e) => e) || [];
    message.responseTypes = object.responseTypes?.map((e) => e) || [];
    message.grantTypes = object.grantTypes?.map((e) => e) || [];
    message.appType = object.appType ?? 0;
    message.authMethodType = object.authMethodType ?? 0;
    message.postLogoutRedirectUris = object.postLogoutRedirectUris?.map((e) => e) || [];
    message.version = object.version ?? 0;
    message.devMode = object.devMode ?? false;
    message.accessTokenType = object.accessTokenType ?? 0;
    message.accessTokenRoleAssertion = object.accessTokenRoleAssertion ?? false;
    message.idTokenRoleAssertion = object.idTokenRoleAssertion ?? false;
    message.idTokenUserinfoAssertion = object.idTokenUserinfoAssertion ?? false;
    message.clockSkew = (object.clockSkew !== undefined && object.clockSkew !== null)
      ? Duration.fromPartial(object.clockSkew)
      : undefined;
    message.additionalOrigins = object.additionalOrigins?.map((e) => e) || [];
    message.skipNativeAppSuccessPage = object.skipNativeAppSuccessPage ?? false;
    return message;
  },
};

function createBaseAddOIDCAppResponse(): AddOIDCAppResponse {
  return {
    appId: "",
    details: undefined,
    clientId: "",
    clientSecret: "",
    noneCompliant: false,
    complianceProblems: [],
  };
}

export const AddOIDCAppResponse = {
  encode(message: AddOIDCAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.noneCompliant === true) {
      writer.uint32(40).bool(message.noneCompliant);
    }
    for (const v of message.complianceProblems) {
      LocalizedMessage.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOIDCAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.noneCompliant = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.complianceProblems.push(LocalizedMessage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCAppResponse {
    return {
      appId: isSet(object.appId) ? String(object.appId) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      noneCompliant: isSet(object.noneCompliant) ? Boolean(object.noneCompliant) : false,
      complianceProblems: Array.isArray(object?.complianceProblems)
        ? object.complianceProblems.map((e: any) => LocalizedMessage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddOIDCAppResponse): unknown {
    const obj: any = {};
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.noneCompliant === true) {
      obj.noneCompliant = message.noneCompliant;
    }
    if (message.complianceProblems?.length) {
      obj.complianceProblems = message.complianceProblems.map((e) => LocalizedMessage.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOIDCAppResponse>, I>>(base?: I): AddOIDCAppResponse {
    return AddOIDCAppResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOIDCAppResponse>, I>>(object: I): AddOIDCAppResponse {
    const message = createBaseAddOIDCAppResponse();
    message.appId = object.appId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.noneCompliant = object.noneCompliant ?? false;
    message.complianceProblems = object.complianceProblems?.map((e) => LocalizedMessage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddSAMLAppRequest(): AddSAMLAppRequest {
  return { projectId: "", name: "", metadataXml: undefined, metadataUrl: undefined };
}

export const AddSAMLAppRequest = {
  encode(message: AddSAMLAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.metadataXml !== undefined) {
      writer.uint32(26).bytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      writer.uint32(34).string(message.metadataUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSAMLAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSAMLAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataXml = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSAMLAppRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      metadataXml: isSet(object.metadataXml) ? bytesFromBase64(object.metadataXml) : undefined,
      metadataUrl: isSet(object.metadataUrl) ? String(object.metadataUrl) : undefined,
    };
  },

  toJSON(message: AddSAMLAppRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.metadataXml !== undefined) {
      obj.metadataXml = base64FromBytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      obj.metadataUrl = message.metadataUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSAMLAppRequest>, I>>(base?: I): AddSAMLAppRequest {
    return AddSAMLAppRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSAMLAppRequest>, I>>(object: I): AddSAMLAppRequest {
    const message = createBaseAddSAMLAppRequest();
    message.projectId = object.projectId ?? "";
    message.name = object.name ?? "";
    message.metadataXml = object.metadataXml ?? undefined;
    message.metadataUrl = object.metadataUrl ?? undefined;
    return message;
  },
};

function createBaseAddSAMLAppResponse(): AddSAMLAppResponse {
  return { appId: "", details: undefined };
}

export const AddSAMLAppResponse = {
  encode(message: AddSAMLAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSAMLAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSAMLAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSAMLAppResponse {
    return {
      appId: isSet(object.appId) ? String(object.appId) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddSAMLAppResponse): unknown {
    const obj: any = {};
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSAMLAppResponse>, I>>(base?: I): AddSAMLAppResponse {
    return AddSAMLAppResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSAMLAppResponse>, I>>(object: I): AddSAMLAppResponse {
    const message = createBaseAddSAMLAppResponse();
    message.appId = object.appId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddAPIAppRequest(): AddAPIAppRequest {
  return { projectId: "", name: "", authMethodType: 0 };
}

export const AddAPIAppRequest = {
  encode(message: AddAPIAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.authMethodType !== 0) {
      writer.uint32(24).int32(message.authMethodType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAPIAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAPIAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.authMethodType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAPIAppRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      authMethodType: isSet(object.authMethodType) ? aPIAuthMethodTypeFromJSON(object.authMethodType) : 0,
    };
  },

  toJSON(message: AddAPIAppRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.authMethodType !== 0) {
      obj.authMethodType = aPIAuthMethodTypeToJSON(message.authMethodType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAPIAppRequest>, I>>(base?: I): AddAPIAppRequest {
    return AddAPIAppRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAPIAppRequest>, I>>(object: I): AddAPIAppRequest {
    const message = createBaseAddAPIAppRequest();
    message.projectId = object.projectId ?? "";
    message.name = object.name ?? "";
    message.authMethodType = object.authMethodType ?? 0;
    return message;
  },
};

function createBaseAddAPIAppResponse(): AddAPIAppResponse {
  return { appId: "", details: undefined, clientId: "", clientSecret: "" };
}

export const AddAPIAppResponse = {
  encode(message: AddAPIAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAPIAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAPIAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAPIAppResponse {
    return {
      appId: isSet(object.appId) ? String(object.appId) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
    };
  },

  toJSON(message: AddAPIAppResponse): unknown {
    const obj: any = {};
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAPIAppResponse>, I>>(base?: I): AddAPIAppResponse {
    return AddAPIAppResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAPIAppResponse>, I>>(object: I): AddAPIAppResponse {
    const message = createBaseAddAPIAppResponse();
    message.appId = object.appId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    return message;
  },
};

function createBaseUpdateAppRequest(): UpdateAppRequest {
  return { projectId: "", appId: "", name: "" };
}

export const UpdateAppRequest = {
  encode(message: UpdateAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAppRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
      name: isSet(object.name) ? String(object.name) : "",
    };
  },

  toJSON(message: UpdateAppRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAppRequest>, I>>(base?: I): UpdateAppRequest {
    return UpdateAppRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAppRequest>, I>>(object: I): UpdateAppRequest {
    const message = createBaseUpdateAppRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAppResponse(): UpdateAppResponse {
  return { details: undefined };
}

export const UpdateAppResponse = {
  encode(message: UpdateAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAppResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateAppResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAppResponse>, I>>(base?: I): UpdateAppResponse {
    return UpdateAppResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAppResponse>, I>>(object: I): UpdateAppResponse {
    const message = createBaseUpdateAppResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOIDCAppConfigRequest(): UpdateOIDCAppConfigRequest {
  return {
    projectId: "",
    appId: "",
    redirectUris: [],
    responseTypes: [],
    grantTypes: [],
    appType: 0,
    authMethodType: 0,
    postLogoutRedirectUris: [],
    devMode: false,
    accessTokenType: 0,
    accessTokenRoleAssertion: false,
    idTokenRoleAssertion: false,
    idTokenUserinfoAssertion: false,
    clockSkew: undefined,
    additionalOrigins: [],
    skipNativeAppSuccessPage: false,
  };
}

export const UpdateOIDCAppConfigRequest = {
  encode(message: UpdateOIDCAppConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    for (const v of message.redirectUris) {
      writer.uint32(26).string(v!);
    }
    writer.uint32(34).fork();
    for (const v of message.responseTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(42).fork();
    for (const v of message.grantTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.appType !== 0) {
      writer.uint32(48).int32(message.appType);
    }
    if (message.authMethodType !== 0) {
      writer.uint32(56).int32(message.authMethodType);
    }
    for (const v of message.postLogoutRedirectUris) {
      writer.uint32(66).string(v!);
    }
    if (message.devMode === true) {
      writer.uint32(72).bool(message.devMode);
    }
    if (message.accessTokenType !== 0) {
      writer.uint32(80).int32(message.accessTokenType);
    }
    if (message.accessTokenRoleAssertion === true) {
      writer.uint32(88).bool(message.accessTokenRoleAssertion);
    }
    if (message.idTokenRoleAssertion === true) {
      writer.uint32(96).bool(message.idTokenRoleAssertion);
    }
    if (message.idTokenUserinfoAssertion === true) {
      writer.uint32(104).bool(message.idTokenUserinfoAssertion);
    }
    if (message.clockSkew !== undefined) {
      Duration.encode(message.clockSkew, writer.uint32(114).fork()).ldelim();
    }
    for (const v of message.additionalOrigins) {
      writer.uint32(122).string(v!);
    }
    if (message.skipNativeAppSuccessPage === true) {
      writer.uint32(128).bool(message.skipNativeAppSuccessPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOIDCAppConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOIDCAppConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.redirectUris.push(reader.string());
          continue;
        case 4:
          if (tag === 32) {
            message.responseTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.responseTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag === 40) {
            message.grantTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.grantTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.appType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.authMethodType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.postLogoutRedirectUris.push(reader.string());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.devMode = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.accessTokenType = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.accessTokenRoleAssertion = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.idTokenRoleAssertion = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.idTokenUserinfoAssertion = reader.bool();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.clockSkew = Duration.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.additionalOrigins.push(reader.string());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.skipNativeAppSuccessPage = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOIDCAppConfigRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
      redirectUris: Array.isArray(object?.redirectUris) ? object.redirectUris.map((e: any) => String(e)) : [],
      responseTypes: Array.isArray(object?.responseTypes)
        ? object.responseTypes.map((e: any) => oIDCResponseTypeFromJSON(e))
        : [],
      grantTypes: Array.isArray(object?.grantTypes) ? object.grantTypes.map((e: any) => oIDCGrantTypeFromJSON(e)) : [],
      appType: isSet(object.appType) ? oIDCAppTypeFromJSON(object.appType) : 0,
      authMethodType: isSet(object.authMethodType) ? oIDCAuthMethodTypeFromJSON(object.authMethodType) : 0,
      postLogoutRedirectUris: Array.isArray(object?.postLogoutRedirectUris)
        ? object.postLogoutRedirectUris.map((e: any) => String(e))
        : [],
      devMode: isSet(object.devMode) ? Boolean(object.devMode) : false,
      accessTokenType: isSet(object.accessTokenType) ? oIDCTokenTypeFromJSON(object.accessTokenType) : 0,
      accessTokenRoleAssertion: isSet(object.accessTokenRoleAssertion)
        ? Boolean(object.accessTokenRoleAssertion)
        : false,
      idTokenRoleAssertion: isSet(object.idTokenRoleAssertion) ? Boolean(object.idTokenRoleAssertion) : false,
      idTokenUserinfoAssertion: isSet(object.idTokenUserinfoAssertion)
        ? Boolean(object.idTokenUserinfoAssertion)
        : false,
      clockSkew: isSet(object.clockSkew) ? Duration.fromJSON(object.clockSkew) : undefined,
      additionalOrigins: Array.isArray(object?.additionalOrigins)
        ? object.additionalOrigins.map((e: any) => String(e))
        : [],
      skipNativeAppSuccessPage: isSet(object.skipNativeAppSuccessPage)
        ? Boolean(object.skipNativeAppSuccessPage)
        : false,
    };
  },

  toJSON(message: UpdateOIDCAppConfigRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.redirectUris?.length) {
      obj.redirectUris = message.redirectUris;
    }
    if (message.responseTypes?.length) {
      obj.responseTypes = message.responseTypes.map((e) => oIDCResponseTypeToJSON(e));
    }
    if (message.grantTypes?.length) {
      obj.grantTypes = message.grantTypes.map((e) => oIDCGrantTypeToJSON(e));
    }
    if (message.appType !== 0) {
      obj.appType = oIDCAppTypeToJSON(message.appType);
    }
    if (message.authMethodType !== 0) {
      obj.authMethodType = oIDCAuthMethodTypeToJSON(message.authMethodType);
    }
    if (message.postLogoutRedirectUris?.length) {
      obj.postLogoutRedirectUris = message.postLogoutRedirectUris;
    }
    if (message.devMode === true) {
      obj.devMode = message.devMode;
    }
    if (message.accessTokenType !== 0) {
      obj.accessTokenType = oIDCTokenTypeToJSON(message.accessTokenType);
    }
    if (message.accessTokenRoleAssertion === true) {
      obj.accessTokenRoleAssertion = message.accessTokenRoleAssertion;
    }
    if (message.idTokenRoleAssertion === true) {
      obj.idTokenRoleAssertion = message.idTokenRoleAssertion;
    }
    if (message.idTokenUserinfoAssertion === true) {
      obj.idTokenUserinfoAssertion = message.idTokenUserinfoAssertion;
    }
    if (message.clockSkew !== undefined) {
      obj.clockSkew = Duration.toJSON(message.clockSkew);
    }
    if (message.additionalOrigins?.length) {
      obj.additionalOrigins = message.additionalOrigins;
    }
    if (message.skipNativeAppSuccessPage === true) {
      obj.skipNativeAppSuccessPage = message.skipNativeAppSuccessPage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOIDCAppConfigRequest>, I>>(base?: I): UpdateOIDCAppConfigRequest {
    return UpdateOIDCAppConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOIDCAppConfigRequest>, I>>(object: I): UpdateOIDCAppConfigRequest {
    const message = createBaseUpdateOIDCAppConfigRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.redirectUris = object.redirectUris?.map((e) => e) || [];
    message.responseTypes = object.responseTypes?.map((e) => e) || [];
    message.grantTypes = object.grantTypes?.map((e) => e) || [];
    message.appType = object.appType ?? 0;
    message.authMethodType = object.authMethodType ?? 0;
    message.postLogoutRedirectUris = object.postLogoutRedirectUris?.map((e) => e) || [];
    message.devMode = object.devMode ?? false;
    message.accessTokenType = object.accessTokenType ?? 0;
    message.accessTokenRoleAssertion = object.accessTokenRoleAssertion ?? false;
    message.idTokenRoleAssertion = object.idTokenRoleAssertion ?? false;
    message.idTokenUserinfoAssertion = object.idTokenUserinfoAssertion ?? false;
    message.clockSkew = (object.clockSkew !== undefined && object.clockSkew !== null)
      ? Duration.fromPartial(object.clockSkew)
      : undefined;
    message.additionalOrigins = object.additionalOrigins?.map((e) => e) || [];
    message.skipNativeAppSuccessPage = object.skipNativeAppSuccessPage ?? false;
    return message;
  },
};

function createBaseUpdateOIDCAppConfigResponse(): UpdateOIDCAppConfigResponse {
  return { details: undefined };
}

export const UpdateOIDCAppConfigResponse = {
  encode(message: UpdateOIDCAppConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOIDCAppConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOIDCAppConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOIDCAppConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOIDCAppConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOIDCAppConfigResponse>, I>>(base?: I): UpdateOIDCAppConfigResponse {
    return UpdateOIDCAppConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOIDCAppConfigResponse>, I>>(object: I): UpdateOIDCAppConfigResponse {
    const message = createBaseUpdateOIDCAppConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateSAMLAppConfigRequest(): UpdateSAMLAppConfigRequest {
  return { projectId: "", appId: "", metadataXml: undefined, metadataUrl: undefined };
}

export const UpdateSAMLAppConfigRequest = {
  encode(message: UpdateSAMLAppConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.metadataXml !== undefined) {
      writer.uint32(26).bytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      writer.uint32(34).string(message.metadataUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSAMLAppConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSAMLAppConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataXml = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSAMLAppConfigRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
      metadataXml: isSet(object.metadataXml) ? bytesFromBase64(object.metadataXml) : undefined,
      metadataUrl: isSet(object.metadataUrl) ? String(object.metadataUrl) : undefined,
    };
  },

  toJSON(message: UpdateSAMLAppConfigRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.metadataXml !== undefined) {
      obj.metadataXml = base64FromBytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      obj.metadataUrl = message.metadataUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSAMLAppConfigRequest>, I>>(base?: I): UpdateSAMLAppConfigRequest {
    return UpdateSAMLAppConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSAMLAppConfigRequest>, I>>(object: I): UpdateSAMLAppConfigRequest {
    const message = createBaseUpdateSAMLAppConfigRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.metadataXml = object.metadataXml ?? undefined;
    message.metadataUrl = object.metadataUrl ?? undefined;
    return message;
  },
};

function createBaseUpdateSAMLAppConfigResponse(): UpdateSAMLAppConfigResponse {
  return { details: undefined };
}

export const UpdateSAMLAppConfigResponse = {
  encode(message: UpdateSAMLAppConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSAMLAppConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSAMLAppConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSAMLAppConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSAMLAppConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSAMLAppConfigResponse>, I>>(base?: I): UpdateSAMLAppConfigResponse {
    return UpdateSAMLAppConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSAMLAppConfigResponse>, I>>(object: I): UpdateSAMLAppConfigResponse {
    const message = createBaseUpdateSAMLAppConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateAPIAppConfigRequest(): UpdateAPIAppConfigRequest {
  return { projectId: "", appId: "", authMethodType: 0 };
}

export const UpdateAPIAppConfigRequest = {
  encode(message: UpdateAPIAppConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.authMethodType !== 0) {
      writer.uint32(56).int32(message.authMethodType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAPIAppConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAPIAppConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.authMethodType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAPIAppConfigRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
      authMethodType: isSet(object.authMethodType) ? aPIAuthMethodTypeFromJSON(object.authMethodType) : 0,
    };
  },

  toJSON(message: UpdateAPIAppConfigRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.authMethodType !== 0) {
      obj.authMethodType = aPIAuthMethodTypeToJSON(message.authMethodType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAPIAppConfigRequest>, I>>(base?: I): UpdateAPIAppConfigRequest {
    return UpdateAPIAppConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAPIAppConfigRequest>, I>>(object: I): UpdateAPIAppConfigRequest {
    const message = createBaseUpdateAPIAppConfigRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.authMethodType = object.authMethodType ?? 0;
    return message;
  },
};

function createBaseUpdateAPIAppConfigResponse(): UpdateAPIAppConfigResponse {
  return { details: undefined };
}

export const UpdateAPIAppConfigResponse = {
  encode(message: UpdateAPIAppConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAPIAppConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAPIAppConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAPIAppConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateAPIAppConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAPIAppConfigResponse>, I>>(base?: I): UpdateAPIAppConfigResponse {
    return UpdateAPIAppConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAPIAppConfigResponse>, I>>(object: I): UpdateAPIAppConfigResponse {
    const message = createBaseUpdateAPIAppConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateAppRequest(): DeactivateAppRequest {
  return { projectId: "", appId: "" };
}

export const DeactivateAppRequest = {
  encode(message: DeactivateAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateAppRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
    };
  },

  toJSON(message: DeactivateAppRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateAppRequest>, I>>(base?: I): DeactivateAppRequest {
    return DeactivateAppRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateAppRequest>, I>>(object: I): DeactivateAppRequest {
    const message = createBaseDeactivateAppRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseDeactivateAppResponse(): DeactivateAppResponse {
  return { details: undefined };
}

export const DeactivateAppResponse = {
  encode(message: DeactivateAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateAppResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateAppResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateAppResponse>, I>>(base?: I): DeactivateAppResponse {
    return DeactivateAppResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateAppResponse>, I>>(object: I): DeactivateAppResponse {
    const message = createBaseDeactivateAppResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateAppRequest(): ReactivateAppRequest {
  return { projectId: "", appId: "" };
}

export const ReactivateAppRequest = {
  encode(message: ReactivateAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateAppRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
    };
  },

  toJSON(message: ReactivateAppRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateAppRequest>, I>>(base?: I): ReactivateAppRequest {
    return ReactivateAppRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateAppRequest>, I>>(object: I): ReactivateAppRequest {
    const message = createBaseReactivateAppRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseReactivateAppResponse(): ReactivateAppResponse {
  return { details: undefined };
}

export const ReactivateAppResponse = {
  encode(message: ReactivateAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateAppResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateAppResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateAppResponse>, I>>(base?: I): ReactivateAppResponse {
    return ReactivateAppResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateAppResponse>, I>>(object: I): ReactivateAppResponse {
    const message = createBaseReactivateAppResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveAppRequest(): RemoveAppRequest {
  return { projectId: "", appId: "" };
}

export const RemoveAppRequest = {
  encode(message: RemoveAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAppRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
    };
  },

  toJSON(message: RemoveAppRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAppRequest>, I>>(base?: I): RemoveAppRequest {
    return RemoveAppRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAppRequest>, I>>(object: I): RemoveAppRequest {
    const message = createBaseRemoveAppRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseRemoveAppResponse(): RemoveAppResponse {
  return { details: undefined };
}

export const RemoveAppResponse = {
  encode(message: RemoveAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAppResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveAppResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAppResponse>, I>>(base?: I): RemoveAppResponse {
    return RemoveAppResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAppResponse>, I>>(object: I): RemoveAppResponse {
    const message = createBaseRemoveAppResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRegenerateOIDCClientSecretRequest(): RegenerateOIDCClientSecretRequest {
  return { projectId: "", appId: "" };
}

export const RegenerateOIDCClientSecretRequest = {
  encode(message: RegenerateOIDCClientSecretRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateOIDCClientSecretRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateOIDCClientSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegenerateOIDCClientSecretRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
    };
  },

  toJSON(message: RegenerateOIDCClientSecretRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegenerateOIDCClientSecretRequest>, I>>(
    base?: I,
  ): RegenerateOIDCClientSecretRequest {
    return RegenerateOIDCClientSecretRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegenerateOIDCClientSecretRequest>, I>>(
    object: I,
  ): RegenerateOIDCClientSecretRequest {
    const message = createBaseRegenerateOIDCClientSecretRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseRegenerateOIDCClientSecretResponse(): RegenerateOIDCClientSecretResponse {
  return { clientSecret: "", details: undefined };
}

export const RegenerateOIDCClientSecretResponse = {
  encode(message: RegenerateOIDCClientSecretResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientSecret !== "") {
      writer.uint32(10).string(message.clientSecret);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateOIDCClientSecretResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateOIDCClientSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegenerateOIDCClientSecretResponse {
    return {
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: RegenerateOIDCClientSecretResponse): unknown {
    const obj: any = {};
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegenerateOIDCClientSecretResponse>, I>>(
    base?: I,
  ): RegenerateOIDCClientSecretResponse {
    return RegenerateOIDCClientSecretResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegenerateOIDCClientSecretResponse>, I>>(
    object: I,
  ): RegenerateOIDCClientSecretResponse {
    const message = createBaseRegenerateOIDCClientSecretResponse();
    message.clientSecret = object.clientSecret ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRegenerateAPIClientSecretRequest(): RegenerateAPIClientSecretRequest {
  return { projectId: "", appId: "" };
}

export const RegenerateAPIClientSecretRequest = {
  encode(message: RegenerateAPIClientSecretRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateAPIClientSecretRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateAPIClientSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegenerateAPIClientSecretRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
    };
  },

  toJSON(message: RegenerateAPIClientSecretRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegenerateAPIClientSecretRequest>, I>>(
    base?: I,
  ): RegenerateAPIClientSecretRequest {
    return RegenerateAPIClientSecretRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegenerateAPIClientSecretRequest>, I>>(
    object: I,
  ): RegenerateAPIClientSecretRequest {
    const message = createBaseRegenerateAPIClientSecretRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseRegenerateAPIClientSecretResponse(): RegenerateAPIClientSecretResponse {
  return { clientSecret: "", details: undefined };
}

export const RegenerateAPIClientSecretResponse = {
  encode(message: RegenerateAPIClientSecretResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientSecret !== "") {
      writer.uint32(10).string(message.clientSecret);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateAPIClientSecretResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateAPIClientSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegenerateAPIClientSecretResponse {
    return {
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: RegenerateAPIClientSecretResponse): unknown {
    const obj: any = {};
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegenerateAPIClientSecretResponse>, I>>(
    base?: I,
  ): RegenerateAPIClientSecretResponse {
    return RegenerateAPIClientSecretResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegenerateAPIClientSecretResponse>, I>>(
    object: I,
  ): RegenerateAPIClientSecretResponse {
    const message = createBaseRegenerateAPIClientSecretResponse();
    message.clientSecret = object.clientSecret ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetAppKeyRequest(): GetAppKeyRequest {
  return { projectId: "", appId: "", keyId: "" };
}

export const GetAppKeyRequest = {
  encode(message: GetAppKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.keyId !== "") {
      writer.uint32(26).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAppKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAppKeyRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
      keyId: isSet(object.keyId) ? String(object.keyId) : "",
    };
  },

  toJSON(message: GetAppKeyRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAppKeyRequest>, I>>(base?: I): GetAppKeyRequest {
    return GetAppKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAppKeyRequest>, I>>(object: I): GetAppKeyRequest {
    const message = createBaseGetAppKeyRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseGetAppKeyResponse(): GetAppKeyResponse {
  return { key: undefined };
}

export const GetAppKeyResponse = {
  encode(message: GetAppKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== undefined) {
      Key.encode(message.key, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAppKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = Key.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAppKeyResponse {
    return { key: isSet(object.key) ? Key.fromJSON(object.key) : undefined };
  },

  toJSON(message: GetAppKeyResponse): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = Key.toJSON(message.key);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAppKeyResponse>, I>>(base?: I): GetAppKeyResponse {
    return GetAppKeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAppKeyResponse>, I>>(object: I): GetAppKeyResponse {
    const message = createBaseGetAppKeyResponse();
    message.key = (object.key !== undefined && object.key !== null) ? Key.fromPartial(object.key) : undefined;
    return message;
  },
};

function createBaseListAppKeysRequest(): ListAppKeysRequest {
  return { query: undefined, appId: "", projectId: "" };
}

export const ListAppKeysRequest = {
  encode(message: ListAppKeysRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppKeysRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppKeysRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      appId: isSet(object.appId) ? String(object.appId) : "",
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
    };
  },

  toJSON(message: ListAppKeysRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAppKeysRequest>, I>>(base?: I): ListAppKeysRequest {
    return ListAppKeysRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAppKeysRequest>, I>>(object: I): ListAppKeysRequest {
    const message = createBaseListAppKeysRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.appId = object.appId ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseListAppKeysResponse(): ListAppKeysResponse {
  return { details: undefined, result: [] };
}

export const ListAppKeysResponse = {
  encode(message: ListAppKeysResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Key.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppKeysResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Key.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppKeysResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Key.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListAppKeysResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Key.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAppKeysResponse>, I>>(base?: I): ListAppKeysResponse {
    return ListAppKeysResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAppKeysResponse>, I>>(object: I): ListAppKeysResponse {
    const message = createBaseListAppKeysResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Key.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddAppKeyRequest(): AddAppKeyRequest {
  return { projectId: "", appId: "", type: 0, expirationDate: undefined };
}

export const AddAppKeyRequest = {
  encode(message: AddAppKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAppKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAppKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAppKeyRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
      type: isSet(object.type) ? keyTypeFromJSON(object.type) : 0,
      expirationDate: isSet(object.expirationDate) ? fromJsonTimestamp(object.expirationDate) : undefined,
    };
  },

  toJSON(message: AddAppKeyRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.type !== 0) {
      obj.type = keyTypeToJSON(message.type);
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = message.expirationDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAppKeyRequest>, I>>(base?: I): AddAppKeyRequest {
    return AddAppKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAppKeyRequest>, I>>(object: I): AddAppKeyRequest {
    const message = createBaseAddAppKeyRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.type = object.type ?? 0;
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseAddAppKeyResponse(): AddAppKeyResponse {
  return { id: "", details: undefined, keyDetails: new Uint8Array(0) };
}

export const AddAppKeyResponse = {
  encode(message: AddAppKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    if (message.keyDetails.length !== 0) {
      writer.uint32(26).bytes(message.keyDetails);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAppKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAppKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyDetails = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAppKeyResponse {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      keyDetails: isSet(object.keyDetails) ? bytesFromBase64(object.keyDetails) : new Uint8Array(0),
    };
  },

  toJSON(message: AddAppKeyResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.keyDetails.length !== 0) {
      obj.keyDetails = base64FromBytes(message.keyDetails);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAppKeyResponse>, I>>(base?: I): AddAppKeyResponse {
    return AddAppKeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAppKeyResponse>, I>>(object: I): AddAppKeyResponse {
    const message = createBaseAddAppKeyResponse();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.keyDetails = object.keyDetails ?? new Uint8Array(0);
    return message;
  },
};

function createBaseRemoveAppKeyRequest(): RemoveAppKeyRequest {
  return { projectId: "", appId: "", keyId: "" };
}

export const RemoveAppKeyRequest = {
  encode(message: RemoveAppKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.keyId !== "") {
      writer.uint32(26).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveAppKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAppKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAppKeyRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      appId: isSet(object.appId) ? String(object.appId) : "",
      keyId: isSet(object.keyId) ? String(object.keyId) : "",
    };
  },

  toJSON(message: RemoveAppKeyRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAppKeyRequest>, I>>(base?: I): RemoveAppKeyRequest {
    return RemoveAppKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAppKeyRequest>, I>>(object: I): RemoveAppKeyRequest {
    const message = createBaseRemoveAppKeyRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseRemoveAppKeyResponse(): RemoveAppKeyResponse {
  return { details: undefined };
}

export const RemoveAppKeyResponse = {
  encode(message: RemoveAppKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveAppKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAppKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAppKeyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveAppKeyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAppKeyResponse>, I>>(base?: I): RemoveAppKeyResponse {
    return RemoveAppKeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAppKeyResponse>, I>>(object: I): RemoveAppKeyResponse {
    const message = createBaseRemoveAppKeyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProjectGrantChangesRequest(): ListProjectGrantChangesRequest {
  return { query: undefined, projectId: "", grantId: "" };
}

export const ListProjectGrantChangesRequest = {
  encode(message: ListProjectGrantChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(26).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectGrantChangesRequest {
    return {
      query: isSet(object.query) ? ChangeQuery.fromJSON(object.query) : undefined,
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: ListProjectGrantChangesRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ChangeQuery.toJSON(message.query);
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectGrantChangesRequest>, I>>(base?: I): ListProjectGrantChangesRequest {
    return ListProjectGrantChangesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectGrantChangesRequest>, I>>(
    object: I,
  ): ListProjectGrantChangesRequest {
    const message = createBaseListProjectGrantChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseListProjectGrantChangesResponse(): ListProjectGrantChangesResponse {
  return { result: [] };
}

export const ListProjectGrantChangesResponse = {
  encode(message: ListProjectGrantChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectGrantChangesResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => Change.fromJSON(e)) : [] };
  },

  toJSON(message: ListProjectGrantChangesResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => Change.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectGrantChangesResponse>, I>>(base?: I): ListProjectGrantChangesResponse {
    return ListProjectGrantChangesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectGrantChangesResponse>, I>>(
    object: I,
  ): ListProjectGrantChangesResponse {
    const message = createBaseListProjectGrantChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProjectGrantByIDRequest(): GetProjectGrantByIDRequest {
  return { projectId: "", grantId: "" };
}

export const GetProjectGrantByIDRequest = {
  encode(message: GetProjectGrantByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectGrantByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectGrantByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectGrantByIDRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: GetProjectGrantByIDRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProjectGrantByIDRequest>, I>>(base?: I): GetProjectGrantByIDRequest {
    return GetProjectGrantByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProjectGrantByIDRequest>, I>>(object: I): GetProjectGrantByIDRequest {
    const message = createBaseGetProjectGrantByIDRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseGetProjectGrantByIDResponse(): GetProjectGrantByIDResponse {
  return { projectGrant: undefined };
}

export const GetProjectGrantByIDResponse = {
  encode(message: GetProjectGrantByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectGrant !== undefined) {
      GrantedProject.encode(message.projectGrant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectGrantByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectGrantByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectGrant = GrantedProject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectGrantByIDResponse {
    return { projectGrant: isSet(object.projectGrant) ? GrantedProject.fromJSON(object.projectGrant) : undefined };
  },

  toJSON(message: GetProjectGrantByIDResponse): unknown {
    const obj: any = {};
    if (message.projectGrant !== undefined) {
      obj.projectGrant = GrantedProject.toJSON(message.projectGrant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProjectGrantByIDResponse>, I>>(base?: I): GetProjectGrantByIDResponse {
    return GetProjectGrantByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProjectGrantByIDResponse>, I>>(object: I): GetProjectGrantByIDResponse {
    const message = createBaseGetProjectGrantByIDResponse();
    message.projectGrant = (object.projectGrant !== undefined && object.projectGrant !== null)
      ? GrantedProject.fromPartial(object.projectGrant)
      : undefined;
    return message;
  },
};

function createBaseListProjectGrantsRequest(): ListProjectGrantsRequest {
  return { projectId: "", query: undefined, queries: [] };
}

export const ListProjectGrantsRequest = {
  encode(message: ListProjectGrantsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProjectGrantQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(ProjectGrantQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectGrantsRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => ProjectGrantQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectGrantsRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => ProjectGrantQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectGrantsRequest>, I>>(base?: I): ListProjectGrantsRequest {
    return ListProjectGrantsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectGrantsRequest>, I>>(object: I): ListProjectGrantsRequest {
    const message = createBaseListProjectGrantsRequest();
    message.projectId = object.projectId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProjectGrantQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectGrantsResponse(): ListProjectGrantsResponse {
  return { details: undefined, result: [] };
}

export const ListProjectGrantsResponse = {
  encode(message: ListProjectGrantsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      GrantedProject.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(GrantedProject.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectGrantsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => GrantedProject.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectGrantsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => GrantedProject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectGrantsResponse>, I>>(base?: I): ListProjectGrantsResponse {
    return ListProjectGrantsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectGrantsResponse>, I>>(object: I): ListProjectGrantsResponse {
    const message = createBaseListProjectGrantsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => GrantedProject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAllProjectGrantsRequest(): ListAllProjectGrantsRequest {
  return { query: undefined, queries: [] };
}

export const ListAllProjectGrantsRequest = {
  encode(message: ListAllProjectGrantsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      AllProjectGrantQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAllProjectGrantsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllProjectGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(AllProjectGrantQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllProjectGrantsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => AllProjectGrantQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListAllProjectGrantsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => AllProjectGrantQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAllProjectGrantsRequest>, I>>(base?: I): ListAllProjectGrantsRequest {
    return ListAllProjectGrantsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAllProjectGrantsRequest>, I>>(object: I): ListAllProjectGrantsRequest {
    const message = createBaseListAllProjectGrantsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => AllProjectGrantQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAllProjectGrantsResponse(): ListAllProjectGrantsResponse {
  return { details: undefined, result: [] };
}

export const ListAllProjectGrantsResponse = {
  encode(message: ListAllProjectGrantsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      GrantedProject.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAllProjectGrantsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllProjectGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(GrantedProject.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllProjectGrantsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => GrantedProject.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListAllProjectGrantsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => GrantedProject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAllProjectGrantsResponse>, I>>(base?: I): ListAllProjectGrantsResponse {
    return ListAllProjectGrantsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAllProjectGrantsResponse>, I>>(object: I): ListAllProjectGrantsResponse {
    const message = createBaseListAllProjectGrantsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => GrantedProject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddProjectGrantRequest(): AddProjectGrantRequest {
  return { projectId: "", grantedOrgId: "", roleKeys: [] };
}

export const AddProjectGrantRequest = {
  encode(message: AddProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantedOrgId !== "") {
      writer.uint32(18).string(message.grantedOrgId);
    }
    for (const v of message.roleKeys) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantedOrgId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roleKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectGrantRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantedOrgId: isSet(object.grantedOrgId) ? String(object.grantedOrgId) : "",
      roleKeys: Array.isArray(object?.roleKeys) ? object.roleKeys.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: AddProjectGrantRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantedOrgId !== "") {
      obj.grantedOrgId = message.grantedOrgId;
    }
    if (message.roleKeys?.length) {
      obj.roleKeys = message.roleKeys;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectGrantRequest>, I>>(base?: I): AddProjectGrantRequest {
    return AddProjectGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectGrantRequest>, I>>(object: I): AddProjectGrantRequest {
    const message = createBaseAddProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantedOrgId = object.grantedOrgId ?? "";
    message.roleKeys = object.roleKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddProjectGrantResponse(): AddProjectGrantResponse {
  return { grantId: "", details: undefined };
}

export const AddProjectGrantResponse = {
  encode(message: AddProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.grantId !== "") {
      writer.uint32(10).string(message.grantId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectGrantResponse {
    return {
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddProjectGrantResponse): unknown {
    const obj: any = {};
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectGrantResponse>, I>>(base?: I): AddProjectGrantResponse {
    return AddProjectGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectGrantResponse>, I>>(object: I): AddProjectGrantResponse {
    const message = createBaseAddProjectGrantResponse();
    message.grantId = object.grantId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectGrantRequest(): UpdateProjectGrantRequest {
  return { projectId: "", grantId: "", roleKeys: [] };
}

export const UpdateProjectGrantRequest = {
  encode(message: UpdateProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    for (const v of message.roleKeys) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roleKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectGrantRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      roleKeys: Array.isArray(object?.roleKeys) ? object.roleKeys.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: UpdateProjectGrantRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.roleKeys?.length) {
      obj.roleKeys = message.roleKeys;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectGrantRequest>, I>>(base?: I): UpdateProjectGrantRequest {
    return UpdateProjectGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectGrantRequest>, I>>(object: I): UpdateProjectGrantRequest {
    const message = createBaseUpdateProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.roleKeys = object.roleKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateProjectGrantResponse(): UpdateProjectGrantResponse {
  return { details: undefined };
}

export const UpdateProjectGrantResponse = {
  encode(message: UpdateProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectGrantResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateProjectGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectGrantResponse>, I>>(base?: I): UpdateProjectGrantResponse {
    return UpdateProjectGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectGrantResponse>, I>>(object: I): UpdateProjectGrantResponse {
    const message = createBaseUpdateProjectGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateProjectGrantRequest(): DeactivateProjectGrantRequest {
  return { projectId: "", grantId: "" };
}

export const DeactivateProjectGrantRequest = {
  encode(message: DeactivateProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateProjectGrantRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: DeactivateProjectGrantRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateProjectGrantRequest>, I>>(base?: I): DeactivateProjectGrantRequest {
    return DeactivateProjectGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateProjectGrantRequest>, I>>(
    object: I,
  ): DeactivateProjectGrantRequest {
    const message = createBaseDeactivateProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseDeactivateProjectGrantResponse(): DeactivateProjectGrantResponse {
  return { details: undefined };
}

export const DeactivateProjectGrantResponse = {
  encode(message: DeactivateProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateProjectGrantResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateProjectGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateProjectGrantResponse>, I>>(base?: I): DeactivateProjectGrantResponse {
    return DeactivateProjectGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateProjectGrantResponse>, I>>(
    object: I,
  ): DeactivateProjectGrantResponse {
    const message = createBaseDeactivateProjectGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateProjectGrantRequest(): ReactivateProjectGrantRequest {
  return { projectId: "", grantId: "" };
}

export const ReactivateProjectGrantRequest = {
  encode(message: ReactivateProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateProjectGrantRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: ReactivateProjectGrantRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateProjectGrantRequest>, I>>(base?: I): ReactivateProjectGrantRequest {
    return ReactivateProjectGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateProjectGrantRequest>, I>>(
    object: I,
  ): ReactivateProjectGrantRequest {
    const message = createBaseReactivateProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseReactivateProjectGrantResponse(): ReactivateProjectGrantResponse {
  return { details: undefined };
}

export const ReactivateProjectGrantResponse = {
  encode(message: ReactivateProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateProjectGrantResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateProjectGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateProjectGrantResponse>, I>>(base?: I): ReactivateProjectGrantResponse {
    return ReactivateProjectGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateProjectGrantResponse>, I>>(
    object: I,
  ): ReactivateProjectGrantResponse {
    const message = createBaseReactivateProjectGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectGrantRequest(): RemoveProjectGrantRequest {
  return { projectId: "", grantId: "" };
}

export const RemoveProjectGrantRequest = {
  encode(message: RemoveProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectGrantRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: RemoveProjectGrantRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectGrantRequest>, I>>(base?: I): RemoveProjectGrantRequest {
    return RemoveProjectGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectGrantRequest>, I>>(object: I): RemoveProjectGrantRequest {
    const message = createBaseRemoveProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseRemoveProjectGrantResponse(): RemoveProjectGrantResponse {
  return { details: undefined };
}

export const RemoveProjectGrantResponse = {
  encode(message: RemoveProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectGrantResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveProjectGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectGrantResponse>, I>>(base?: I): RemoveProjectGrantResponse {
    return RemoveProjectGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectGrantResponse>, I>>(object: I): RemoveProjectGrantResponse {
    const message = createBaseRemoveProjectGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProjectGrantMemberRolesRequest(): ListProjectGrantMemberRolesRequest {
  return { query: undefined, result: [] };
}

export const ListProjectGrantMemberRolesRequest = {
  encode(message: ListProjectGrantMemberRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantMemberRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantMemberRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectGrantMemberRolesRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: ListProjectGrantMemberRolesRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.result?.length) {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectGrantMemberRolesRequest>, I>>(
    base?: I,
  ): ListProjectGrantMemberRolesRequest {
    return ListProjectGrantMemberRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectGrantMemberRolesRequest>, I>>(
    object: I,
  ): ListProjectGrantMemberRolesRequest {
    const message = createBaseListProjectGrantMemberRolesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseListProjectGrantMemberRolesResponse(): ListProjectGrantMemberRolesResponse {
  return { details: undefined, result: [] };
}

export const ListProjectGrantMemberRolesResponse = {
  encode(message: ListProjectGrantMemberRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantMemberRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantMemberRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectGrantMemberRolesResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: ListProjectGrantMemberRolesResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectGrantMemberRolesResponse>, I>>(
    base?: I,
  ): ListProjectGrantMemberRolesResponse {
    return ListProjectGrantMemberRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectGrantMemberRolesResponse>, I>>(
    object: I,
  ): ListProjectGrantMemberRolesResponse {
    const message = createBaseListProjectGrantMemberRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseListProjectGrantMembersRequest(): ListProjectGrantMembersRequest {
  return { projectId: "", grantId: "", query: undefined, queries: [] };
}

export const ListProjectGrantMembersRequest = {
  encode(message: ListProjectGrantMembersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.queries) {
      SearchQuery1.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantMembersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.queries.push(SearchQuery1.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectGrantMembersRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => SearchQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectGrantMembersRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectGrantMembersRequest>, I>>(base?: I): ListProjectGrantMembersRequest {
    return ListProjectGrantMembersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectGrantMembersRequest>, I>>(
    object: I,
  ): ListProjectGrantMembersRequest {
    const message = createBaseListProjectGrantMembersRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SearchQuery1.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectGrantMembersResponse(): ListProjectGrantMembersResponse {
  return { details: undefined, result: [] };
}

export const ListProjectGrantMembersResponse = {
  encode(message: ListProjectGrantMembersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Member.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantMembersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Member.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectGrantMembersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Member.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProjectGrantMembersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Member.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProjectGrantMembersResponse>, I>>(base?: I): ListProjectGrantMembersResponse {
    return ListProjectGrantMembersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProjectGrantMembersResponse>, I>>(
    object: I,
  ): ListProjectGrantMembersResponse {
    const message = createBaseListProjectGrantMembersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddProjectGrantMemberRequest(): AddProjectGrantMemberRequest {
  return { projectId: "", grantId: "", userId: "", roles: [] };
}

export const AddProjectGrantMemberRequest = {
  encode(message: AddProjectGrantMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectGrantMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectGrantMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectGrantMemberRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: AddProjectGrantMemberRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectGrantMemberRequest>, I>>(base?: I): AddProjectGrantMemberRequest {
    return AddProjectGrantMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectGrantMemberRequest>, I>>(object: I): AddProjectGrantMemberRequest {
    const message = createBaseAddProjectGrantMemberRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddProjectGrantMemberResponse(): AddProjectGrantMemberResponse {
  return { details: undefined };
}

export const AddProjectGrantMemberResponse = {
  encode(message: AddProjectGrantMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectGrantMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectGrantMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectGrantMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddProjectGrantMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectGrantMemberResponse>, I>>(base?: I): AddProjectGrantMemberResponse {
    return AddProjectGrantMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectGrantMemberResponse>, I>>(
    object: I,
  ): AddProjectGrantMemberResponse {
    const message = createBaseAddProjectGrantMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectGrantMemberRequest(): UpdateProjectGrantMemberRequest {
  return { projectId: "", grantId: "", userId: "", roles: [] };
}

export const UpdateProjectGrantMemberRequest = {
  encode(message: UpdateProjectGrantMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectGrantMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectGrantMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectGrantMemberRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
      roles: Array.isArray(object?.roles) ? object.roles.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: UpdateProjectGrantMemberRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectGrantMemberRequest>, I>>(base?: I): UpdateProjectGrantMemberRequest {
    return UpdateProjectGrantMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectGrantMemberRequest>, I>>(
    object: I,
  ): UpdateProjectGrantMemberRequest {
    const message = createBaseUpdateProjectGrantMemberRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateProjectGrantMemberResponse(): UpdateProjectGrantMemberResponse {
  return { details: undefined };
}

export const UpdateProjectGrantMemberResponse = {
  encode(message: UpdateProjectGrantMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectGrantMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectGrantMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectGrantMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateProjectGrantMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectGrantMemberResponse>, I>>(
    base?: I,
  ): UpdateProjectGrantMemberResponse {
    return UpdateProjectGrantMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectGrantMemberResponse>, I>>(
    object: I,
  ): UpdateProjectGrantMemberResponse {
    const message = createBaseUpdateProjectGrantMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectGrantMemberRequest(): RemoveProjectGrantMemberRequest {
  return { projectId: "", grantId: "", userId: "" };
}

export const RemoveProjectGrantMemberRequest = {
  encode(message: RemoveProjectGrantMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectGrantMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectGrantMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectGrantMemberRequest {
    return {
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      userId: isSet(object.userId) ? String(object.userId) : "",
    };
  },

  toJSON(message: RemoveProjectGrantMemberRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectGrantMemberRequest>, I>>(base?: I): RemoveProjectGrantMemberRequest {
    return RemoveProjectGrantMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectGrantMemberRequest>, I>>(
    object: I,
  ): RemoveProjectGrantMemberRequest {
    const message = createBaseRemoveProjectGrantMemberRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveProjectGrantMemberResponse(): RemoveProjectGrantMemberResponse {
  return { details: undefined };
}

export const RemoveProjectGrantMemberResponse = {
  encode(message: RemoveProjectGrantMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectGrantMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectGrantMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectGrantMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveProjectGrantMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectGrantMemberResponse>, I>>(
    base?: I,
  ): RemoveProjectGrantMemberResponse {
    return RemoveProjectGrantMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectGrantMemberResponse>, I>>(
    object: I,
  ): RemoveProjectGrantMemberResponse {
    const message = createBaseRemoveProjectGrantMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetUserGrantByIDRequest(): GetUserGrantByIDRequest {
  return { userId: "", grantId: "" };
}

export const GetUserGrantByIDRequest = {
  encode(message: GetUserGrantByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserGrantByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserGrantByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserGrantByIDRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: GetUserGrantByIDRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserGrantByIDRequest>, I>>(base?: I): GetUserGrantByIDRequest {
    return GetUserGrantByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserGrantByIDRequest>, I>>(object: I): GetUserGrantByIDRequest {
    const message = createBaseGetUserGrantByIDRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseGetUserGrantByIDResponse(): GetUserGrantByIDResponse {
  return { userGrant: undefined };
}

export const GetUserGrantByIDResponse = {
  encode(message: GetUserGrantByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userGrant !== undefined) {
      UserGrant.encode(message.userGrant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserGrantByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserGrantByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userGrant = UserGrant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserGrantByIDResponse {
    return { userGrant: isSet(object.userGrant) ? UserGrant.fromJSON(object.userGrant) : undefined };
  },

  toJSON(message: GetUserGrantByIDResponse): unknown {
    const obj: any = {};
    if (message.userGrant !== undefined) {
      obj.userGrant = UserGrant.toJSON(message.userGrant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserGrantByIDResponse>, I>>(base?: I): GetUserGrantByIDResponse {
    return GetUserGrantByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserGrantByIDResponse>, I>>(object: I): GetUserGrantByIDResponse {
    const message = createBaseGetUserGrantByIDResponse();
    message.userGrant = (object.userGrant !== undefined && object.userGrant !== null)
      ? UserGrant.fromPartial(object.userGrant)
      : undefined;
    return message;
  },
};

function createBaseListUserGrantRequest(): ListUserGrantRequest {
  return { query: undefined, queries: [] };
}

export const ListUserGrantRequest = {
  encode(message: ListUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      UserGrantQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(UserGrantQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserGrantRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => UserGrantQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUserGrantRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => UserGrantQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserGrantRequest>, I>>(base?: I): ListUserGrantRequest {
    return ListUserGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserGrantRequest>, I>>(object: I): ListUserGrantRequest {
    const message = createBaseListUserGrantRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => UserGrantQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserGrantResponse(): ListUserGrantResponse {
  return { details: undefined, result: [] };
}

export const ListUserGrantResponse = {
  encode(message: ListUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      UserGrant.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(UserGrant.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserGrantResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => UserGrant.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUserGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => UserGrant.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserGrantResponse>, I>>(base?: I): ListUserGrantResponse {
    return ListUserGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserGrantResponse>, I>>(object: I): ListUserGrantResponse {
    const message = createBaseListUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => UserGrant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddUserGrantRequest(): AddUserGrantRequest {
  return { userId: "", projectId: "", projectGrantId: "", roleKeys: [] };
}

export const AddUserGrantRequest = {
  encode(message: AddUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.projectGrantId !== "") {
      writer.uint32(26).string(message.projectGrantId);
    }
    for (const v of message.roleKeys) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectGrantId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.roleKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserGrantRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      projectId: isSet(object.projectId) ? String(object.projectId) : "",
      projectGrantId: isSet(object.projectGrantId) ? String(object.projectGrantId) : "",
      roleKeys: Array.isArray(object?.roleKeys) ? object.roleKeys.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: AddUserGrantRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.projectGrantId !== "") {
      obj.projectGrantId = message.projectGrantId;
    }
    if (message.roleKeys?.length) {
      obj.roleKeys = message.roleKeys;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddUserGrantRequest>, I>>(base?: I): AddUserGrantRequest {
    return AddUserGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddUserGrantRequest>, I>>(object: I): AddUserGrantRequest {
    const message = createBaseAddUserGrantRequest();
    message.userId = object.userId ?? "";
    message.projectId = object.projectId ?? "";
    message.projectGrantId = object.projectGrantId ?? "";
    message.roleKeys = object.roleKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddUserGrantResponse(): AddUserGrantResponse {
  return { userGrantId: "", details: undefined };
}

export const AddUserGrantResponse = {
  encode(message: AddUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userGrantId !== "") {
      writer.uint32(10).string(message.userGrantId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userGrantId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserGrantResponse {
    return {
      userGrantId: isSet(object.userGrantId) ? String(object.userGrantId) : "",
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: AddUserGrantResponse): unknown {
    const obj: any = {};
    if (message.userGrantId !== "") {
      obj.userGrantId = message.userGrantId;
    }
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddUserGrantResponse>, I>>(base?: I): AddUserGrantResponse {
    return AddUserGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddUserGrantResponse>, I>>(object: I): AddUserGrantResponse {
    const message = createBaseAddUserGrantResponse();
    message.userGrantId = object.userGrantId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserGrantRequest(): UpdateUserGrantRequest {
  return { userId: "", grantId: "", roleKeys: [] };
}

export const UpdateUserGrantRequest = {
  encode(message: UpdateUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    for (const v of message.roleKeys) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roleKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserGrantRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
      roleKeys: Array.isArray(object?.roleKeys) ? object.roleKeys.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: UpdateUserGrantRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.roleKeys?.length) {
      obj.roleKeys = message.roleKeys;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserGrantRequest>, I>>(base?: I): UpdateUserGrantRequest {
    return UpdateUserGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserGrantRequest>, I>>(object: I): UpdateUserGrantRequest {
    const message = createBaseUpdateUserGrantRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    message.roleKeys = object.roleKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateUserGrantResponse(): UpdateUserGrantResponse {
  return { details: undefined };
}

export const UpdateUserGrantResponse = {
  encode(message: UpdateUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserGrantResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateUserGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserGrantResponse>, I>>(base?: I): UpdateUserGrantResponse {
    return UpdateUserGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserGrantResponse>, I>>(object: I): UpdateUserGrantResponse {
    const message = createBaseUpdateUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateUserGrantRequest(): DeactivateUserGrantRequest {
  return { userId: "", grantId: "" };
}

export const DeactivateUserGrantRequest = {
  encode(message: DeactivateUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateUserGrantRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: DeactivateUserGrantRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateUserGrantRequest>, I>>(base?: I): DeactivateUserGrantRequest {
    return DeactivateUserGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateUserGrantRequest>, I>>(object: I): DeactivateUserGrantRequest {
    const message = createBaseDeactivateUserGrantRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseDeactivateUserGrantResponse(): DeactivateUserGrantResponse {
  return { details: undefined };
}

export const DeactivateUserGrantResponse = {
  encode(message: DeactivateUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateUserGrantResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateUserGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateUserGrantResponse>, I>>(base?: I): DeactivateUserGrantResponse {
    return DeactivateUserGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateUserGrantResponse>, I>>(object: I): DeactivateUserGrantResponse {
    const message = createBaseDeactivateUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateUserGrantRequest(): ReactivateUserGrantRequest {
  return { userId: "", grantId: "" };
}

export const ReactivateUserGrantRequest = {
  encode(message: ReactivateUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateUserGrantRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: ReactivateUserGrantRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateUserGrantRequest>, I>>(base?: I): ReactivateUserGrantRequest {
    return ReactivateUserGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateUserGrantRequest>, I>>(object: I): ReactivateUserGrantRequest {
    const message = createBaseReactivateUserGrantRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseReactivateUserGrantResponse(): ReactivateUserGrantResponse {
  return { details: undefined };
}

export const ReactivateUserGrantResponse = {
  encode(message: ReactivateUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateUserGrantResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateUserGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateUserGrantResponse>, I>>(base?: I): ReactivateUserGrantResponse {
    return ReactivateUserGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateUserGrantResponse>, I>>(object: I): ReactivateUserGrantResponse {
    const message = createBaseReactivateUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveUserGrantRequest(): RemoveUserGrantRequest {
  return { userId: "", grantId: "" };
}

export const RemoveUserGrantRequest = {
  encode(message: RemoveUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveUserGrantRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      grantId: isSet(object.grantId) ? String(object.grantId) : "",
    };
  },

  toJSON(message: RemoveUserGrantRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveUserGrantRequest>, I>>(base?: I): RemoveUserGrantRequest {
    return RemoveUserGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveUserGrantRequest>, I>>(object: I): RemoveUserGrantRequest {
    const message = createBaseRemoveUserGrantRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseRemoveUserGrantResponse(): RemoveUserGrantResponse {
  return { details: undefined };
}

export const RemoveUserGrantResponse = {
  encode(message: RemoveUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveUserGrantResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveUserGrantResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveUserGrantResponse>, I>>(base?: I): RemoveUserGrantResponse {
    return RemoveUserGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveUserGrantResponse>, I>>(object: I): RemoveUserGrantResponse {
    const message = createBaseRemoveUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkRemoveUserGrantRequest(): BulkRemoveUserGrantRequest {
  return { grantId: [] };
}

export const BulkRemoveUserGrantRequest = {
  encode(message: BulkRemoveUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.grantId) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grantId.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkRemoveUserGrantRequest {
    return { grantId: Array.isArray(object?.grantId) ? object.grantId.map((e: any) => String(e)) : [] };
  },

  toJSON(message: BulkRemoveUserGrantRequest): unknown {
    const obj: any = {};
    if (message.grantId?.length) {
      obj.grantId = message.grantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkRemoveUserGrantRequest>, I>>(base?: I): BulkRemoveUserGrantRequest {
    return BulkRemoveUserGrantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkRemoveUserGrantRequest>, I>>(object: I): BulkRemoveUserGrantRequest {
    const message = createBaseBulkRemoveUserGrantRequest();
    message.grantId = object.grantId?.map((e) => e) || [];
    return message;
  },
};

function createBaseBulkRemoveUserGrantResponse(): BulkRemoveUserGrantResponse {
  return {};
}

export const BulkRemoveUserGrantResponse = {
  encode(_: BulkRemoveUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BulkRemoveUserGrantResponse {
    return {};
  },

  toJSON(_: BulkRemoveUserGrantResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkRemoveUserGrantResponse>, I>>(base?: I): BulkRemoveUserGrantResponse {
    return BulkRemoveUserGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkRemoveUserGrantResponse>, I>>(_: I): BulkRemoveUserGrantResponse {
    const message = createBaseBulkRemoveUserGrantResponse();
    return message;
  },
};

function createBaseGetOrgIAMPolicyRequest(): GetOrgIAMPolicyRequest {
  return {};
}

export const GetOrgIAMPolicyRequest = {
  encode(_: GetOrgIAMPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIAMPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetOrgIAMPolicyRequest {
    return {};
  },

  toJSON(_: GetOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgIAMPolicyRequest>, I>>(base?: I): GetOrgIAMPolicyRequest {
    return GetOrgIAMPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgIAMPolicyRequest>, I>>(_: I): GetOrgIAMPolicyRequest {
    const message = createBaseGetOrgIAMPolicyRequest();
    return message;
  },
};

function createBaseGetOrgIAMPolicyResponse(): GetOrgIAMPolicyResponse {
  return { policy: undefined };
}

export const GetOrgIAMPolicyResponse = {
  encode(message: GetOrgIAMPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIAMPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = OrgIAMPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgIAMPolicyResponse {
    return { policy: isSet(object.policy) ? OrgIAMPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = OrgIAMPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgIAMPolicyResponse>, I>>(base?: I): GetOrgIAMPolicyResponse {
    return GetOrgIAMPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgIAMPolicyResponse>, I>>(object: I): GetOrgIAMPolicyResponse {
    const message = createBaseGetOrgIAMPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? OrgIAMPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetDomainPolicyRequest(): GetDomainPolicyRequest {
  return {};
}

export const GetDomainPolicyRequest = {
  encode(_: GetDomainPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDomainPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDomainPolicyRequest {
    return {};
  },

  toJSON(_: GetDomainPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDomainPolicyRequest>, I>>(base?: I): GetDomainPolicyRequest {
    return GetDomainPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDomainPolicyRequest>, I>>(_: I): GetDomainPolicyRequest {
    const message = createBaseGetDomainPolicyRequest();
    return message;
  },
};

function createBaseGetDomainPolicyResponse(): GetDomainPolicyResponse {
  return { policy: undefined };
}

export const GetDomainPolicyResponse = {
  encode(message: GetDomainPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      DomainPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDomainPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = DomainPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDomainPolicyResponse {
    return { policy: isSet(object.policy) ? DomainPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = DomainPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDomainPolicyResponse>, I>>(base?: I): GetDomainPolicyResponse {
    return GetDomainPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDomainPolicyResponse>, I>>(object: I): GetDomainPolicyResponse {
    const message = createBaseGetDomainPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? DomainPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetLoginPolicyRequest(): GetLoginPolicyRequest {
  return {};
}

export const GetLoginPolicyRequest = {
  encode(_: GetLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLoginPolicyRequest {
    return {};
  },

  toJSON(_: GetLoginPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLoginPolicyRequest>, I>>(base?: I): GetLoginPolicyRequest {
    return GetLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLoginPolicyRequest>, I>>(_: I): GetLoginPolicyRequest {
    const message = createBaseGetLoginPolicyRequest();
    return message;
  },
};

function createBaseGetLoginPolicyResponse(): GetLoginPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetLoginPolicyResponse = {
  encode(message: GetLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LoginPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LoginPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLoginPolicyResponse {
    return {
      policy: isSet(object.policy) ? LoginPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LoginPolicy.toJSON(message.policy);
    }
    if (message.isDefault === true) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLoginPolicyResponse>, I>>(base?: I): GetLoginPolicyResponse {
    return GetLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLoginPolicyResponse>, I>>(object: I): GetLoginPolicyResponse {
    const message = createBaseGetLoginPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LoginPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultLoginPolicyRequest(): GetDefaultLoginPolicyRequest {
  return {};
}

export const GetDefaultLoginPolicyRequest = {
  encode(_: GetDefaultLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultLoginPolicyRequest {
    return {};
  },

  toJSON(_: GetDefaultLoginPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLoginPolicyRequest>, I>>(base?: I): GetDefaultLoginPolicyRequest {
    return GetDefaultLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLoginPolicyRequest>, I>>(_: I): GetDefaultLoginPolicyRequest {
    const message = createBaseGetDefaultLoginPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultLoginPolicyResponse(): GetDefaultLoginPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultLoginPolicyResponse = {
  encode(message: GetDefaultLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LoginPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LoginPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLoginPolicyResponse {
    return { policy: isSet(object.policy) ? LoginPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDefaultLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LoginPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLoginPolicyResponse>, I>>(base?: I): GetDefaultLoginPolicyResponse {
    return GetDefaultLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLoginPolicyResponse>, I>>(
    object: I,
  ): GetDefaultLoginPolicyResponse {
    const message = createBaseGetDefaultLoginPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LoginPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomLoginPolicyRequest(): AddCustomLoginPolicyRequest {
  return {
    allowUsernamePassword: false,
    allowRegister: false,
    allowExternalIdp: false,
    forceMfa: false,
    passwordlessType: 0,
    hidePasswordReset: false,
    ignoreUnknownUsernames: false,
    defaultRedirectUri: "",
    passwordCheckLifetime: undefined,
    externalLoginCheckLifetime: undefined,
    mfaInitSkipLifetime: undefined,
    secondFactorCheckLifetime: undefined,
    multiFactorCheckLifetime: undefined,
    secondFactors: [],
    multiFactors: [],
    idps: [],
    allowDomainDiscovery: false,
    disableLoginWithEmail: false,
    disableLoginWithPhone: false,
    forceMfaLocalOnly: false,
  };
}

export const AddCustomLoginPolicyRequest = {
  encode(message: AddCustomLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.allowUsernamePassword === true) {
      writer.uint32(8).bool(message.allowUsernamePassword);
    }
    if (message.allowRegister === true) {
      writer.uint32(16).bool(message.allowRegister);
    }
    if (message.allowExternalIdp === true) {
      writer.uint32(24).bool(message.allowExternalIdp);
    }
    if (message.forceMfa === true) {
      writer.uint32(32).bool(message.forceMfa);
    }
    if (message.passwordlessType !== 0) {
      writer.uint32(40).int32(message.passwordlessType);
    }
    if (message.hidePasswordReset === true) {
      writer.uint32(48).bool(message.hidePasswordReset);
    }
    if (message.ignoreUnknownUsernames === true) {
      writer.uint32(56).bool(message.ignoreUnknownUsernames);
    }
    if (message.defaultRedirectUri !== "") {
      writer.uint32(66).string(message.defaultRedirectUri);
    }
    if (message.passwordCheckLifetime !== undefined) {
      Duration.encode(message.passwordCheckLifetime, writer.uint32(74).fork()).ldelim();
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      Duration.encode(message.externalLoginCheckLifetime, writer.uint32(82).fork()).ldelim();
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      Duration.encode(message.mfaInitSkipLifetime, writer.uint32(90).fork()).ldelim();
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      Duration.encode(message.secondFactorCheckLifetime, writer.uint32(98).fork()).ldelim();
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      Duration.encode(message.multiFactorCheckLifetime, writer.uint32(106).fork()).ldelim();
    }
    writer.uint32(114).fork();
    for (const v of message.secondFactors) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(122).fork();
    for (const v of message.multiFactors) {
      writer.int32(v);
    }
    writer.ldelim();
    for (const v of message.idps) {
      AddCustomLoginPolicyRequest_IDP.encode(v!, writer.uint32(130).fork()).ldelim();
    }
    if (message.allowDomainDiscovery === true) {
      writer.uint32(136).bool(message.allowDomainDiscovery);
    }
    if (message.disableLoginWithEmail === true) {
      writer.uint32(144).bool(message.disableLoginWithEmail);
    }
    if (message.disableLoginWithPhone === true) {
      writer.uint32(152).bool(message.disableLoginWithPhone);
    }
    if (message.forceMfaLocalOnly === true) {
      writer.uint32(160).bool(message.forceMfaLocalOnly);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowUsernamePassword = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowRegister = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowExternalIdp = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.forceMfa = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.passwordlessType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.hidePasswordReset = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ignoreUnknownUsernames = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.defaultRedirectUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.passwordCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.externalLoginCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.mfaInitSkipLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.secondFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.multiFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag === 112) {
            message.secondFactors.push(reader.int32() as any);

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.secondFactors.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 15:
          if (tag === 120) {
            message.multiFactors.push(reader.int32() as any);

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.multiFactors.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.idps.push(AddCustomLoginPolicyRequest_IDP.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.allowDomainDiscovery = reader.bool();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.disableLoginWithEmail = reader.bool();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.disableLoginWithPhone = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.forceMfaLocalOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomLoginPolicyRequest {
    return {
      allowUsernamePassword: isSet(object.allowUsernamePassword) ? Boolean(object.allowUsernamePassword) : false,
      allowRegister: isSet(object.allowRegister) ? Boolean(object.allowRegister) : false,
      allowExternalIdp: isSet(object.allowExternalIdp) ? Boolean(object.allowExternalIdp) : false,
      forceMfa: isSet(object.forceMfa) ? Boolean(object.forceMfa) : false,
      passwordlessType: isSet(object.passwordlessType) ? passwordlessTypeFromJSON(object.passwordlessType) : 0,
      hidePasswordReset: isSet(object.hidePasswordReset) ? Boolean(object.hidePasswordReset) : false,
      ignoreUnknownUsernames: isSet(object.ignoreUnknownUsernames) ? Boolean(object.ignoreUnknownUsernames) : false,
      defaultRedirectUri: isSet(object.defaultRedirectUri) ? String(object.defaultRedirectUri) : "",
      passwordCheckLifetime: isSet(object.passwordCheckLifetime)
        ? Duration.fromJSON(object.passwordCheckLifetime)
        : undefined,
      externalLoginCheckLifetime: isSet(object.externalLoginCheckLifetime)
        ? Duration.fromJSON(object.externalLoginCheckLifetime)
        : undefined,
      mfaInitSkipLifetime: isSet(object.mfaInitSkipLifetime)
        ? Duration.fromJSON(object.mfaInitSkipLifetime)
        : undefined,
      secondFactorCheckLifetime: isSet(object.secondFactorCheckLifetime)
        ? Duration.fromJSON(object.secondFactorCheckLifetime)
        : undefined,
      multiFactorCheckLifetime: isSet(object.multiFactorCheckLifetime)
        ? Duration.fromJSON(object.multiFactorCheckLifetime)
        : undefined,
      secondFactors: Array.isArray(object?.secondFactors)
        ? object.secondFactors.map((e: any) => secondFactorTypeFromJSON(e))
        : [],
      multiFactors: Array.isArray(object?.multiFactors)
        ? object.multiFactors.map((e: any) => multiFactorTypeFromJSON(e))
        : [],
      idps: Array.isArray(object?.idps)
        ? object.idps.map((e: any) => AddCustomLoginPolicyRequest_IDP.fromJSON(e))
        : [],
      allowDomainDiscovery: isSet(object.allowDomainDiscovery) ? Boolean(object.allowDomainDiscovery) : false,
      disableLoginWithEmail: isSet(object.disableLoginWithEmail) ? Boolean(object.disableLoginWithEmail) : false,
      disableLoginWithPhone: isSet(object.disableLoginWithPhone) ? Boolean(object.disableLoginWithPhone) : false,
      forceMfaLocalOnly: isSet(object.forceMfaLocalOnly) ? Boolean(object.forceMfaLocalOnly) : false,
    };
  },

  toJSON(message: AddCustomLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.allowUsernamePassword === true) {
      obj.allowUsernamePassword = message.allowUsernamePassword;
    }
    if (message.allowRegister === true) {
      obj.allowRegister = message.allowRegister;
    }
    if (message.allowExternalIdp === true) {
      obj.allowExternalIdp = message.allowExternalIdp;
    }
    if (message.forceMfa === true) {
      obj.forceMfa = message.forceMfa;
    }
    if (message.passwordlessType !== 0) {
      obj.passwordlessType = passwordlessTypeToJSON(message.passwordlessType);
    }
    if (message.hidePasswordReset === true) {
      obj.hidePasswordReset = message.hidePasswordReset;
    }
    if (message.ignoreUnknownUsernames === true) {
      obj.ignoreUnknownUsernames = message.ignoreUnknownUsernames;
    }
    if (message.defaultRedirectUri !== "") {
      obj.defaultRedirectUri = message.defaultRedirectUri;
    }
    if (message.passwordCheckLifetime !== undefined) {
      obj.passwordCheckLifetime = Duration.toJSON(message.passwordCheckLifetime);
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      obj.externalLoginCheckLifetime = Duration.toJSON(message.externalLoginCheckLifetime);
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      obj.mfaInitSkipLifetime = Duration.toJSON(message.mfaInitSkipLifetime);
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      obj.secondFactorCheckLifetime = Duration.toJSON(message.secondFactorCheckLifetime);
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      obj.multiFactorCheckLifetime = Duration.toJSON(message.multiFactorCheckLifetime);
    }
    if (message.secondFactors?.length) {
      obj.secondFactors = message.secondFactors.map((e) => secondFactorTypeToJSON(e));
    }
    if (message.multiFactors?.length) {
      obj.multiFactors = message.multiFactors.map((e) => multiFactorTypeToJSON(e));
    }
    if (message.idps?.length) {
      obj.idps = message.idps.map((e) => AddCustomLoginPolicyRequest_IDP.toJSON(e));
    }
    if (message.allowDomainDiscovery === true) {
      obj.allowDomainDiscovery = message.allowDomainDiscovery;
    }
    if (message.disableLoginWithEmail === true) {
      obj.disableLoginWithEmail = message.disableLoginWithEmail;
    }
    if (message.disableLoginWithPhone === true) {
      obj.disableLoginWithPhone = message.disableLoginWithPhone;
    }
    if (message.forceMfaLocalOnly === true) {
      obj.forceMfaLocalOnly = message.forceMfaLocalOnly;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomLoginPolicyRequest>, I>>(base?: I): AddCustomLoginPolicyRequest {
    return AddCustomLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomLoginPolicyRequest>, I>>(object: I): AddCustomLoginPolicyRequest {
    const message = createBaseAddCustomLoginPolicyRequest();
    message.allowUsernamePassword = object.allowUsernamePassword ?? false;
    message.allowRegister = object.allowRegister ?? false;
    message.allowExternalIdp = object.allowExternalIdp ?? false;
    message.forceMfa = object.forceMfa ?? false;
    message.passwordlessType = object.passwordlessType ?? 0;
    message.hidePasswordReset = object.hidePasswordReset ?? false;
    message.ignoreUnknownUsernames = object.ignoreUnknownUsernames ?? false;
    message.defaultRedirectUri = object.defaultRedirectUri ?? "";
    message.passwordCheckLifetime =
      (object.passwordCheckLifetime !== undefined && object.passwordCheckLifetime !== null)
        ? Duration.fromPartial(object.passwordCheckLifetime)
        : undefined;
    message.externalLoginCheckLifetime =
      (object.externalLoginCheckLifetime !== undefined && object.externalLoginCheckLifetime !== null)
        ? Duration.fromPartial(object.externalLoginCheckLifetime)
        : undefined;
    message.mfaInitSkipLifetime = (object.mfaInitSkipLifetime !== undefined && object.mfaInitSkipLifetime !== null)
      ? Duration.fromPartial(object.mfaInitSkipLifetime)
      : undefined;
    message.secondFactorCheckLifetime =
      (object.secondFactorCheckLifetime !== undefined && object.secondFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.secondFactorCheckLifetime)
        : undefined;
    message.multiFactorCheckLifetime =
      (object.multiFactorCheckLifetime !== undefined && object.multiFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.multiFactorCheckLifetime)
        : undefined;
    message.secondFactors = object.secondFactors?.map((e) => e) || [];
    message.multiFactors = object.multiFactors?.map((e) => e) || [];
    message.idps = object.idps?.map((e) => AddCustomLoginPolicyRequest_IDP.fromPartial(e)) || [];
    message.allowDomainDiscovery = object.allowDomainDiscovery ?? false;
    message.disableLoginWithEmail = object.disableLoginWithEmail ?? false;
    message.disableLoginWithPhone = object.disableLoginWithPhone ?? false;
    message.forceMfaLocalOnly = object.forceMfaLocalOnly ?? false;
    return message;
  },
};

function createBaseAddCustomLoginPolicyRequest_IDP(): AddCustomLoginPolicyRequest_IDP {
  return { idpId: "", ownerType: 0 };
}

export const AddCustomLoginPolicyRequest_IDP = {
  encode(message: AddCustomLoginPolicyRequest_IDP, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.ownerType !== 0) {
      writer.uint32(16).int32(message.ownerType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLoginPolicyRequest_IDP {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLoginPolicyRequest_IDP();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ownerType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomLoginPolicyRequest_IDP {
    return {
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      ownerType: isSet(object.ownerType) ? iDPOwnerTypeFromJSON(object.ownerType) : 0,
    };
  },

  toJSON(message: AddCustomLoginPolicyRequest_IDP): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.ownerType !== 0) {
      obj.ownerType = iDPOwnerTypeToJSON(message.ownerType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomLoginPolicyRequest_IDP>, I>>(base?: I): AddCustomLoginPolicyRequest_IDP {
    return AddCustomLoginPolicyRequest_IDP.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomLoginPolicyRequest_IDP>, I>>(
    object: I,
  ): AddCustomLoginPolicyRequest_IDP {
    const message = createBaseAddCustomLoginPolicyRequest_IDP();
    message.idpId = object.idpId ?? "";
    message.ownerType = object.ownerType ?? 0;
    return message;
  },
};

function createBaseAddCustomLoginPolicyResponse(): AddCustomLoginPolicyResponse {
  return { details: undefined };
}

export const AddCustomLoginPolicyResponse = {
  encode(message: AddCustomLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomLoginPolicyResponse>, I>>(base?: I): AddCustomLoginPolicyResponse {
    return AddCustomLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomLoginPolicyResponse>, I>>(object: I): AddCustomLoginPolicyResponse {
    const message = createBaseAddCustomLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomLoginPolicyRequest(): UpdateCustomLoginPolicyRequest {
  return {
    allowUsernamePassword: false,
    allowRegister: false,
    allowExternalIdp: false,
    forceMfa: false,
    passwordlessType: 0,
    hidePasswordReset: false,
    ignoreUnknownUsernames: false,
    defaultRedirectUri: "",
    passwordCheckLifetime: undefined,
    externalLoginCheckLifetime: undefined,
    mfaInitSkipLifetime: undefined,
    secondFactorCheckLifetime: undefined,
    multiFactorCheckLifetime: undefined,
    allowDomainDiscovery: false,
    disableLoginWithEmail: false,
    disableLoginWithPhone: false,
    forceMfaLocalOnly: false,
  };
}

export const UpdateCustomLoginPolicyRequest = {
  encode(message: UpdateCustomLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.allowUsernamePassword === true) {
      writer.uint32(8).bool(message.allowUsernamePassword);
    }
    if (message.allowRegister === true) {
      writer.uint32(16).bool(message.allowRegister);
    }
    if (message.allowExternalIdp === true) {
      writer.uint32(24).bool(message.allowExternalIdp);
    }
    if (message.forceMfa === true) {
      writer.uint32(32).bool(message.forceMfa);
    }
    if (message.passwordlessType !== 0) {
      writer.uint32(40).int32(message.passwordlessType);
    }
    if (message.hidePasswordReset === true) {
      writer.uint32(48).bool(message.hidePasswordReset);
    }
    if (message.ignoreUnknownUsernames === true) {
      writer.uint32(56).bool(message.ignoreUnknownUsernames);
    }
    if (message.defaultRedirectUri !== "") {
      writer.uint32(66).string(message.defaultRedirectUri);
    }
    if (message.passwordCheckLifetime !== undefined) {
      Duration.encode(message.passwordCheckLifetime, writer.uint32(74).fork()).ldelim();
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      Duration.encode(message.externalLoginCheckLifetime, writer.uint32(82).fork()).ldelim();
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      Duration.encode(message.mfaInitSkipLifetime, writer.uint32(90).fork()).ldelim();
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      Duration.encode(message.secondFactorCheckLifetime, writer.uint32(98).fork()).ldelim();
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      Duration.encode(message.multiFactorCheckLifetime, writer.uint32(106).fork()).ldelim();
    }
    if (message.allowDomainDiscovery === true) {
      writer.uint32(112).bool(message.allowDomainDiscovery);
    }
    if (message.disableLoginWithEmail === true) {
      writer.uint32(120).bool(message.disableLoginWithEmail);
    }
    if (message.disableLoginWithPhone === true) {
      writer.uint32(128).bool(message.disableLoginWithPhone);
    }
    if (message.forceMfaLocalOnly === true) {
      writer.uint32(136).bool(message.forceMfaLocalOnly);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowUsernamePassword = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowRegister = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowExternalIdp = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.forceMfa = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.passwordlessType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.hidePasswordReset = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ignoreUnknownUsernames = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.defaultRedirectUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.passwordCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.externalLoginCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.mfaInitSkipLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.secondFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.multiFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.allowDomainDiscovery = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.disableLoginWithEmail = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.disableLoginWithPhone = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.forceMfaLocalOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomLoginPolicyRequest {
    return {
      allowUsernamePassword: isSet(object.allowUsernamePassword) ? Boolean(object.allowUsernamePassword) : false,
      allowRegister: isSet(object.allowRegister) ? Boolean(object.allowRegister) : false,
      allowExternalIdp: isSet(object.allowExternalIdp) ? Boolean(object.allowExternalIdp) : false,
      forceMfa: isSet(object.forceMfa) ? Boolean(object.forceMfa) : false,
      passwordlessType: isSet(object.passwordlessType) ? passwordlessTypeFromJSON(object.passwordlessType) : 0,
      hidePasswordReset: isSet(object.hidePasswordReset) ? Boolean(object.hidePasswordReset) : false,
      ignoreUnknownUsernames: isSet(object.ignoreUnknownUsernames) ? Boolean(object.ignoreUnknownUsernames) : false,
      defaultRedirectUri: isSet(object.defaultRedirectUri) ? String(object.defaultRedirectUri) : "",
      passwordCheckLifetime: isSet(object.passwordCheckLifetime)
        ? Duration.fromJSON(object.passwordCheckLifetime)
        : undefined,
      externalLoginCheckLifetime: isSet(object.externalLoginCheckLifetime)
        ? Duration.fromJSON(object.externalLoginCheckLifetime)
        : undefined,
      mfaInitSkipLifetime: isSet(object.mfaInitSkipLifetime)
        ? Duration.fromJSON(object.mfaInitSkipLifetime)
        : undefined,
      secondFactorCheckLifetime: isSet(object.secondFactorCheckLifetime)
        ? Duration.fromJSON(object.secondFactorCheckLifetime)
        : undefined,
      multiFactorCheckLifetime: isSet(object.multiFactorCheckLifetime)
        ? Duration.fromJSON(object.multiFactorCheckLifetime)
        : undefined,
      allowDomainDiscovery: isSet(object.allowDomainDiscovery) ? Boolean(object.allowDomainDiscovery) : false,
      disableLoginWithEmail: isSet(object.disableLoginWithEmail) ? Boolean(object.disableLoginWithEmail) : false,
      disableLoginWithPhone: isSet(object.disableLoginWithPhone) ? Boolean(object.disableLoginWithPhone) : false,
      forceMfaLocalOnly: isSet(object.forceMfaLocalOnly) ? Boolean(object.forceMfaLocalOnly) : false,
    };
  },

  toJSON(message: UpdateCustomLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.allowUsernamePassword === true) {
      obj.allowUsernamePassword = message.allowUsernamePassword;
    }
    if (message.allowRegister === true) {
      obj.allowRegister = message.allowRegister;
    }
    if (message.allowExternalIdp === true) {
      obj.allowExternalIdp = message.allowExternalIdp;
    }
    if (message.forceMfa === true) {
      obj.forceMfa = message.forceMfa;
    }
    if (message.passwordlessType !== 0) {
      obj.passwordlessType = passwordlessTypeToJSON(message.passwordlessType);
    }
    if (message.hidePasswordReset === true) {
      obj.hidePasswordReset = message.hidePasswordReset;
    }
    if (message.ignoreUnknownUsernames === true) {
      obj.ignoreUnknownUsernames = message.ignoreUnknownUsernames;
    }
    if (message.defaultRedirectUri !== "") {
      obj.defaultRedirectUri = message.defaultRedirectUri;
    }
    if (message.passwordCheckLifetime !== undefined) {
      obj.passwordCheckLifetime = Duration.toJSON(message.passwordCheckLifetime);
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      obj.externalLoginCheckLifetime = Duration.toJSON(message.externalLoginCheckLifetime);
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      obj.mfaInitSkipLifetime = Duration.toJSON(message.mfaInitSkipLifetime);
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      obj.secondFactorCheckLifetime = Duration.toJSON(message.secondFactorCheckLifetime);
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      obj.multiFactorCheckLifetime = Duration.toJSON(message.multiFactorCheckLifetime);
    }
    if (message.allowDomainDiscovery === true) {
      obj.allowDomainDiscovery = message.allowDomainDiscovery;
    }
    if (message.disableLoginWithEmail === true) {
      obj.disableLoginWithEmail = message.disableLoginWithEmail;
    }
    if (message.disableLoginWithPhone === true) {
      obj.disableLoginWithPhone = message.disableLoginWithPhone;
    }
    if (message.forceMfaLocalOnly === true) {
      obj.forceMfaLocalOnly = message.forceMfaLocalOnly;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomLoginPolicyRequest>, I>>(base?: I): UpdateCustomLoginPolicyRequest {
    return UpdateCustomLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomLoginPolicyRequest>, I>>(
    object: I,
  ): UpdateCustomLoginPolicyRequest {
    const message = createBaseUpdateCustomLoginPolicyRequest();
    message.allowUsernamePassword = object.allowUsernamePassword ?? false;
    message.allowRegister = object.allowRegister ?? false;
    message.allowExternalIdp = object.allowExternalIdp ?? false;
    message.forceMfa = object.forceMfa ?? false;
    message.passwordlessType = object.passwordlessType ?? 0;
    message.hidePasswordReset = object.hidePasswordReset ?? false;
    message.ignoreUnknownUsernames = object.ignoreUnknownUsernames ?? false;
    message.defaultRedirectUri = object.defaultRedirectUri ?? "";
    message.passwordCheckLifetime =
      (object.passwordCheckLifetime !== undefined && object.passwordCheckLifetime !== null)
        ? Duration.fromPartial(object.passwordCheckLifetime)
        : undefined;
    message.externalLoginCheckLifetime =
      (object.externalLoginCheckLifetime !== undefined && object.externalLoginCheckLifetime !== null)
        ? Duration.fromPartial(object.externalLoginCheckLifetime)
        : undefined;
    message.mfaInitSkipLifetime = (object.mfaInitSkipLifetime !== undefined && object.mfaInitSkipLifetime !== null)
      ? Duration.fromPartial(object.mfaInitSkipLifetime)
      : undefined;
    message.secondFactorCheckLifetime =
      (object.secondFactorCheckLifetime !== undefined && object.secondFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.secondFactorCheckLifetime)
        : undefined;
    message.multiFactorCheckLifetime =
      (object.multiFactorCheckLifetime !== undefined && object.multiFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.multiFactorCheckLifetime)
        : undefined;
    message.allowDomainDiscovery = object.allowDomainDiscovery ?? false;
    message.disableLoginWithEmail = object.disableLoginWithEmail ?? false;
    message.disableLoginWithPhone = object.disableLoginWithPhone ?? false;
    message.forceMfaLocalOnly = object.forceMfaLocalOnly ?? false;
    return message;
  },
};

function createBaseUpdateCustomLoginPolicyResponse(): UpdateCustomLoginPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomLoginPolicyResponse = {
  encode(message: UpdateCustomLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomLoginPolicyResponse>, I>>(base?: I): UpdateCustomLoginPolicyResponse {
    return UpdateCustomLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomLoginPolicyResponse>, I>>(
    object: I,
  ): UpdateCustomLoginPolicyResponse {
    const message = createBaseUpdateCustomLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetLoginPolicyToDefaultRequest(): ResetLoginPolicyToDefaultRequest {
  return {};
}

export const ResetLoginPolicyToDefaultRequest = {
  encode(_: ResetLoginPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLoginPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLoginPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetLoginPolicyToDefaultRequest {
    return {};
  },

  toJSON(_: ResetLoginPolicyToDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetLoginPolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetLoginPolicyToDefaultRequest {
    return ResetLoginPolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetLoginPolicyToDefaultRequest>, I>>(
    _: I,
  ): ResetLoginPolicyToDefaultRequest {
    const message = createBaseResetLoginPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetLoginPolicyToDefaultResponse(): ResetLoginPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetLoginPolicyToDefaultResponse = {
  encode(message: ResetLoginPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLoginPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLoginPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetLoginPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetLoginPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetLoginPolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetLoginPolicyToDefaultResponse {
    return ResetLoginPolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetLoginPolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetLoginPolicyToDefaultResponse {
    const message = createBaseResetLoginPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyIDPsRequest(): ListLoginPolicyIDPsRequest {
  return { query: undefined };
}

export const ListLoginPolicyIDPsRequest = {
  encode(message: ListLoginPolicyIDPsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyIDPsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyIDPsRequest {
    return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: ListLoginPolicyIDPsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicyIDPsRequest>, I>>(base?: I): ListLoginPolicyIDPsRequest {
    return ListLoginPolicyIDPsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicyIDPsRequest>, I>>(object: I): ListLoginPolicyIDPsRequest {
    const message = createBaseListLoginPolicyIDPsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyIDPsResponse(): ListLoginPolicyIDPsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicyIDPsResponse = {
  encode(message: ListLoginPolicyIDPsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      IDPLoginPolicyLink.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyIDPsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(IDPLoginPolicyLink.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyIDPsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => IDPLoginPolicyLink.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListLoginPolicyIDPsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => IDPLoginPolicyLink.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicyIDPsResponse>, I>>(base?: I): ListLoginPolicyIDPsResponse {
    return ListLoginPolicyIDPsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicyIDPsResponse>, I>>(object: I): ListLoginPolicyIDPsResponse {
    const message = createBaseListLoginPolicyIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => IDPLoginPolicyLink.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddIDPToLoginPolicyRequest(): AddIDPToLoginPolicyRequest {
  return { idpId: "", ownerType: 0 };
}

export const AddIDPToLoginPolicyRequest = {
  encode(message: AddIDPToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.ownerType !== 0) {
      writer.uint32(16).int32(message.ownerType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddIDPToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIDPToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ownerType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIDPToLoginPolicyRequest {
    return {
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      ownerType: isSet(object.ownerType) ? iDPOwnerTypeFromJSON(object.ownerType) : 0,
    };
  },

  toJSON(message: AddIDPToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.ownerType !== 0) {
      obj.ownerType = iDPOwnerTypeToJSON(message.ownerType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddIDPToLoginPolicyRequest>, I>>(base?: I): AddIDPToLoginPolicyRequest {
    return AddIDPToLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddIDPToLoginPolicyRequest>, I>>(object: I): AddIDPToLoginPolicyRequest {
    const message = createBaseAddIDPToLoginPolicyRequest();
    message.idpId = object.idpId ?? "";
    message.ownerType = object.ownerType ?? 0;
    return message;
  },
};

function createBaseAddIDPToLoginPolicyResponse(): AddIDPToLoginPolicyResponse {
  return { details: undefined };
}

export const AddIDPToLoginPolicyResponse = {
  encode(message: AddIDPToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddIDPToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIDPToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIDPToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddIDPToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddIDPToLoginPolicyResponse>, I>>(base?: I): AddIDPToLoginPolicyResponse {
    return AddIDPToLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddIDPToLoginPolicyResponse>, I>>(object: I): AddIDPToLoginPolicyResponse {
    const message = createBaseAddIDPToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveIDPFromLoginPolicyRequest(): RemoveIDPFromLoginPolicyRequest {
  return { idpId: "" };
}

export const RemoveIDPFromLoginPolicyRequest = {
  encode(message: RemoveIDPFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIDPFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPFromLoginPolicyRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: RemoveIDPFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveIDPFromLoginPolicyRequest>, I>>(base?: I): RemoveIDPFromLoginPolicyRequest {
    return RemoveIDPFromLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveIDPFromLoginPolicyRequest>, I>>(
    object: I,
  ): RemoveIDPFromLoginPolicyRequest {
    const message = createBaseRemoveIDPFromLoginPolicyRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseRemoveIDPFromLoginPolicyResponse(): RemoveIDPFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveIDPFromLoginPolicyResponse = {
  encode(message: RemoveIDPFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIDPFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveIDPFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveIDPFromLoginPolicyResponse>, I>>(
    base?: I,
  ): RemoveIDPFromLoginPolicyResponse {
    return RemoveIDPFromLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveIDPFromLoginPolicyResponse>, I>>(
    object: I,
  ): RemoveIDPFromLoginPolicyResponse {
    const message = createBaseRemoveIDPFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicySecondFactorsRequest(): ListLoginPolicySecondFactorsRequest {
  return {};
}

export const ListLoginPolicySecondFactorsRequest = {
  encode(_: ListLoginPolicySecondFactorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicySecondFactorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicySecondFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListLoginPolicySecondFactorsRequest {
    return {};
  },

  toJSON(_: ListLoginPolicySecondFactorsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicySecondFactorsRequest>, I>>(
    base?: I,
  ): ListLoginPolicySecondFactorsRequest {
    return ListLoginPolicySecondFactorsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicySecondFactorsRequest>, I>>(
    _: I,
  ): ListLoginPolicySecondFactorsRequest {
    const message = createBaseListLoginPolicySecondFactorsRequest();
    return message;
  },
};

function createBaseListLoginPolicySecondFactorsResponse(): ListLoginPolicySecondFactorsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicySecondFactorsResponse = {
  encode(message: ListLoginPolicySecondFactorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    writer.uint32(18).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicySecondFactorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicySecondFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.result.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicySecondFactorsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => secondFactorTypeFromJSON(e)) : [],
    };
  },

  toJSON(message: ListLoginPolicySecondFactorsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => secondFactorTypeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicySecondFactorsResponse>, I>>(
    base?: I,
  ): ListLoginPolicySecondFactorsResponse {
    return ListLoginPolicySecondFactorsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicySecondFactorsResponse>, I>>(
    object: I,
  ): ListLoginPolicySecondFactorsResponse {
    const message = createBaseListLoginPolicySecondFactorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddSecondFactorToLoginPolicyRequest(): AddSecondFactorToLoginPolicyRequest {
  return { type: 0 };
}

export const AddSecondFactorToLoginPolicyRequest = {
  encode(message: AddSecondFactorToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSecondFactorToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecondFactorToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSecondFactorToLoginPolicyRequest {
    return { type: isSet(object.type) ? secondFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: AddSecondFactorToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = secondFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSecondFactorToLoginPolicyRequest>, I>>(
    base?: I,
  ): AddSecondFactorToLoginPolicyRequest {
    return AddSecondFactorToLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSecondFactorToLoginPolicyRequest>, I>>(
    object: I,
  ): AddSecondFactorToLoginPolicyRequest {
    const message = createBaseAddSecondFactorToLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAddSecondFactorToLoginPolicyResponse(): AddSecondFactorToLoginPolicyResponse {
  return { details: undefined };
}

export const AddSecondFactorToLoginPolicyResponse = {
  encode(message: AddSecondFactorToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSecondFactorToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecondFactorToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSecondFactorToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddSecondFactorToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSecondFactorToLoginPolicyResponse>, I>>(
    base?: I,
  ): AddSecondFactorToLoginPolicyResponse {
    return AddSecondFactorToLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSecondFactorToLoginPolicyResponse>, I>>(
    object: I,
  ): AddSecondFactorToLoginPolicyResponse {
    const message = createBaseAddSecondFactorToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveSecondFactorFromLoginPolicyRequest(): RemoveSecondFactorFromLoginPolicyRequest {
  return { type: 0 };
}

export const RemoveSecondFactorFromLoginPolicyRequest = {
  encode(message: RemoveSecondFactorFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSecondFactorFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSecondFactorFromLoginPolicyRequest {
    return { type: isSet(object.type) ? secondFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: RemoveSecondFactorFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = secondFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>, I>>(
    base?: I,
  ): RemoveSecondFactorFromLoginPolicyRequest {
    return RemoveSecondFactorFromLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>, I>>(
    object: I,
  ): RemoveSecondFactorFromLoginPolicyRequest {
    const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRemoveSecondFactorFromLoginPolicyResponse(): RemoveSecondFactorFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveSecondFactorFromLoginPolicyResponse = {
  encode(message: RemoveSecondFactorFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSecondFactorFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSecondFactorFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveSecondFactorFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>, I>>(
    base?: I,
  ): RemoveSecondFactorFromLoginPolicyResponse {
    return RemoveSecondFactorFromLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>, I>>(
    object: I,
  ): RemoveSecondFactorFromLoginPolicyResponse {
    const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyMultiFactorsRequest(): ListLoginPolicyMultiFactorsRequest {
  return {};
}

export const ListLoginPolicyMultiFactorsRequest = {
  encode(_: ListLoginPolicyMultiFactorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyMultiFactorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyMultiFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListLoginPolicyMultiFactorsRequest {
    return {};
  },

  toJSON(_: ListLoginPolicyMultiFactorsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicyMultiFactorsRequest>, I>>(
    base?: I,
  ): ListLoginPolicyMultiFactorsRequest {
    return ListLoginPolicyMultiFactorsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicyMultiFactorsRequest>, I>>(
    _: I,
  ): ListLoginPolicyMultiFactorsRequest {
    const message = createBaseListLoginPolicyMultiFactorsRequest();
    return message;
  },
};

function createBaseListLoginPolicyMultiFactorsResponse(): ListLoginPolicyMultiFactorsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicyMultiFactorsResponse = {
  encode(message: ListLoginPolicyMultiFactorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    writer.uint32(18).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyMultiFactorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyMultiFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.result.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyMultiFactorsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => multiFactorTypeFromJSON(e)) : [],
    };
  },

  toJSON(message: ListLoginPolicyMultiFactorsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => multiFactorTypeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLoginPolicyMultiFactorsResponse>, I>>(
    base?: I,
  ): ListLoginPolicyMultiFactorsResponse {
    return ListLoginPolicyMultiFactorsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLoginPolicyMultiFactorsResponse>, I>>(
    object: I,
  ): ListLoginPolicyMultiFactorsResponse {
    const message = createBaseListLoginPolicyMultiFactorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddMultiFactorToLoginPolicyRequest(): AddMultiFactorToLoginPolicyRequest {
  return { type: 0 };
}

export const AddMultiFactorToLoginPolicyRequest = {
  encode(message: AddMultiFactorToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMultiFactorToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMultiFactorToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMultiFactorToLoginPolicyRequest {
    return { type: isSet(object.type) ? multiFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: AddMultiFactorToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = multiFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMultiFactorToLoginPolicyRequest>, I>>(
    base?: I,
  ): AddMultiFactorToLoginPolicyRequest {
    return AddMultiFactorToLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMultiFactorToLoginPolicyRequest>, I>>(
    object: I,
  ): AddMultiFactorToLoginPolicyRequest {
    const message = createBaseAddMultiFactorToLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAddMultiFactorToLoginPolicyResponse(): AddMultiFactorToLoginPolicyResponse {
  return { details: undefined };
}

export const AddMultiFactorToLoginPolicyResponse = {
  encode(message: AddMultiFactorToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMultiFactorToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMultiFactorToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMultiFactorToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddMultiFactorToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMultiFactorToLoginPolicyResponse>, I>>(
    base?: I,
  ): AddMultiFactorToLoginPolicyResponse {
    return AddMultiFactorToLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMultiFactorToLoginPolicyResponse>, I>>(
    object: I,
  ): AddMultiFactorToLoginPolicyResponse {
    const message = createBaseAddMultiFactorToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveMultiFactorFromLoginPolicyRequest(): RemoveMultiFactorFromLoginPolicyRequest {
  return { type: 0 };
}

export const RemoveMultiFactorFromLoginPolicyRequest = {
  encode(message: RemoveMultiFactorFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMultiFactorFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMultiFactorFromLoginPolicyRequest {
    return { type: isSet(object.type) ? multiFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: RemoveMultiFactorFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = multiFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>, I>>(
    base?: I,
  ): RemoveMultiFactorFromLoginPolicyRequest {
    return RemoveMultiFactorFromLoginPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>, I>>(
    object: I,
  ): RemoveMultiFactorFromLoginPolicyRequest {
    const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRemoveMultiFactorFromLoginPolicyResponse(): RemoveMultiFactorFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveMultiFactorFromLoginPolicyResponse = {
  encode(message: RemoveMultiFactorFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMultiFactorFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMultiFactorFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveMultiFactorFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>, I>>(
    base?: I,
  ): RemoveMultiFactorFromLoginPolicyResponse {
    return RemoveMultiFactorFromLoginPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>, I>>(
    object: I,
  ): RemoveMultiFactorFromLoginPolicyResponse {
    const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPasswordComplexityPolicyRequest(): GetPasswordComplexityPolicyRequest {
  return {};
}

export const GetPasswordComplexityPolicyRequest = {
  encode(_: GetPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPasswordComplexityPolicyRequest {
    return {};
  },

  toJSON(_: GetPasswordComplexityPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPasswordComplexityPolicyRequest>, I>>(
    base?: I,
  ): GetPasswordComplexityPolicyRequest {
    return GetPasswordComplexityPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPasswordComplexityPolicyRequest>, I>>(
    _: I,
  ): GetPasswordComplexityPolicyRequest {
    const message = createBaseGetPasswordComplexityPolicyRequest();
    return message;
  },
};

function createBaseGetPasswordComplexityPolicyResponse(): GetPasswordComplexityPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetPasswordComplexityPolicyResponse = {
  encode(message: GetPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordComplexityPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPasswordComplexityPolicyResponse {
    return {
      policy: isSet(object.policy) ? PasswordComplexityPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetPasswordComplexityPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PasswordComplexityPolicy.toJSON(message.policy);
    }
    if (message.isDefault === true) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPasswordComplexityPolicyResponse>, I>>(
    base?: I,
  ): GetPasswordComplexityPolicyResponse {
    return GetPasswordComplexityPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPasswordComplexityPolicyResponse>, I>>(
    object: I,
  ): GetPasswordComplexityPolicyResponse {
    const message = createBaseGetPasswordComplexityPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordComplexityPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultPasswordComplexityPolicyRequest(): GetDefaultPasswordComplexityPolicyRequest {
  return {};
}

export const GetDefaultPasswordComplexityPolicyRequest = {
  encode(_: GetDefaultPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultPasswordComplexityPolicyRequest {
    return {};
  },

  toJSON(_: GetDefaultPasswordComplexityPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordComplexityPolicyRequest>, I>>(
    base?: I,
  ): GetDefaultPasswordComplexityPolicyRequest {
    return GetDefaultPasswordComplexityPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordComplexityPolicyRequest>, I>>(
    _: I,
  ): GetDefaultPasswordComplexityPolicyRequest {
    const message = createBaseGetDefaultPasswordComplexityPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultPasswordComplexityPolicyResponse(): GetDefaultPasswordComplexityPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultPasswordComplexityPolicyResponse = {
  encode(message: GetDefaultPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordComplexityPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordComplexityPolicyResponse {
    return { policy: isSet(object.policy) ? PasswordComplexityPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDefaultPasswordComplexityPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PasswordComplexityPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordComplexityPolicyResponse>, I>>(
    base?: I,
  ): GetDefaultPasswordComplexityPolicyResponse {
    return GetDefaultPasswordComplexityPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordComplexityPolicyResponse>, I>>(
    object: I,
  ): GetDefaultPasswordComplexityPolicyResponse {
    const message = createBaseGetDefaultPasswordComplexityPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordComplexityPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomPasswordComplexityPolicyRequest(): AddCustomPasswordComplexityPolicyRequest {
  return { minLength: 0, hasUppercase: false, hasLowercase: false, hasNumber: false, hasSymbol: false };
}

export const AddCustomPasswordComplexityPolicyRequest = {
  encode(message: AddCustomPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minLength !== 0) {
      writer.uint32(8).uint64(message.minLength);
    }
    if (message.hasUppercase === true) {
      writer.uint32(16).bool(message.hasUppercase);
    }
    if (message.hasLowercase === true) {
      writer.uint32(24).bool(message.hasLowercase);
    }
    if (message.hasNumber === true) {
      writer.uint32(32).bool(message.hasNumber);
    }
    if (message.hasSymbol === true) {
      writer.uint32(40).bool(message.hasSymbol);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hasUppercase = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasLowercase = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasNumber = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasSymbol = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomPasswordComplexityPolicyRequest {
    return {
      minLength: isSet(object.minLength) ? Number(object.minLength) : 0,
      hasUppercase: isSet(object.hasUppercase) ? Boolean(object.hasUppercase) : false,
      hasLowercase: isSet(object.hasLowercase) ? Boolean(object.hasLowercase) : false,
      hasNumber: isSet(object.hasNumber) ? Boolean(object.hasNumber) : false,
      hasSymbol: isSet(object.hasSymbol) ? Boolean(object.hasSymbol) : false,
    };
  },

  toJSON(message: AddCustomPasswordComplexityPolicyRequest): unknown {
    const obj: any = {};
    if (message.minLength !== 0) {
      obj.minLength = Math.round(message.minLength);
    }
    if (message.hasUppercase === true) {
      obj.hasUppercase = message.hasUppercase;
    }
    if (message.hasLowercase === true) {
      obj.hasLowercase = message.hasLowercase;
    }
    if (message.hasNumber === true) {
      obj.hasNumber = message.hasNumber;
    }
    if (message.hasSymbol === true) {
      obj.hasSymbol = message.hasSymbol;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomPasswordComplexityPolicyRequest>, I>>(
    base?: I,
  ): AddCustomPasswordComplexityPolicyRequest {
    return AddCustomPasswordComplexityPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomPasswordComplexityPolicyRequest>, I>>(
    object: I,
  ): AddCustomPasswordComplexityPolicyRequest {
    const message = createBaseAddCustomPasswordComplexityPolicyRequest();
    message.minLength = object.minLength ?? 0;
    message.hasUppercase = object.hasUppercase ?? false;
    message.hasLowercase = object.hasLowercase ?? false;
    message.hasNumber = object.hasNumber ?? false;
    message.hasSymbol = object.hasSymbol ?? false;
    return message;
  },
};

function createBaseAddCustomPasswordComplexityPolicyResponse(): AddCustomPasswordComplexityPolicyResponse {
  return { details: undefined };
}

export const AddCustomPasswordComplexityPolicyResponse = {
  encode(message: AddCustomPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomPasswordComplexityPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomPasswordComplexityPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomPasswordComplexityPolicyResponse>, I>>(
    base?: I,
  ): AddCustomPasswordComplexityPolicyResponse {
    return AddCustomPasswordComplexityPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomPasswordComplexityPolicyResponse>, I>>(
    object: I,
  ): AddCustomPasswordComplexityPolicyResponse {
    const message = createBaseAddCustomPasswordComplexityPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomPasswordComplexityPolicyRequest(): UpdateCustomPasswordComplexityPolicyRequest {
  return { minLength: 0, hasUppercase: false, hasLowercase: false, hasNumber: false, hasSymbol: false };
}

export const UpdateCustomPasswordComplexityPolicyRequest = {
  encode(message: UpdateCustomPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minLength !== 0) {
      writer.uint32(8).uint64(message.minLength);
    }
    if (message.hasUppercase === true) {
      writer.uint32(16).bool(message.hasUppercase);
    }
    if (message.hasLowercase === true) {
      writer.uint32(24).bool(message.hasLowercase);
    }
    if (message.hasNumber === true) {
      writer.uint32(32).bool(message.hasNumber);
    }
    if (message.hasSymbol === true) {
      writer.uint32(40).bool(message.hasSymbol);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hasUppercase = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasLowercase = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasNumber = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasSymbol = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomPasswordComplexityPolicyRequest {
    return {
      minLength: isSet(object.minLength) ? Number(object.minLength) : 0,
      hasUppercase: isSet(object.hasUppercase) ? Boolean(object.hasUppercase) : false,
      hasLowercase: isSet(object.hasLowercase) ? Boolean(object.hasLowercase) : false,
      hasNumber: isSet(object.hasNumber) ? Boolean(object.hasNumber) : false,
      hasSymbol: isSet(object.hasSymbol) ? Boolean(object.hasSymbol) : false,
    };
  },

  toJSON(message: UpdateCustomPasswordComplexityPolicyRequest): unknown {
    const obj: any = {};
    if (message.minLength !== 0) {
      obj.minLength = Math.round(message.minLength);
    }
    if (message.hasUppercase === true) {
      obj.hasUppercase = message.hasUppercase;
    }
    if (message.hasLowercase === true) {
      obj.hasLowercase = message.hasLowercase;
    }
    if (message.hasNumber === true) {
      obj.hasNumber = message.hasNumber;
    }
    if (message.hasSymbol === true) {
      obj.hasSymbol = message.hasSymbol;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomPasswordComplexityPolicyRequest>, I>>(
    base?: I,
  ): UpdateCustomPasswordComplexityPolicyRequest {
    return UpdateCustomPasswordComplexityPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomPasswordComplexityPolicyRequest>, I>>(
    object: I,
  ): UpdateCustomPasswordComplexityPolicyRequest {
    const message = createBaseUpdateCustomPasswordComplexityPolicyRequest();
    message.minLength = object.minLength ?? 0;
    message.hasUppercase = object.hasUppercase ?? false;
    message.hasLowercase = object.hasLowercase ?? false;
    message.hasNumber = object.hasNumber ?? false;
    message.hasSymbol = object.hasSymbol ?? false;
    return message;
  },
};

function createBaseUpdateCustomPasswordComplexityPolicyResponse(): UpdateCustomPasswordComplexityPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomPasswordComplexityPolicyResponse = {
  encode(message: UpdateCustomPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomPasswordComplexityPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomPasswordComplexityPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomPasswordComplexityPolicyResponse>, I>>(
    base?: I,
  ): UpdateCustomPasswordComplexityPolicyResponse {
    return UpdateCustomPasswordComplexityPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomPasswordComplexityPolicyResponse>, I>>(
    object: I,
  ): UpdateCustomPasswordComplexityPolicyResponse {
    const message = createBaseUpdateCustomPasswordComplexityPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetPasswordComplexityPolicyToDefaultRequest(): ResetPasswordComplexityPolicyToDefaultRequest {
  return {};
}

export const ResetPasswordComplexityPolicyToDefaultRequest = {
  encode(_: ResetPasswordComplexityPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPasswordComplexityPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordComplexityPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetPasswordComplexityPolicyToDefaultRequest {
    return {};
  },

  toJSON(_: ResetPasswordComplexityPolicyToDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPasswordComplexityPolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetPasswordComplexityPolicyToDefaultRequest {
    return ResetPasswordComplexityPolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPasswordComplexityPolicyToDefaultRequest>, I>>(
    _: I,
  ): ResetPasswordComplexityPolicyToDefaultRequest {
    const message = createBaseResetPasswordComplexityPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetPasswordComplexityPolicyToDefaultResponse(): ResetPasswordComplexityPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetPasswordComplexityPolicyToDefaultResponse = {
  encode(
    message: ResetPasswordComplexityPolicyToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPasswordComplexityPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordComplexityPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetPasswordComplexityPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetPasswordComplexityPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPasswordComplexityPolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetPasswordComplexityPolicyToDefaultResponse {
    return ResetPasswordComplexityPolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPasswordComplexityPolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetPasswordComplexityPolicyToDefaultResponse {
    const message = createBaseResetPasswordComplexityPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPasswordAgePolicyRequest(): GetPasswordAgePolicyRequest {
  return {};
}

export const GetPasswordAgePolicyRequest = {
  encode(_: GetPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPasswordAgePolicyRequest {
    return {};
  },

  toJSON(_: GetPasswordAgePolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPasswordAgePolicyRequest>, I>>(base?: I): GetPasswordAgePolicyRequest {
    return GetPasswordAgePolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPasswordAgePolicyRequest>, I>>(_: I): GetPasswordAgePolicyRequest {
    const message = createBaseGetPasswordAgePolicyRequest();
    return message;
  },
};

function createBaseGetPasswordAgePolicyResponse(): GetPasswordAgePolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetPasswordAgePolicyResponse = {
  encode(message: GetPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordAgePolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordAgePolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPasswordAgePolicyResponse {
    return {
      policy: isSet(object.policy) ? PasswordAgePolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetPasswordAgePolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PasswordAgePolicy.toJSON(message.policy);
    }
    if (message.isDefault === true) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPasswordAgePolicyResponse>, I>>(base?: I): GetPasswordAgePolicyResponse {
    return GetPasswordAgePolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPasswordAgePolicyResponse>, I>>(object: I): GetPasswordAgePolicyResponse {
    const message = createBaseGetPasswordAgePolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordAgePolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultPasswordAgePolicyRequest(): GetDefaultPasswordAgePolicyRequest {
  return {};
}

export const GetDefaultPasswordAgePolicyRequest = {
  encode(_: GetDefaultPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultPasswordAgePolicyRequest {
    return {};
  },

  toJSON(_: GetDefaultPasswordAgePolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordAgePolicyRequest>, I>>(
    base?: I,
  ): GetDefaultPasswordAgePolicyRequest {
    return GetDefaultPasswordAgePolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordAgePolicyRequest>, I>>(
    _: I,
  ): GetDefaultPasswordAgePolicyRequest {
    const message = createBaseGetDefaultPasswordAgePolicyRequest();
    return message;
  },
};

function createBaseGetDefaultPasswordAgePolicyResponse(): GetDefaultPasswordAgePolicyResponse {
  return { policy: undefined };
}

export const GetDefaultPasswordAgePolicyResponse = {
  encode(message: GetDefaultPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordAgePolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordAgePolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordAgePolicyResponse {
    return { policy: isSet(object.policy) ? PasswordAgePolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDefaultPasswordAgePolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PasswordAgePolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordAgePolicyResponse>, I>>(
    base?: I,
  ): GetDefaultPasswordAgePolicyResponse {
    return GetDefaultPasswordAgePolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordAgePolicyResponse>, I>>(
    object: I,
  ): GetDefaultPasswordAgePolicyResponse {
    const message = createBaseGetDefaultPasswordAgePolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordAgePolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomPasswordAgePolicyRequest(): AddCustomPasswordAgePolicyRequest {
  return { maxAgeDays: 0, expireWarnDays: 0 };
}

export const AddCustomPasswordAgePolicyRequest = {
  encode(message: AddCustomPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxAgeDays !== 0) {
      writer.uint32(8).uint32(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      writer.uint32(16).uint32(message.expireWarnDays);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxAgeDays = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireWarnDays = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomPasswordAgePolicyRequest {
    return {
      maxAgeDays: isSet(object.maxAgeDays) ? Number(object.maxAgeDays) : 0,
      expireWarnDays: isSet(object.expireWarnDays) ? Number(object.expireWarnDays) : 0,
    };
  },

  toJSON(message: AddCustomPasswordAgePolicyRequest): unknown {
    const obj: any = {};
    if (message.maxAgeDays !== 0) {
      obj.maxAgeDays = Math.round(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      obj.expireWarnDays = Math.round(message.expireWarnDays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomPasswordAgePolicyRequest>, I>>(
    base?: I,
  ): AddCustomPasswordAgePolicyRequest {
    return AddCustomPasswordAgePolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomPasswordAgePolicyRequest>, I>>(
    object: I,
  ): AddCustomPasswordAgePolicyRequest {
    const message = createBaseAddCustomPasswordAgePolicyRequest();
    message.maxAgeDays = object.maxAgeDays ?? 0;
    message.expireWarnDays = object.expireWarnDays ?? 0;
    return message;
  },
};

function createBaseAddCustomPasswordAgePolicyResponse(): AddCustomPasswordAgePolicyResponse {
  return { details: undefined };
}

export const AddCustomPasswordAgePolicyResponse = {
  encode(message: AddCustomPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomPasswordAgePolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomPasswordAgePolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomPasswordAgePolicyResponse>, I>>(
    base?: I,
  ): AddCustomPasswordAgePolicyResponse {
    return AddCustomPasswordAgePolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomPasswordAgePolicyResponse>, I>>(
    object: I,
  ): AddCustomPasswordAgePolicyResponse {
    const message = createBaseAddCustomPasswordAgePolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomPasswordAgePolicyRequest(): UpdateCustomPasswordAgePolicyRequest {
  return { maxAgeDays: 0, expireWarnDays: 0 };
}

export const UpdateCustomPasswordAgePolicyRequest = {
  encode(message: UpdateCustomPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxAgeDays !== 0) {
      writer.uint32(8).uint32(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      writer.uint32(16).uint32(message.expireWarnDays);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxAgeDays = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireWarnDays = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomPasswordAgePolicyRequest {
    return {
      maxAgeDays: isSet(object.maxAgeDays) ? Number(object.maxAgeDays) : 0,
      expireWarnDays: isSet(object.expireWarnDays) ? Number(object.expireWarnDays) : 0,
    };
  },

  toJSON(message: UpdateCustomPasswordAgePolicyRequest): unknown {
    const obj: any = {};
    if (message.maxAgeDays !== 0) {
      obj.maxAgeDays = Math.round(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      obj.expireWarnDays = Math.round(message.expireWarnDays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomPasswordAgePolicyRequest>, I>>(
    base?: I,
  ): UpdateCustomPasswordAgePolicyRequest {
    return UpdateCustomPasswordAgePolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomPasswordAgePolicyRequest>, I>>(
    object: I,
  ): UpdateCustomPasswordAgePolicyRequest {
    const message = createBaseUpdateCustomPasswordAgePolicyRequest();
    message.maxAgeDays = object.maxAgeDays ?? 0;
    message.expireWarnDays = object.expireWarnDays ?? 0;
    return message;
  },
};

function createBaseUpdateCustomPasswordAgePolicyResponse(): UpdateCustomPasswordAgePolicyResponse {
  return { details: undefined };
}

export const UpdateCustomPasswordAgePolicyResponse = {
  encode(message: UpdateCustomPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomPasswordAgePolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomPasswordAgePolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomPasswordAgePolicyResponse>, I>>(
    base?: I,
  ): UpdateCustomPasswordAgePolicyResponse {
    return UpdateCustomPasswordAgePolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomPasswordAgePolicyResponse>, I>>(
    object: I,
  ): UpdateCustomPasswordAgePolicyResponse {
    const message = createBaseUpdateCustomPasswordAgePolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetPasswordAgePolicyToDefaultRequest(): ResetPasswordAgePolicyToDefaultRequest {
  return {};
}

export const ResetPasswordAgePolicyToDefaultRequest = {
  encode(_: ResetPasswordAgePolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPasswordAgePolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordAgePolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetPasswordAgePolicyToDefaultRequest {
    return {};
  },

  toJSON(_: ResetPasswordAgePolicyToDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPasswordAgePolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetPasswordAgePolicyToDefaultRequest {
    return ResetPasswordAgePolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPasswordAgePolicyToDefaultRequest>, I>>(
    _: I,
  ): ResetPasswordAgePolicyToDefaultRequest {
    const message = createBaseResetPasswordAgePolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetPasswordAgePolicyToDefaultResponse(): ResetPasswordAgePolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetPasswordAgePolicyToDefaultResponse = {
  encode(message: ResetPasswordAgePolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPasswordAgePolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordAgePolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetPasswordAgePolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetPasswordAgePolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPasswordAgePolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetPasswordAgePolicyToDefaultResponse {
    return ResetPasswordAgePolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPasswordAgePolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetPasswordAgePolicyToDefaultResponse {
    const message = createBaseResetPasswordAgePolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLockoutPolicyRequest(): GetLockoutPolicyRequest {
  return {};
}

export const GetLockoutPolicyRequest = {
  encode(_: GetLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLockoutPolicyRequest {
    return {};
  },

  toJSON(_: GetLockoutPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLockoutPolicyRequest>, I>>(base?: I): GetLockoutPolicyRequest {
    return GetLockoutPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLockoutPolicyRequest>, I>>(_: I): GetLockoutPolicyRequest {
    const message = createBaseGetLockoutPolicyRequest();
    return message;
  },
};

function createBaseGetLockoutPolicyResponse(): GetLockoutPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetLockoutPolicyResponse = {
  encode(message: GetLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LockoutPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LockoutPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLockoutPolicyResponse {
    return {
      policy: isSet(object.policy) ? LockoutPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetLockoutPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LockoutPolicy.toJSON(message.policy);
    }
    if (message.isDefault === true) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLockoutPolicyResponse>, I>>(base?: I): GetLockoutPolicyResponse {
    return GetLockoutPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLockoutPolicyResponse>, I>>(object: I): GetLockoutPolicyResponse {
    const message = createBaseGetLockoutPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LockoutPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultLockoutPolicyRequest(): GetDefaultLockoutPolicyRequest {
  return {};
}

export const GetDefaultLockoutPolicyRequest = {
  encode(_: GetDefaultLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultLockoutPolicyRequest {
    return {};
  },

  toJSON(_: GetDefaultLockoutPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLockoutPolicyRequest>, I>>(base?: I): GetDefaultLockoutPolicyRequest {
    return GetDefaultLockoutPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLockoutPolicyRequest>, I>>(_: I): GetDefaultLockoutPolicyRequest {
    const message = createBaseGetDefaultLockoutPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultLockoutPolicyResponse(): GetDefaultLockoutPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultLockoutPolicyResponse = {
  encode(message: GetDefaultLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LockoutPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LockoutPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLockoutPolicyResponse {
    return { policy: isSet(object.policy) ? LockoutPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDefaultLockoutPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LockoutPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLockoutPolicyResponse>, I>>(base?: I): GetDefaultLockoutPolicyResponse {
    return GetDefaultLockoutPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLockoutPolicyResponse>, I>>(
    object: I,
  ): GetDefaultLockoutPolicyResponse {
    const message = createBaseGetDefaultLockoutPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LockoutPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomLockoutPolicyRequest(): AddCustomLockoutPolicyRequest {
  return { maxPasswordAttempts: 0 };
}

export const AddCustomLockoutPolicyRequest = {
  encode(message: AddCustomLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxPasswordAttempts !== 0) {
      writer.uint32(8).uint32(message.maxPasswordAttempts);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxPasswordAttempts = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomLockoutPolicyRequest {
    return { maxPasswordAttempts: isSet(object.maxPasswordAttempts) ? Number(object.maxPasswordAttempts) : 0 };
  },

  toJSON(message: AddCustomLockoutPolicyRequest): unknown {
    const obj: any = {};
    if (message.maxPasswordAttempts !== 0) {
      obj.maxPasswordAttempts = Math.round(message.maxPasswordAttempts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomLockoutPolicyRequest>, I>>(base?: I): AddCustomLockoutPolicyRequest {
    return AddCustomLockoutPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomLockoutPolicyRequest>, I>>(
    object: I,
  ): AddCustomLockoutPolicyRequest {
    const message = createBaseAddCustomLockoutPolicyRequest();
    message.maxPasswordAttempts = object.maxPasswordAttempts ?? 0;
    return message;
  },
};

function createBaseAddCustomLockoutPolicyResponse(): AddCustomLockoutPolicyResponse {
  return { details: undefined };
}

export const AddCustomLockoutPolicyResponse = {
  encode(message: AddCustomLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomLockoutPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomLockoutPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomLockoutPolicyResponse>, I>>(base?: I): AddCustomLockoutPolicyResponse {
    return AddCustomLockoutPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomLockoutPolicyResponse>, I>>(
    object: I,
  ): AddCustomLockoutPolicyResponse {
    const message = createBaseAddCustomLockoutPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomLockoutPolicyRequest(): UpdateCustomLockoutPolicyRequest {
  return { maxPasswordAttempts: 0 };
}

export const UpdateCustomLockoutPolicyRequest = {
  encode(message: UpdateCustomLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxPasswordAttempts !== 0) {
      writer.uint32(8).uint32(message.maxPasswordAttempts);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxPasswordAttempts = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomLockoutPolicyRequest {
    return { maxPasswordAttempts: isSet(object.maxPasswordAttempts) ? Number(object.maxPasswordAttempts) : 0 };
  },

  toJSON(message: UpdateCustomLockoutPolicyRequest): unknown {
    const obj: any = {};
    if (message.maxPasswordAttempts !== 0) {
      obj.maxPasswordAttempts = Math.round(message.maxPasswordAttempts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomLockoutPolicyRequest>, I>>(
    base?: I,
  ): UpdateCustomLockoutPolicyRequest {
    return UpdateCustomLockoutPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomLockoutPolicyRequest>, I>>(
    object: I,
  ): UpdateCustomLockoutPolicyRequest {
    const message = createBaseUpdateCustomLockoutPolicyRequest();
    message.maxPasswordAttempts = object.maxPasswordAttempts ?? 0;
    return message;
  },
};

function createBaseUpdateCustomLockoutPolicyResponse(): UpdateCustomLockoutPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomLockoutPolicyResponse = {
  encode(message: UpdateCustomLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomLockoutPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomLockoutPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomLockoutPolicyResponse>, I>>(
    base?: I,
  ): UpdateCustomLockoutPolicyResponse {
    return UpdateCustomLockoutPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomLockoutPolicyResponse>, I>>(
    object: I,
  ): UpdateCustomLockoutPolicyResponse {
    const message = createBaseUpdateCustomLockoutPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetLockoutPolicyToDefaultRequest(): ResetLockoutPolicyToDefaultRequest {
  return {};
}

export const ResetLockoutPolicyToDefaultRequest = {
  encode(_: ResetLockoutPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLockoutPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLockoutPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetLockoutPolicyToDefaultRequest {
    return {};
  },

  toJSON(_: ResetLockoutPolicyToDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetLockoutPolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetLockoutPolicyToDefaultRequest {
    return ResetLockoutPolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetLockoutPolicyToDefaultRequest>, I>>(
    _: I,
  ): ResetLockoutPolicyToDefaultRequest {
    const message = createBaseResetLockoutPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetLockoutPolicyToDefaultResponse(): ResetLockoutPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetLockoutPolicyToDefaultResponse = {
  encode(message: ResetLockoutPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLockoutPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLockoutPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetLockoutPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetLockoutPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetLockoutPolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetLockoutPolicyToDefaultResponse {
    return ResetLockoutPolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetLockoutPolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetLockoutPolicyToDefaultResponse {
    const message = createBaseResetLockoutPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPrivacyPolicyRequest(): GetPrivacyPolicyRequest {
  return {};
}

export const GetPrivacyPolicyRequest = {
  encode(_: GetPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPrivacyPolicyRequest {
    return {};
  },

  toJSON(_: GetPrivacyPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPrivacyPolicyRequest>, I>>(base?: I): GetPrivacyPolicyRequest {
    return GetPrivacyPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPrivacyPolicyRequest>, I>>(_: I): GetPrivacyPolicyRequest {
    const message = createBaseGetPrivacyPolicyRequest();
    return message;
  },
};

function createBaseGetPrivacyPolicyResponse(): GetPrivacyPolicyResponse {
  return { policy: undefined };
}

export const GetPrivacyPolicyResponse = {
  encode(message: GetPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PrivacyPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPrivacyPolicyResponse {
    return { policy: isSet(object.policy) ? PrivacyPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPrivacyPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PrivacyPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPrivacyPolicyResponse>, I>>(base?: I): GetPrivacyPolicyResponse {
    return GetPrivacyPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPrivacyPolicyResponse>, I>>(object: I): GetPrivacyPolicyResponse {
    const message = createBaseGetPrivacyPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PrivacyPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPrivacyPolicyRequest(): GetDefaultPrivacyPolicyRequest {
  return {};
}

export const GetDefaultPrivacyPolicyRequest = {
  encode(_: GetDefaultPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultPrivacyPolicyRequest {
    return {};
  },

  toJSON(_: GetDefaultPrivacyPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPrivacyPolicyRequest>, I>>(base?: I): GetDefaultPrivacyPolicyRequest {
    return GetDefaultPrivacyPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPrivacyPolicyRequest>, I>>(_: I): GetDefaultPrivacyPolicyRequest {
    const message = createBaseGetDefaultPrivacyPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultPrivacyPolicyResponse(): GetDefaultPrivacyPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultPrivacyPolicyResponse = {
  encode(message: GetDefaultPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PrivacyPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPrivacyPolicyResponse {
    return { policy: isSet(object.policy) ? PrivacyPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDefaultPrivacyPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PrivacyPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPrivacyPolicyResponse>, I>>(base?: I): GetDefaultPrivacyPolicyResponse {
    return GetDefaultPrivacyPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPrivacyPolicyResponse>, I>>(
    object: I,
  ): GetDefaultPrivacyPolicyResponse {
    const message = createBaseGetDefaultPrivacyPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PrivacyPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomPrivacyPolicyRequest(): AddCustomPrivacyPolicyRequest {
  return { tosLink: "", privacyLink: "", helpLink: "", supportEmail: "" };
}

export const AddCustomPrivacyPolicyRequest = {
  encode(message: AddCustomPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tosLink !== "") {
      writer.uint32(10).string(message.tosLink);
    }
    if (message.privacyLink !== "") {
      writer.uint32(18).string(message.privacyLink);
    }
    if (message.helpLink !== "") {
      writer.uint32(26).string(message.helpLink);
    }
    if (message.supportEmail !== "") {
      writer.uint32(34).string(message.supportEmail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tosLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privacyLink = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.helpLink = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supportEmail = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomPrivacyPolicyRequest {
    return {
      tosLink: isSet(object.tosLink) ? String(object.tosLink) : "",
      privacyLink: isSet(object.privacyLink) ? String(object.privacyLink) : "",
      helpLink: isSet(object.helpLink) ? String(object.helpLink) : "",
      supportEmail: isSet(object.supportEmail) ? String(object.supportEmail) : "",
    };
  },

  toJSON(message: AddCustomPrivacyPolicyRequest): unknown {
    const obj: any = {};
    if (message.tosLink !== "") {
      obj.tosLink = message.tosLink;
    }
    if (message.privacyLink !== "") {
      obj.privacyLink = message.privacyLink;
    }
    if (message.helpLink !== "") {
      obj.helpLink = message.helpLink;
    }
    if (message.supportEmail !== "") {
      obj.supportEmail = message.supportEmail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomPrivacyPolicyRequest>, I>>(base?: I): AddCustomPrivacyPolicyRequest {
    return AddCustomPrivacyPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomPrivacyPolicyRequest>, I>>(
    object: I,
  ): AddCustomPrivacyPolicyRequest {
    const message = createBaseAddCustomPrivacyPolicyRequest();
    message.tosLink = object.tosLink ?? "";
    message.privacyLink = object.privacyLink ?? "";
    message.helpLink = object.helpLink ?? "";
    message.supportEmail = object.supportEmail ?? "";
    return message;
  },
};

function createBaseAddCustomPrivacyPolicyResponse(): AddCustomPrivacyPolicyResponse {
  return { details: undefined };
}

export const AddCustomPrivacyPolicyResponse = {
  encode(message: AddCustomPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomPrivacyPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomPrivacyPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomPrivacyPolicyResponse>, I>>(base?: I): AddCustomPrivacyPolicyResponse {
    return AddCustomPrivacyPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomPrivacyPolicyResponse>, I>>(
    object: I,
  ): AddCustomPrivacyPolicyResponse {
    const message = createBaseAddCustomPrivacyPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomPrivacyPolicyRequest(): UpdateCustomPrivacyPolicyRequest {
  return { tosLink: "", privacyLink: "", helpLink: "", supportEmail: "" };
}

export const UpdateCustomPrivacyPolicyRequest = {
  encode(message: UpdateCustomPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tosLink !== "") {
      writer.uint32(10).string(message.tosLink);
    }
    if (message.privacyLink !== "") {
      writer.uint32(18).string(message.privacyLink);
    }
    if (message.helpLink !== "") {
      writer.uint32(26).string(message.helpLink);
    }
    if (message.supportEmail !== "") {
      writer.uint32(34).string(message.supportEmail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tosLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privacyLink = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.helpLink = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supportEmail = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomPrivacyPolicyRequest {
    return {
      tosLink: isSet(object.tosLink) ? String(object.tosLink) : "",
      privacyLink: isSet(object.privacyLink) ? String(object.privacyLink) : "",
      helpLink: isSet(object.helpLink) ? String(object.helpLink) : "",
      supportEmail: isSet(object.supportEmail) ? String(object.supportEmail) : "",
    };
  },

  toJSON(message: UpdateCustomPrivacyPolicyRequest): unknown {
    const obj: any = {};
    if (message.tosLink !== "") {
      obj.tosLink = message.tosLink;
    }
    if (message.privacyLink !== "") {
      obj.privacyLink = message.privacyLink;
    }
    if (message.helpLink !== "") {
      obj.helpLink = message.helpLink;
    }
    if (message.supportEmail !== "") {
      obj.supportEmail = message.supportEmail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomPrivacyPolicyRequest>, I>>(
    base?: I,
  ): UpdateCustomPrivacyPolicyRequest {
    return UpdateCustomPrivacyPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomPrivacyPolicyRequest>, I>>(
    object: I,
  ): UpdateCustomPrivacyPolicyRequest {
    const message = createBaseUpdateCustomPrivacyPolicyRequest();
    message.tosLink = object.tosLink ?? "";
    message.privacyLink = object.privacyLink ?? "";
    message.helpLink = object.helpLink ?? "";
    message.supportEmail = object.supportEmail ?? "";
    return message;
  },
};

function createBaseUpdateCustomPrivacyPolicyResponse(): UpdateCustomPrivacyPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomPrivacyPolicyResponse = {
  encode(message: UpdateCustomPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomPrivacyPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomPrivacyPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomPrivacyPolicyResponse>, I>>(
    base?: I,
  ): UpdateCustomPrivacyPolicyResponse {
    return UpdateCustomPrivacyPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomPrivacyPolicyResponse>, I>>(
    object: I,
  ): UpdateCustomPrivacyPolicyResponse {
    const message = createBaseUpdateCustomPrivacyPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetPrivacyPolicyToDefaultRequest(): ResetPrivacyPolicyToDefaultRequest {
  return {};
}

export const ResetPrivacyPolicyToDefaultRequest = {
  encode(_: ResetPrivacyPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPrivacyPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPrivacyPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetPrivacyPolicyToDefaultRequest {
    return {};
  },

  toJSON(_: ResetPrivacyPolicyToDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPrivacyPolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetPrivacyPolicyToDefaultRequest {
    return ResetPrivacyPolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPrivacyPolicyToDefaultRequest>, I>>(
    _: I,
  ): ResetPrivacyPolicyToDefaultRequest {
    const message = createBaseResetPrivacyPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetPrivacyPolicyToDefaultResponse(): ResetPrivacyPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetPrivacyPolicyToDefaultResponse = {
  encode(message: ResetPrivacyPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPrivacyPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPrivacyPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetPrivacyPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetPrivacyPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPrivacyPolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetPrivacyPolicyToDefaultResponse {
    return ResetPrivacyPolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPrivacyPolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetPrivacyPolicyToDefaultResponse {
    const message = createBaseResetPrivacyPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetNotificationPolicyRequest(): GetNotificationPolicyRequest {
  return {};
}

export const GetNotificationPolicyRequest = {
  encode(_: GetNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetNotificationPolicyRequest {
    return {};
  },

  toJSON(_: GetNotificationPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetNotificationPolicyRequest>, I>>(base?: I): GetNotificationPolicyRequest {
    return GetNotificationPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetNotificationPolicyRequest>, I>>(_: I): GetNotificationPolicyRequest {
    const message = createBaseGetNotificationPolicyRequest();
    return message;
  },
};

function createBaseGetNotificationPolicyResponse(): GetNotificationPolicyResponse {
  return { policy: undefined };
}

export const GetNotificationPolicyResponse = {
  encode(message: GetNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      NotificationPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = NotificationPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotificationPolicyResponse {
    return { policy: isSet(object.policy) ? NotificationPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = NotificationPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetNotificationPolicyResponse>, I>>(base?: I): GetNotificationPolicyResponse {
    return GetNotificationPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetNotificationPolicyResponse>, I>>(
    object: I,
  ): GetNotificationPolicyResponse {
    const message = createBaseGetNotificationPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? NotificationPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultNotificationPolicyRequest(): GetDefaultNotificationPolicyRequest {
  return {};
}

export const GetDefaultNotificationPolicyRequest = {
  encode(_: GetDefaultNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultNotificationPolicyRequest {
    return {};
  },

  toJSON(_: GetDefaultNotificationPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultNotificationPolicyRequest>, I>>(
    base?: I,
  ): GetDefaultNotificationPolicyRequest {
    return GetDefaultNotificationPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultNotificationPolicyRequest>, I>>(
    _: I,
  ): GetDefaultNotificationPolicyRequest {
    const message = createBaseGetDefaultNotificationPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultNotificationPolicyResponse(): GetDefaultNotificationPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultNotificationPolicyResponse = {
  encode(message: GetDefaultNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      NotificationPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = NotificationPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultNotificationPolicyResponse {
    return { policy: isSet(object.policy) ? NotificationPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDefaultNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = NotificationPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultNotificationPolicyResponse>, I>>(
    base?: I,
  ): GetDefaultNotificationPolicyResponse {
    return GetDefaultNotificationPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultNotificationPolicyResponse>, I>>(
    object: I,
  ): GetDefaultNotificationPolicyResponse {
    const message = createBaseGetDefaultNotificationPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? NotificationPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomNotificationPolicyRequest(): AddCustomNotificationPolicyRequest {
  return { passwordChange: false };
}

export const AddCustomNotificationPolicyRequest = {
  encode(message: AddCustomNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.passwordChange === true) {
      writer.uint32(8).bool(message.passwordChange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.passwordChange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomNotificationPolicyRequest {
    return { passwordChange: isSet(object.passwordChange) ? Boolean(object.passwordChange) : false };
  },

  toJSON(message: AddCustomNotificationPolicyRequest): unknown {
    const obj: any = {};
    if (message.passwordChange === true) {
      obj.passwordChange = message.passwordChange;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomNotificationPolicyRequest>, I>>(
    base?: I,
  ): AddCustomNotificationPolicyRequest {
    return AddCustomNotificationPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomNotificationPolicyRequest>, I>>(
    object: I,
  ): AddCustomNotificationPolicyRequest {
    const message = createBaseAddCustomNotificationPolicyRequest();
    message.passwordChange = object.passwordChange ?? false;
    return message;
  },
};

function createBaseAddCustomNotificationPolicyResponse(): AddCustomNotificationPolicyResponse {
  return { details: undefined };
}

export const AddCustomNotificationPolicyResponse = {
  encode(message: AddCustomNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomNotificationPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomNotificationPolicyResponse>, I>>(
    base?: I,
  ): AddCustomNotificationPolicyResponse {
    return AddCustomNotificationPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomNotificationPolicyResponse>, I>>(
    object: I,
  ): AddCustomNotificationPolicyResponse {
    const message = createBaseAddCustomNotificationPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomNotificationPolicyRequest(): UpdateCustomNotificationPolicyRequest {
  return { passwordChange: false };
}

export const UpdateCustomNotificationPolicyRequest = {
  encode(message: UpdateCustomNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.passwordChange === true) {
      writer.uint32(8).bool(message.passwordChange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.passwordChange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomNotificationPolicyRequest {
    return { passwordChange: isSet(object.passwordChange) ? Boolean(object.passwordChange) : false };
  },

  toJSON(message: UpdateCustomNotificationPolicyRequest): unknown {
    const obj: any = {};
    if (message.passwordChange === true) {
      obj.passwordChange = message.passwordChange;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomNotificationPolicyRequest>, I>>(
    base?: I,
  ): UpdateCustomNotificationPolicyRequest {
    return UpdateCustomNotificationPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomNotificationPolicyRequest>, I>>(
    object: I,
  ): UpdateCustomNotificationPolicyRequest {
    const message = createBaseUpdateCustomNotificationPolicyRequest();
    message.passwordChange = object.passwordChange ?? false;
    return message;
  },
};

function createBaseUpdateCustomNotificationPolicyResponse(): UpdateCustomNotificationPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomNotificationPolicyResponse = {
  encode(message: UpdateCustomNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomNotificationPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomNotificationPolicyResponse>, I>>(
    base?: I,
  ): UpdateCustomNotificationPolicyResponse {
    return UpdateCustomNotificationPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomNotificationPolicyResponse>, I>>(
    object: I,
  ): UpdateCustomNotificationPolicyResponse {
    const message = createBaseUpdateCustomNotificationPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetNotificationPolicyToDefaultRequest(): ResetNotificationPolicyToDefaultRequest {
  return {};
}

export const ResetNotificationPolicyToDefaultRequest = {
  encode(_: ResetNotificationPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetNotificationPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetNotificationPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetNotificationPolicyToDefaultRequest {
    return {};
  },

  toJSON(_: ResetNotificationPolicyToDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetNotificationPolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetNotificationPolicyToDefaultRequest {
    return ResetNotificationPolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetNotificationPolicyToDefaultRequest>, I>>(
    _: I,
  ): ResetNotificationPolicyToDefaultRequest {
    const message = createBaseResetNotificationPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetNotificationPolicyToDefaultResponse(): ResetNotificationPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetNotificationPolicyToDefaultResponse = {
  encode(message: ResetNotificationPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetNotificationPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetNotificationPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetNotificationPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetNotificationPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetNotificationPolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetNotificationPolicyToDefaultResponse {
    return ResetNotificationPolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetNotificationPolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetNotificationPolicyToDefaultResponse {
    const message = createBaseResetNotificationPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLabelPolicyRequest(): GetLabelPolicyRequest {
  return {};
}

export const GetLabelPolicyRequest = {
  encode(_: GetLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLabelPolicyRequest {
    return {};
  },

  toJSON(_: GetLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLabelPolicyRequest>, I>>(base?: I): GetLabelPolicyRequest {
    return GetLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLabelPolicyRequest>, I>>(_: I): GetLabelPolicyRequest {
    const message = createBaseGetLabelPolicyRequest();
    return message;
  },
};

function createBaseGetLabelPolicyResponse(): GetLabelPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetLabelPolicyResponse = {
  encode(message: GetLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLabelPolicyResponse {
    return {
      policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LabelPolicy.toJSON(message.policy);
    }
    if (message.isDefault === true) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLabelPolicyResponse>, I>>(base?: I): GetLabelPolicyResponse {
    return GetLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLabelPolicyResponse>, I>>(object: I): GetLabelPolicyResponse {
    const message = createBaseGetLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetPreviewLabelPolicyRequest(): GetPreviewLabelPolicyRequest {
  return {};
}

export const GetPreviewLabelPolicyRequest = {
  encode(_: GetPreviewLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPreviewLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPreviewLabelPolicyRequest {
    return {};
  },

  toJSON(_: GetPreviewLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPreviewLabelPolicyRequest>, I>>(base?: I): GetPreviewLabelPolicyRequest {
    return GetPreviewLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPreviewLabelPolicyRequest>, I>>(_: I): GetPreviewLabelPolicyRequest {
    const message = createBaseGetPreviewLabelPolicyRequest();
    return message;
  },
};

function createBaseGetPreviewLabelPolicyResponse(): GetPreviewLabelPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetPreviewLabelPolicyResponse = {
  encode(message: GetPreviewLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPreviewLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPreviewLabelPolicyResponse {
    return {
      policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetPreviewLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LabelPolicy.toJSON(message.policy);
    }
    if (message.isDefault === true) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPreviewLabelPolicyResponse>, I>>(base?: I): GetPreviewLabelPolicyResponse {
    return GetPreviewLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPreviewLabelPolicyResponse>, I>>(
    object: I,
  ): GetPreviewLabelPolicyResponse {
    const message = createBaseGetPreviewLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultLabelPolicyRequest(): GetDefaultLabelPolicyRequest {
  return {};
}

export const GetDefaultLabelPolicyRequest = {
  encode(_: GetDefaultLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultLabelPolicyRequest {
    return {};
  },

  toJSON(_: GetDefaultLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLabelPolicyRequest>, I>>(base?: I): GetDefaultLabelPolicyRequest {
    return GetDefaultLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLabelPolicyRequest>, I>>(_: I): GetDefaultLabelPolicyRequest {
    const message = createBaseGetDefaultLabelPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultLabelPolicyResponse(): GetDefaultLabelPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultLabelPolicyResponse = {
  encode(message: GetDefaultLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLabelPolicyResponse {
    return { policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDefaultLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LabelPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLabelPolicyResponse>, I>>(base?: I): GetDefaultLabelPolicyResponse {
    return GetDefaultLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLabelPolicyResponse>, I>>(
    object: I,
  ): GetDefaultLabelPolicyResponse {
    const message = createBaseGetDefaultLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomLabelPolicyRequest(): AddCustomLabelPolicyRequest {
  return {
    primaryColor: "",
    hideLoginNameSuffix: false,
    warnColor: "",
    backgroundColor: "",
    fontColor: "",
    primaryColorDark: "",
    backgroundColorDark: "",
    warnColorDark: "",
    fontColorDark: "",
    disableWatermark: false,
  };
}

export const AddCustomLabelPolicyRequest = {
  encode(message: AddCustomLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.primaryColor !== "") {
      writer.uint32(10).string(message.primaryColor);
    }
    if (message.hideLoginNameSuffix === true) {
      writer.uint32(24).bool(message.hideLoginNameSuffix);
    }
    if (message.warnColor !== "") {
      writer.uint32(34).string(message.warnColor);
    }
    if (message.backgroundColor !== "") {
      writer.uint32(42).string(message.backgroundColor);
    }
    if (message.fontColor !== "") {
      writer.uint32(50).string(message.fontColor);
    }
    if (message.primaryColorDark !== "") {
      writer.uint32(58).string(message.primaryColorDark);
    }
    if (message.backgroundColorDark !== "") {
      writer.uint32(66).string(message.backgroundColorDark);
    }
    if (message.warnColorDark !== "") {
      writer.uint32(74).string(message.warnColorDark);
    }
    if (message.fontColorDark !== "") {
      writer.uint32(82).string(message.fontColorDark);
    }
    if (message.disableWatermark === true) {
      writer.uint32(88).bool(message.disableWatermark);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.primaryColor = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hideLoginNameSuffix = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.warnColor = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.primaryColorDark = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backgroundColorDark = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.warnColorDark = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.fontColorDark = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.disableWatermark = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomLabelPolicyRequest {
    return {
      primaryColor: isSet(object.primaryColor) ? String(object.primaryColor) : "",
      hideLoginNameSuffix: isSet(object.hideLoginNameSuffix) ? Boolean(object.hideLoginNameSuffix) : false,
      warnColor: isSet(object.warnColor) ? String(object.warnColor) : "",
      backgroundColor: isSet(object.backgroundColor) ? String(object.backgroundColor) : "",
      fontColor: isSet(object.fontColor) ? String(object.fontColor) : "",
      primaryColorDark: isSet(object.primaryColorDark) ? String(object.primaryColorDark) : "",
      backgroundColorDark: isSet(object.backgroundColorDark) ? String(object.backgroundColorDark) : "",
      warnColorDark: isSet(object.warnColorDark) ? String(object.warnColorDark) : "",
      fontColorDark: isSet(object.fontColorDark) ? String(object.fontColorDark) : "",
      disableWatermark: isSet(object.disableWatermark) ? Boolean(object.disableWatermark) : false,
    };
  },

  toJSON(message: AddCustomLabelPolicyRequest): unknown {
    const obj: any = {};
    if (message.primaryColor !== "") {
      obj.primaryColor = message.primaryColor;
    }
    if (message.hideLoginNameSuffix === true) {
      obj.hideLoginNameSuffix = message.hideLoginNameSuffix;
    }
    if (message.warnColor !== "") {
      obj.warnColor = message.warnColor;
    }
    if (message.backgroundColor !== "") {
      obj.backgroundColor = message.backgroundColor;
    }
    if (message.fontColor !== "") {
      obj.fontColor = message.fontColor;
    }
    if (message.primaryColorDark !== "") {
      obj.primaryColorDark = message.primaryColorDark;
    }
    if (message.backgroundColorDark !== "") {
      obj.backgroundColorDark = message.backgroundColorDark;
    }
    if (message.warnColorDark !== "") {
      obj.warnColorDark = message.warnColorDark;
    }
    if (message.fontColorDark !== "") {
      obj.fontColorDark = message.fontColorDark;
    }
    if (message.disableWatermark === true) {
      obj.disableWatermark = message.disableWatermark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomLabelPolicyRequest>, I>>(base?: I): AddCustomLabelPolicyRequest {
    return AddCustomLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomLabelPolicyRequest>, I>>(object: I): AddCustomLabelPolicyRequest {
    const message = createBaseAddCustomLabelPolicyRequest();
    message.primaryColor = object.primaryColor ?? "";
    message.hideLoginNameSuffix = object.hideLoginNameSuffix ?? false;
    message.warnColor = object.warnColor ?? "";
    message.backgroundColor = object.backgroundColor ?? "";
    message.fontColor = object.fontColor ?? "";
    message.primaryColorDark = object.primaryColorDark ?? "";
    message.backgroundColorDark = object.backgroundColorDark ?? "";
    message.warnColorDark = object.warnColorDark ?? "";
    message.fontColorDark = object.fontColorDark ?? "";
    message.disableWatermark = object.disableWatermark ?? false;
    return message;
  },
};

function createBaseAddCustomLabelPolicyResponse(): AddCustomLabelPolicyResponse {
  return { details: undefined };
}

export const AddCustomLabelPolicyResponse = {
  encode(message: AddCustomLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomLabelPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCustomLabelPolicyResponse>, I>>(base?: I): AddCustomLabelPolicyResponse {
    return AddCustomLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCustomLabelPolicyResponse>, I>>(object: I): AddCustomLabelPolicyResponse {
    const message = createBaseAddCustomLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomLabelPolicyRequest(): UpdateCustomLabelPolicyRequest {
  return {
    primaryColor: "",
    hideLoginNameSuffix: false,
    warnColor: "",
    backgroundColor: "",
    fontColor: "",
    primaryColorDark: "",
    backgroundColorDark: "",
    warnColorDark: "",
    fontColorDark: "",
    disableWatermark: false,
  };
}

export const UpdateCustomLabelPolicyRequest = {
  encode(message: UpdateCustomLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.primaryColor !== "") {
      writer.uint32(10).string(message.primaryColor);
    }
    if (message.hideLoginNameSuffix === true) {
      writer.uint32(24).bool(message.hideLoginNameSuffix);
    }
    if (message.warnColor !== "") {
      writer.uint32(34).string(message.warnColor);
    }
    if (message.backgroundColor !== "") {
      writer.uint32(42).string(message.backgroundColor);
    }
    if (message.fontColor !== "") {
      writer.uint32(50).string(message.fontColor);
    }
    if (message.primaryColorDark !== "") {
      writer.uint32(58).string(message.primaryColorDark);
    }
    if (message.backgroundColorDark !== "") {
      writer.uint32(66).string(message.backgroundColorDark);
    }
    if (message.warnColorDark !== "") {
      writer.uint32(74).string(message.warnColorDark);
    }
    if (message.fontColorDark !== "") {
      writer.uint32(82).string(message.fontColorDark);
    }
    if (message.disableWatermark === true) {
      writer.uint32(88).bool(message.disableWatermark);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.primaryColor = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hideLoginNameSuffix = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.warnColor = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.primaryColorDark = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backgroundColorDark = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.warnColorDark = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.fontColorDark = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.disableWatermark = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomLabelPolicyRequest {
    return {
      primaryColor: isSet(object.primaryColor) ? String(object.primaryColor) : "",
      hideLoginNameSuffix: isSet(object.hideLoginNameSuffix) ? Boolean(object.hideLoginNameSuffix) : false,
      warnColor: isSet(object.warnColor) ? String(object.warnColor) : "",
      backgroundColor: isSet(object.backgroundColor) ? String(object.backgroundColor) : "",
      fontColor: isSet(object.fontColor) ? String(object.fontColor) : "",
      primaryColorDark: isSet(object.primaryColorDark) ? String(object.primaryColorDark) : "",
      backgroundColorDark: isSet(object.backgroundColorDark) ? String(object.backgroundColorDark) : "",
      warnColorDark: isSet(object.warnColorDark) ? String(object.warnColorDark) : "",
      fontColorDark: isSet(object.fontColorDark) ? String(object.fontColorDark) : "",
      disableWatermark: isSet(object.disableWatermark) ? Boolean(object.disableWatermark) : false,
    };
  },

  toJSON(message: UpdateCustomLabelPolicyRequest): unknown {
    const obj: any = {};
    if (message.primaryColor !== "") {
      obj.primaryColor = message.primaryColor;
    }
    if (message.hideLoginNameSuffix === true) {
      obj.hideLoginNameSuffix = message.hideLoginNameSuffix;
    }
    if (message.warnColor !== "") {
      obj.warnColor = message.warnColor;
    }
    if (message.backgroundColor !== "") {
      obj.backgroundColor = message.backgroundColor;
    }
    if (message.fontColor !== "") {
      obj.fontColor = message.fontColor;
    }
    if (message.primaryColorDark !== "") {
      obj.primaryColorDark = message.primaryColorDark;
    }
    if (message.backgroundColorDark !== "") {
      obj.backgroundColorDark = message.backgroundColorDark;
    }
    if (message.warnColorDark !== "") {
      obj.warnColorDark = message.warnColorDark;
    }
    if (message.fontColorDark !== "") {
      obj.fontColorDark = message.fontColorDark;
    }
    if (message.disableWatermark === true) {
      obj.disableWatermark = message.disableWatermark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomLabelPolicyRequest>, I>>(base?: I): UpdateCustomLabelPolicyRequest {
    return UpdateCustomLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomLabelPolicyRequest>, I>>(
    object: I,
  ): UpdateCustomLabelPolicyRequest {
    const message = createBaseUpdateCustomLabelPolicyRequest();
    message.primaryColor = object.primaryColor ?? "";
    message.hideLoginNameSuffix = object.hideLoginNameSuffix ?? false;
    message.warnColor = object.warnColor ?? "";
    message.backgroundColor = object.backgroundColor ?? "";
    message.fontColor = object.fontColor ?? "";
    message.primaryColorDark = object.primaryColorDark ?? "";
    message.backgroundColorDark = object.backgroundColorDark ?? "";
    message.warnColorDark = object.warnColorDark ?? "";
    message.fontColorDark = object.fontColorDark ?? "";
    message.disableWatermark = object.disableWatermark ?? false;
    return message;
  },
};

function createBaseUpdateCustomLabelPolicyResponse(): UpdateCustomLabelPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomLabelPolicyResponse = {
  encode(message: UpdateCustomLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomLabelPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCustomLabelPolicyResponse>, I>>(base?: I): UpdateCustomLabelPolicyResponse {
    return UpdateCustomLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCustomLabelPolicyResponse>, I>>(
    object: I,
  ): UpdateCustomLabelPolicyResponse {
    const message = createBaseUpdateCustomLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseActivateCustomLabelPolicyRequest(): ActivateCustomLabelPolicyRequest {
  return {};
}

export const ActivateCustomLabelPolicyRequest = {
  encode(_: ActivateCustomLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivateCustomLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateCustomLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ActivateCustomLabelPolicyRequest {
    return {};
  },

  toJSON(_: ActivateCustomLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivateCustomLabelPolicyRequest>, I>>(
    base?: I,
  ): ActivateCustomLabelPolicyRequest {
    return ActivateCustomLabelPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivateCustomLabelPolicyRequest>, I>>(
    _: I,
  ): ActivateCustomLabelPolicyRequest {
    const message = createBaseActivateCustomLabelPolicyRequest();
    return message;
  },
};

function createBaseActivateCustomLabelPolicyResponse(): ActivateCustomLabelPolicyResponse {
  return { details: undefined };
}

export const ActivateCustomLabelPolicyResponse = {
  encode(message: ActivateCustomLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivateCustomLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateCustomLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateCustomLabelPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ActivateCustomLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivateCustomLabelPolicyResponse>, I>>(
    base?: I,
  ): ActivateCustomLabelPolicyResponse {
    return ActivateCustomLabelPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivateCustomLabelPolicyResponse>, I>>(
    object: I,
  ): ActivateCustomLabelPolicyResponse {
    const message = createBaseActivateCustomLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyLogoRequest(): RemoveCustomLabelPolicyLogoRequest {
  return {};
}

export const RemoveCustomLabelPolicyLogoRequest = {
  encode(_: RemoveCustomLabelPolicyLogoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyLogoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyLogoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveCustomLabelPolicyLogoRequest {
    return {};
  },

  toJSON(_: RemoveCustomLabelPolicyLogoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyLogoRequest>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyLogoRequest {
    return RemoveCustomLabelPolicyLogoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyLogoRequest>, I>>(
    _: I,
  ): RemoveCustomLabelPolicyLogoRequest {
    const message = createBaseRemoveCustomLabelPolicyLogoRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyLogoResponse(): RemoveCustomLabelPolicyLogoResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyLogoResponse = {
  encode(message: RemoveCustomLabelPolicyLogoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyLogoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyLogoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveCustomLabelPolicyLogoResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveCustomLabelPolicyLogoResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyLogoResponse>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyLogoResponse {
    return RemoveCustomLabelPolicyLogoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyLogoResponse>, I>>(
    object: I,
  ): RemoveCustomLabelPolicyLogoResponse {
    const message = createBaseRemoveCustomLabelPolicyLogoResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyLogoDarkRequest(): RemoveCustomLabelPolicyLogoDarkRequest {
  return {};
}

export const RemoveCustomLabelPolicyLogoDarkRequest = {
  encode(_: RemoveCustomLabelPolicyLogoDarkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyLogoDarkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyLogoDarkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveCustomLabelPolicyLogoDarkRequest {
    return {};
  },

  toJSON(_: RemoveCustomLabelPolicyLogoDarkRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyLogoDarkRequest>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyLogoDarkRequest {
    return RemoveCustomLabelPolicyLogoDarkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyLogoDarkRequest>, I>>(
    _: I,
  ): RemoveCustomLabelPolicyLogoDarkRequest {
    const message = createBaseRemoveCustomLabelPolicyLogoDarkRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyLogoDarkResponse(): RemoveCustomLabelPolicyLogoDarkResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyLogoDarkResponse = {
  encode(message: RemoveCustomLabelPolicyLogoDarkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyLogoDarkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyLogoDarkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveCustomLabelPolicyLogoDarkResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveCustomLabelPolicyLogoDarkResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyLogoDarkResponse>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyLogoDarkResponse {
    return RemoveCustomLabelPolicyLogoDarkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyLogoDarkResponse>, I>>(
    object: I,
  ): RemoveCustomLabelPolicyLogoDarkResponse {
    const message = createBaseRemoveCustomLabelPolicyLogoDarkResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyIconRequest(): RemoveCustomLabelPolicyIconRequest {
  return {};
}

export const RemoveCustomLabelPolicyIconRequest = {
  encode(_: RemoveCustomLabelPolicyIconRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyIconRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyIconRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveCustomLabelPolicyIconRequest {
    return {};
  },

  toJSON(_: RemoveCustomLabelPolicyIconRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyIconRequest>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyIconRequest {
    return RemoveCustomLabelPolicyIconRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyIconRequest>, I>>(
    _: I,
  ): RemoveCustomLabelPolicyIconRequest {
    const message = createBaseRemoveCustomLabelPolicyIconRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyIconResponse(): RemoveCustomLabelPolicyIconResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyIconResponse = {
  encode(message: RemoveCustomLabelPolicyIconResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyIconResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyIconResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveCustomLabelPolicyIconResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveCustomLabelPolicyIconResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyIconResponse>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyIconResponse {
    return RemoveCustomLabelPolicyIconResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyIconResponse>, I>>(
    object: I,
  ): RemoveCustomLabelPolicyIconResponse {
    const message = createBaseRemoveCustomLabelPolicyIconResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyIconDarkRequest(): RemoveCustomLabelPolicyIconDarkRequest {
  return {};
}

export const RemoveCustomLabelPolicyIconDarkRequest = {
  encode(_: RemoveCustomLabelPolicyIconDarkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyIconDarkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyIconDarkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveCustomLabelPolicyIconDarkRequest {
    return {};
  },

  toJSON(_: RemoveCustomLabelPolicyIconDarkRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyIconDarkRequest>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyIconDarkRequest {
    return RemoveCustomLabelPolicyIconDarkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyIconDarkRequest>, I>>(
    _: I,
  ): RemoveCustomLabelPolicyIconDarkRequest {
    const message = createBaseRemoveCustomLabelPolicyIconDarkRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyIconDarkResponse(): RemoveCustomLabelPolicyIconDarkResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyIconDarkResponse = {
  encode(message: RemoveCustomLabelPolicyIconDarkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyIconDarkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyIconDarkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveCustomLabelPolicyIconDarkResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveCustomLabelPolicyIconDarkResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyIconDarkResponse>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyIconDarkResponse {
    return RemoveCustomLabelPolicyIconDarkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyIconDarkResponse>, I>>(
    object: I,
  ): RemoveCustomLabelPolicyIconDarkResponse {
    const message = createBaseRemoveCustomLabelPolicyIconDarkResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyFontRequest(): RemoveCustomLabelPolicyFontRequest {
  return {};
}

export const RemoveCustomLabelPolicyFontRequest = {
  encode(_: RemoveCustomLabelPolicyFontRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyFontRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyFontRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveCustomLabelPolicyFontRequest {
    return {};
  },

  toJSON(_: RemoveCustomLabelPolicyFontRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyFontRequest>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyFontRequest {
    return RemoveCustomLabelPolicyFontRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyFontRequest>, I>>(
    _: I,
  ): RemoveCustomLabelPolicyFontRequest {
    const message = createBaseRemoveCustomLabelPolicyFontRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyFontResponse(): RemoveCustomLabelPolicyFontResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyFontResponse = {
  encode(message: RemoveCustomLabelPolicyFontResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyFontResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyFontResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveCustomLabelPolicyFontResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveCustomLabelPolicyFontResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveCustomLabelPolicyFontResponse>, I>>(
    base?: I,
  ): RemoveCustomLabelPolicyFontResponse {
    return RemoveCustomLabelPolicyFontResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveCustomLabelPolicyFontResponse>, I>>(
    object: I,
  ): RemoveCustomLabelPolicyFontResponse {
    const message = createBaseRemoveCustomLabelPolicyFontResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetLabelPolicyToDefaultRequest(): ResetLabelPolicyToDefaultRequest {
  return {};
}

export const ResetLabelPolicyToDefaultRequest = {
  encode(_: ResetLabelPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLabelPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLabelPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetLabelPolicyToDefaultRequest {
    return {};
  },

  toJSON(_: ResetLabelPolicyToDefaultRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetLabelPolicyToDefaultRequest>, I>>(
    base?: I,
  ): ResetLabelPolicyToDefaultRequest {
    return ResetLabelPolicyToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetLabelPolicyToDefaultRequest>, I>>(
    _: I,
  ): ResetLabelPolicyToDefaultRequest {
    const message = createBaseResetLabelPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetLabelPolicyToDefaultResponse(): ResetLabelPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetLabelPolicyToDefaultResponse = {
  encode(message: ResetLabelPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLabelPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLabelPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetLabelPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetLabelPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetLabelPolicyToDefaultResponse>, I>>(
    base?: I,
  ): ResetLabelPolicyToDefaultResponse {
    return ResetLabelPolicyToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetLabelPolicyToDefaultResponse>, I>>(
    object: I,
  ): ResetLabelPolicyToDefaultResponse {
    const message = createBaseResetLabelPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomInitMessageTextRequest(): GetCustomInitMessageTextRequest {
  return { language: "" };
}

export const GetCustomInitMessageTextRequest = {
  encode(message: GetCustomInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomInitMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomInitMessageTextRequest>, I>>(base?: I): GetCustomInitMessageTextRequest {
    return GetCustomInitMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomInitMessageTextRequest>, I>>(
    object: I,
  ): GetCustomInitMessageTextRequest {
    const message = createBaseGetCustomInitMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomInitMessageTextResponse(): GetCustomInitMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomInitMessageTextResponse = {
  encode(message: GetCustomInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomInitMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomInitMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomInitMessageTextResponse {
    return GetCustomInitMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomInitMessageTextResponse>, I>>(
    object: I,
  ): GetCustomInitMessageTextResponse {
    const message = createBaseGetCustomInitMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultInitMessageTextRequest(): GetDefaultInitMessageTextRequest {
  return { language: "" };
}

export const GetDefaultInitMessageTextRequest = {
  encode(message: GetDefaultInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultInitMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultInitMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultInitMessageTextRequest {
    return GetDefaultInitMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultInitMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultInitMessageTextRequest {
    const message = createBaseGetDefaultInitMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultInitMessageTextResponse(): GetDefaultInitMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultInitMessageTextResponse = {
  encode(message: GetDefaultInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultInitMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultInitMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultInitMessageTextResponse {
    return GetDefaultInitMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultInitMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultInitMessageTextResponse {
    const message = createBaseGetDefaultInitMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomInitMessageTextRequest(): SetCustomInitMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomInitMessageTextRequest = {
  encode(message: SetCustomInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomInitMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetCustomInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomInitMessageTextRequest>, I>>(base?: I): SetCustomInitMessageTextRequest {
    return SetCustomInitMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomInitMessageTextRequest>, I>>(
    object: I,
  ): SetCustomInitMessageTextRequest {
    const message = createBaseSetCustomInitMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomInitMessageTextResponse(): SetCustomInitMessageTextResponse {
  return { details: undefined };
}

export const SetCustomInitMessageTextResponse = {
  encode(message: SetCustomInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomInitMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomInitMessageTextResponse>, I>>(
    base?: I,
  ): SetCustomInitMessageTextResponse {
    return SetCustomInitMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomInitMessageTextResponse>, I>>(
    object: I,
  ): SetCustomInitMessageTextResponse {
    const message = createBaseSetCustomInitMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomInitMessageTextToDefaultRequest(): ResetCustomInitMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomInitMessageTextToDefaultRequest = {
  encode(message: ResetCustomInitMessageTextToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomInitMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInitMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomInitMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomInitMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomInitMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomInitMessageTextToDefaultRequest {
    return ResetCustomInitMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomInitMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomInitMessageTextToDefaultRequest {
    const message = createBaseResetCustomInitMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomInitMessageTextToDefaultResponse(): ResetCustomInitMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomInitMessageTextToDefaultResponse = {
  encode(message: ResetCustomInitMessageTextToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomInitMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInitMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomInitMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomInitMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomInitMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomInitMessageTextToDefaultResponse {
    return ResetCustomInitMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomInitMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomInitMessageTextToDefaultResponse {
    const message = createBaseResetCustomInitMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultLoginTextsRequest(): GetDefaultLoginTextsRequest {
  return { language: "" };
}

export const GetDefaultLoginTextsRequest = {
  encode(message: GetDefaultLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLoginTextsRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLoginTextsRequest>, I>>(base?: I): GetDefaultLoginTextsRequest {
    return GetDefaultLoginTextsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLoginTextsRequest>, I>>(object: I): GetDefaultLoginTextsRequest {
    const message = createBaseGetDefaultLoginTextsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultLoginTextsResponse(): GetDefaultLoginTextsResponse {
  return { customText: undefined };
}

export const GetDefaultLoginTextsResponse = {
  encode(message: GetDefaultLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      LoginCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = LoginCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLoginTextsResponse {
    return { customText: isSet(object.customText) ? LoginCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = LoginCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultLoginTextsResponse>, I>>(base?: I): GetDefaultLoginTextsResponse {
    return GetDefaultLoginTextsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultLoginTextsResponse>, I>>(object: I): GetDefaultLoginTextsResponse {
    const message = createBaseGetDefaultLoginTextsResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? LoginCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomLoginTextsRequest(): GetCustomLoginTextsRequest {
  return { language: "" };
}

export const GetCustomLoginTextsRequest = {
  encode(message: GetCustomLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomLoginTextsRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomLoginTextsRequest>, I>>(base?: I): GetCustomLoginTextsRequest {
    return GetCustomLoginTextsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomLoginTextsRequest>, I>>(object: I): GetCustomLoginTextsRequest {
    const message = createBaseGetCustomLoginTextsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomLoginTextsResponse(): GetCustomLoginTextsResponse {
  return { customText: undefined };
}

export const GetCustomLoginTextsResponse = {
  encode(message: GetCustomLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      LoginCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = LoginCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomLoginTextsResponse {
    return { customText: isSet(object.customText) ? LoginCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = LoginCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomLoginTextsResponse>, I>>(base?: I): GetCustomLoginTextsResponse {
    return GetCustomLoginTextsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomLoginTextsResponse>, I>>(object: I): GetCustomLoginTextsResponse {
    const message = createBaseGetCustomLoginTextsResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? LoginCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomLoginTextsRequest(): SetCustomLoginTextsRequest {
  return {
    language: "",
    selectAccountText: undefined,
    loginText: undefined,
    passwordText: undefined,
    usernameChangeText: undefined,
    usernameChangeDoneText: undefined,
    initPasswordText: undefined,
    initPasswordDoneText: undefined,
    emailVerificationText: undefined,
    emailVerificationDoneText: undefined,
    initializeUserText: undefined,
    initializeDoneText: undefined,
    initMfaPromptText: undefined,
    initMfaOtpText: undefined,
    initMfaU2fText: undefined,
    initMfaDoneText: undefined,
    mfaProvidersText: undefined,
    verifyMfaOtpText: undefined,
    verifyMfaU2fText: undefined,
    passwordlessText: undefined,
    passwordChangeText: undefined,
    passwordChangeDoneText: undefined,
    passwordResetDoneText: undefined,
    registrationOptionText: undefined,
    registrationUserText: undefined,
    registrationOrgText: undefined,
    linkingUserDoneText: undefined,
    externalUserNotFoundText: undefined,
    successLoginText: undefined,
    logoutText: undefined,
    footerText: undefined,
    passwordlessPromptText: undefined,
    passwordlessRegistrationText: undefined,
    passwordlessRegistrationDoneText: undefined,
    externalRegistrationUserOverviewText: undefined,
  };
}

export const SetCustomLoginTextsRequest = {
  encode(message: SetCustomLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.selectAccountText !== undefined) {
      SelectAccountScreenText.encode(message.selectAccountText, writer.uint32(18).fork()).ldelim();
    }
    if (message.loginText !== undefined) {
      LoginScreenText.encode(message.loginText, writer.uint32(26).fork()).ldelim();
    }
    if (message.passwordText !== undefined) {
      PasswordScreenText.encode(message.passwordText, writer.uint32(34).fork()).ldelim();
    }
    if (message.usernameChangeText !== undefined) {
      UsernameChangeScreenText.encode(message.usernameChangeText, writer.uint32(42).fork()).ldelim();
    }
    if (message.usernameChangeDoneText !== undefined) {
      UsernameChangeDoneScreenText.encode(message.usernameChangeDoneText, writer.uint32(50).fork()).ldelim();
    }
    if (message.initPasswordText !== undefined) {
      InitPasswordScreenText.encode(message.initPasswordText, writer.uint32(58).fork()).ldelim();
    }
    if (message.initPasswordDoneText !== undefined) {
      InitPasswordDoneScreenText.encode(message.initPasswordDoneText, writer.uint32(66).fork()).ldelim();
    }
    if (message.emailVerificationText !== undefined) {
      EmailVerificationScreenText.encode(message.emailVerificationText, writer.uint32(74).fork()).ldelim();
    }
    if (message.emailVerificationDoneText !== undefined) {
      EmailVerificationDoneScreenText.encode(message.emailVerificationDoneText, writer.uint32(82).fork()).ldelim();
    }
    if (message.initializeUserText !== undefined) {
      InitializeUserScreenText.encode(message.initializeUserText, writer.uint32(90).fork()).ldelim();
    }
    if (message.initializeDoneText !== undefined) {
      InitializeUserDoneScreenText.encode(message.initializeDoneText, writer.uint32(98).fork()).ldelim();
    }
    if (message.initMfaPromptText !== undefined) {
      InitMFAPromptScreenText.encode(message.initMfaPromptText, writer.uint32(106).fork()).ldelim();
    }
    if (message.initMfaOtpText !== undefined) {
      InitMFAOTPScreenText.encode(message.initMfaOtpText, writer.uint32(114).fork()).ldelim();
    }
    if (message.initMfaU2fText !== undefined) {
      InitMFAU2FScreenText.encode(message.initMfaU2fText, writer.uint32(122).fork()).ldelim();
    }
    if (message.initMfaDoneText !== undefined) {
      InitMFADoneScreenText.encode(message.initMfaDoneText, writer.uint32(130).fork()).ldelim();
    }
    if (message.mfaProvidersText !== undefined) {
      MFAProvidersText.encode(message.mfaProvidersText, writer.uint32(138).fork()).ldelim();
    }
    if (message.verifyMfaOtpText !== undefined) {
      VerifyMFAOTPScreenText.encode(message.verifyMfaOtpText, writer.uint32(146).fork()).ldelim();
    }
    if (message.verifyMfaU2fText !== undefined) {
      VerifyMFAU2FScreenText.encode(message.verifyMfaU2fText, writer.uint32(154).fork()).ldelim();
    }
    if (message.passwordlessText !== undefined) {
      PasswordlessScreenText.encode(message.passwordlessText, writer.uint32(162).fork()).ldelim();
    }
    if (message.passwordChangeText !== undefined) {
      PasswordChangeScreenText.encode(message.passwordChangeText, writer.uint32(170).fork()).ldelim();
    }
    if (message.passwordChangeDoneText !== undefined) {
      PasswordChangeDoneScreenText.encode(message.passwordChangeDoneText, writer.uint32(178).fork()).ldelim();
    }
    if (message.passwordResetDoneText !== undefined) {
      PasswordResetDoneScreenText.encode(message.passwordResetDoneText, writer.uint32(186).fork()).ldelim();
    }
    if (message.registrationOptionText !== undefined) {
      RegistrationOptionScreenText.encode(message.registrationOptionText, writer.uint32(194).fork()).ldelim();
    }
    if (message.registrationUserText !== undefined) {
      RegistrationUserScreenText.encode(message.registrationUserText, writer.uint32(202).fork()).ldelim();
    }
    if (message.registrationOrgText !== undefined) {
      RegistrationOrgScreenText.encode(message.registrationOrgText, writer.uint32(210).fork()).ldelim();
    }
    if (message.linkingUserDoneText !== undefined) {
      LinkingUserDoneScreenText.encode(message.linkingUserDoneText, writer.uint32(218).fork()).ldelim();
    }
    if (message.externalUserNotFoundText !== undefined) {
      ExternalUserNotFoundScreenText.encode(message.externalUserNotFoundText, writer.uint32(226).fork()).ldelim();
    }
    if (message.successLoginText !== undefined) {
      SuccessLoginScreenText.encode(message.successLoginText, writer.uint32(234).fork()).ldelim();
    }
    if (message.logoutText !== undefined) {
      LogoutDoneScreenText.encode(message.logoutText, writer.uint32(242).fork()).ldelim();
    }
    if (message.footerText !== undefined) {
      FooterText.encode(message.footerText, writer.uint32(250).fork()).ldelim();
    }
    if (message.passwordlessPromptText !== undefined) {
      PasswordlessPromptScreenText.encode(message.passwordlessPromptText, writer.uint32(258).fork()).ldelim();
    }
    if (message.passwordlessRegistrationText !== undefined) {
      PasswordlessRegistrationScreenText.encode(message.passwordlessRegistrationText, writer.uint32(266).fork())
        .ldelim();
    }
    if (message.passwordlessRegistrationDoneText !== undefined) {
      PasswordlessRegistrationDoneScreenText.encode(message.passwordlessRegistrationDoneText, writer.uint32(274).fork())
        .ldelim();
    }
    if (message.externalRegistrationUserOverviewText !== undefined) {
      ExternalRegistrationUserOverviewScreenText.encode(
        message.externalRegistrationUserOverviewText,
        writer.uint32(282).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.selectAccountText = SelectAccountScreenText.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.loginText = LoginScreenText.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.passwordText = PasswordScreenText.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.usernameChangeText = UsernameChangeScreenText.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.usernameChangeDoneText = UsernameChangeDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.initPasswordText = InitPasswordScreenText.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.initPasswordDoneText = InitPasswordDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.emailVerificationText = EmailVerificationScreenText.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.emailVerificationDoneText = EmailVerificationDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.initializeUserText = InitializeUserScreenText.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.initializeDoneText = InitializeUserDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.initMfaPromptText = InitMFAPromptScreenText.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.initMfaOtpText = InitMFAOTPScreenText.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.initMfaU2fText = InitMFAU2FScreenText.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.initMfaDoneText = InitMFADoneScreenText.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.mfaProvidersText = MFAProvidersText.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.verifyMfaOtpText = VerifyMFAOTPScreenText.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.verifyMfaU2fText = VerifyMFAU2FScreenText.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.passwordlessText = PasswordlessScreenText.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.passwordChangeText = PasswordChangeScreenText.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.passwordChangeDoneText = PasswordChangeDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.passwordResetDoneText = PasswordResetDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.registrationOptionText = RegistrationOptionScreenText.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.registrationUserText = RegistrationUserScreenText.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.registrationOrgText = RegistrationOrgScreenText.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.linkingUserDoneText = LinkingUserDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.externalUserNotFoundText = ExternalUserNotFoundScreenText.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.successLoginText = SuccessLoginScreenText.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.logoutText = LogoutDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.footerText = FooterText.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.passwordlessPromptText = PasswordlessPromptScreenText.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.passwordlessRegistrationText = PasswordlessRegistrationScreenText.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomLoginTextsRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      selectAccountText: isSet(object.selectAccountText)
        ? SelectAccountScreenText.fromJSON(object.selectAccountText)
        : undefined,
      loginText: isSet(object.loginText) ? LoginScreenText.fromJSON(object.loginText) : undefined,
      passwordText: isSet(object.passwordText) ? PasswordScreenText.fromJSON(object.passwordText) : undefined,
      usernameChangeText: isSet(object.usernameChangeText)
        ? UsernameChangeScreenText.fromJSON(object.usernameChangeText)
        : undefined,
      usernameChangeDoneText: isSet(object.usernameChangeDoneText)
        ? UsernameChangeDoneScreenText.fromJSON(object.usernameChangeDoneText)
        : undefined,
      initPasswordText: isSet(object.initPasswordText)
        ? InitPasswordScreenText.fromJSON(object.initPasswordText)
        : undefined,
      initPasswordDoneText: isSet(object.initPasswordDoneText)
        ? InitPasswordDoneScreenText.fromJSON(object.initPasswordDoneText)
        : undefined,
      emailVerificationText: isSet(object.emailVerificationText)
        ? EmailVerificationScreenText.fromJSON(object.emailVerificationText)
        : undefined,
      emailVerificationDoneText: isSet(object.emailVerificationDoneText)
        ? EmailVerificationDoneScreenText.fromJSON(object.emailVerificationDoneText)
        : undefined,
      initializeUserText: isSet(object.initializeUserText)
        ? InitializeUserScreenText.fromJSON(object.initializeUserText)
        : undefined,
      initializeDoneText: isSet(object.initializeDoneText)
        ? InitializeUserDoneScreenText.fromJSON(object.initializeDoneText)
        : undefined,
      initMfaPromptText: isSet(object.initMfaPromptText)
        ? InitMFAPromptScreenText.fromJSON(object.initMfaPromptText)
        : undefined,
      initMfaOtpText: isSet(object.initMfaOtpText) ? InitMFAOTPScreenText.fromJSON(object.initMfaOtpText) : undefined,
      initMfaU2fText: isSet(object.initMfaU2fText) ? InitMFAU2FScreenText.fromJSON(object.initMfaU2fText) : undefined,
      initMfaDoneText: isSet(object.initMfaDoneText)
        ? InitMFADoneScreenText.fromJSON(object.initMfaDoneText)
        : undefined,
      mfaProvidersText: isSet(object.mfaProvidersText) ? MFAProvidersText.fromJSON(object.mfaProvidersText) : undefined,
      verifyMfaOtpText: isSet(object.verifyMfaOtpText)
        ? VerifyMFAOTPScreenText.fromJSON(object.verifyMfaOtpText)
        : undefined,
      verifyMfaU2fText: isSet(object.verifyMfaU2fText)
        ? VerifyMFAU2FScreenText.fromJSON(object.verifyMfaU2fText)
        : undefined,
      passwordlessText: isSet(object.passwordlessText)
        ? PasswordlessScreenText.fromJSON(object.passwordlessText)
        : undefined,
      passwordChangeText: isSet(object.passwordChangeText)
        ? PasswordChangeScreenText.fromJSON(object.passwordChangeText)
        : undefined,
      passwordChangeDoneText: isSet(object.passwordChangeDoneText)
        ? PasswordChangeDoneScreenText.fromJSON(object.passwordChangeDoneText)
        : undefined,
      passwordResetDoneText: isSet(object.passwordResetDoneText)
        ? PasswordResetDoneScreenText.fromJSON(object.passwordResetDoneText)
        : undefined,
      registrationOptionText: isSet(object.registrationOptionText)
        ? RegistrationOptionScreenText.fromJSON(object.registrationOptionText)
        : undefined,
      registrationUserText: isSet(object.registrationUserText)
        ? RegistrationUserScreenText.fromJSON(object.registrationUserText)
        : undefined,
      registrationOrgText: isSet(object.registrationOrgText)
        ? RegistrationOrgScreenText.fromJSON(object.registrationOrgText)
        : undefined,
      linkingUserDoneText: isSet(object.linkingUserDoneText)
        ? LinkingUserDoneScreenText.fromJSON(object.linkingUserDoneText)
        : undefined,
      externalUserNotFoundText: isSet(object.externalUserNotFoundText)
        ? ExternalUserNotFoundScreenText.fromJSON(object.externalUserNotFoundText)
        : undefined,
      successLoginText: isSet(object.successLoginText)
        ? SuccessLoginScreenText.fromJSON(object.successLoginText)
        : undefined,
      logoutText: isSet(object.logoutText) ? LogoutDoneScreenText.fromJSON(object.logoutText) : undefined,
      footerText: isSet(object.footerText) ? FooterText.fromJSON(object.footerText) : undefined,
      passwordlessPromptText: isSet(object.passwordlessPromptText)
        ? PasswordlessPromptScreenText.fromJSON(object.passwordlessPromptText)
        : undefined,
      passwordlessRegistrationText: isSet(object.passwordlessRegistrationText)
        ? PasswordlessRegistrationScreenText.fromJSON(object.passwordlessRegistrationText)
        : undefined,
      passwordlessRegistrationDoneText: isSet(object.passwordlessRegistrationDoneText)
        ? PasswordlessRegistrationDoneScreenText.fromJSON(object.passwordlessRegistrationDoneText)
        : undefined,
      externalRegistrationUserOverviewText: isSet(object.externalRegistrationUserOverviewText)
        ? ExternalRegistrationUserOverviewScreenText.fromJSON(object.externalRegistrationUserOverviewText)
        : undefined,
    };
  },

  toJSON(message: SetCustomLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.selectAccountText !== undefined) {
      obj.selectAccountText = SelectAccountScreenText.toJSON(message.selectAccountText);
    }
    if (message.loginText !== undefined) {
      obj.loginText = LoginScreenText.toJSON(message.loginText);
    }
    if (message.passwordText !== undefined) {
      obj.passwordText = PasswordScreenText.toJSON(message.passwordText);
    }
    if (message.usernameChangeText !== undefined) {
      obj.usernameChangeText = UsernameChangeScreenText.toJSON(message.usernameChangeText);
    }
    if (message.usernameChangeDoneText !== undefined) {
      obj.usernameChangeDoneText = UsernameChangeDoneScreenText.toJSON(message.usernameChangeDoneText);
    }
    if (message.initPasswordText !== undefined) {
      obj.initPasswordText = InitPasswordScreenText.toJSON(message.initPasswordText);
    }
    if (message.initPasswordDoneText !== undefined) {
      obj.initPasswordDoneText = InitPasswordDoneScreenText.toJSON(message.initPasswordDoneText);
    }
    if (message.emailVerificationText !== undefined) {
      obj.emailVerificationText = EmailVerificationScreenText.toJSON(message.emailVerificationText);
    }
    if (message.emailVerificationDoneText !== undefined) {
      obj.emailVerificationDoneText = EmailVerificationDoneScreenText.toJSON(message.emailVerificationDoneText);
    }
    if (message.initializeUserText !== undefined) {
      obj.initializeUserText = InitializeUserScreenText.toJSON(message.initializeUserText);
    }
    if (message.initializeDoneText !== undefined) {
      obj.initializeDoneText = InitializeUserDoneScreenText.toJSON(message.initializeDoneText);
    }
    if (message.initMfaPromptText !== undefined) {
      obj.initMfaPromptText = InitMFAPromptScreenText.toJSON(message.initMfaPromptText);
    }
    if (message.initMfaOtpText !== undefined) {
      obj.initMfaOtpText = InitMFAOTPScreenText.toJSON(message.initMfaOtpText);
    }
    if (message.initMfaU2fText !== undefined) {
      obj.initMfaU2fText = InitMFAU2FScreenText.toJSON(message.initMfaU2fText);
    }
    if (message.initMfaDoneText !== undefined) {
      obj.initMfaDoneText = InitMFADoneScreenText.toJSON(message.initMfaDoneText);
    }
    if (message.mfaProvidersText !== undefined) {
      obj.mfaProvidersText = MFAProvidersText.toJSON(message.mfaProvidersText);
    }
    if (message.verifyMfaOtpText !== undefined) {
      obj.verifyMfaOtpText = VerifyMFAOTPScreenText.toJSON(message.verifyMfaOtpText);
    }
    if (message.verifyMfaU2fText !== undefined) {
      obj.verifyMfaU2fText = VerifyMFAU2FScreenText.toJSON(message.verifyMfaU2fText);
    }
    if (message.passwordlessText !== undefined) {
      obj.passwordlessText = PasswordlessScreenText.toJSON(message.passwordlessText);
    }
    if (message.passwordChangeText !== undefined) {
      obj.passwordChangeText = PasswordChangeScreenText.toJSON(message.passwordChangeText);
    }
    if (message.passwordChangeDoneText !== undefined) {
      obj.passwordChangeDoneText = PasswordChangeDoneScreenText.toJSON(message.passwordChangeDoneText);
    }
    if (message.passwordResetDoneText !== undefined) {
      obj.passwordResetDoneText = PasswordResetDoneScreenText.toJSON(message.passwordResetDoneText);
    }
    if (message.registrationOptionText !== undefined) {
      obj.registrationOptionText = RegistrationOptionScreenText.toJSON(message.registrationOptionText);
    }
    if (message.registrationUserText !== undefined) {
      obj.registrationUserText = RegistrationUserScreenText.toJSON(message.registrationUserText);
    }
    if (message.registrationOrgText !== undefined) {
      obj.registrationOrgText = RegistrationOrgScreenText.toJSON(message.registrationOrgText);
    }
    if (message.linkingUserDoneText !== undefined) {
      obj.linkingUserDoneText = LinkingUserDoneScreenText.toJSON(message.linkingUserDoneText);
    }
    if (message.externalUserNotFoundText !== undefined) {
      obj.externalUserNotFoundText = ExternalUserNotFoundScreenText.toJSON(message.externalUserNotFoundText);
    }
    if (message.successLoginText !== undefined) {
      obj.successLoginText = SuccessLoginScreenText.toJSON(message.successLoginText);
    }
    if (message.logoutText !== undefined) {
      obj.logoutText = LogoutDoneScreenText.toJSON(message.logoutText);
    }
    if (message.footerText !== undefined) {
      obj.footerText = FooterText.toJSON(message.footerText);
    }
    if (message.passwordlessPromptText !== undefined) {
      obj.passwordlessPromptText = PasswordlessPromptScreenText.toJSON(message.passwordlessPromptText);
    }
    if (message.passwordlessRegistrationText !== undefined) {
      obj.passwordlessRegistrationText = PasswordlessRegistrationScreenText.toJSON(
        message.passwordlessRegistrationText,
      );
    }
    if (message.passwordlessRegistrationDoneText !== undefined) {
      obj.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.toJSON(
        message.passwordlessRegistrationDoneText,
      );
    }
    if (message.externalRegistrationUserOverviewText !== undefined) {
      obj.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.toJSON(
        message.externalRegistrationUserOverviewText,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomLoginTextsRequest>, I>>(base?: I): SetCustomLoginTextsRequest {
    return SetCustomLoginTextsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomLoginTextsRequest>, I>>(object: I): SetCustomLoginTextsRequest {
    const message = createBaseSetCustomLoginTextsRequest();
    message.language = object.language ?? "";
    message.selectAccountText = (object.selectAccountText !== undefined && object.selectAccountText !== null)
      ? SelectAccountScreenText.fromPartial(object.selectAccountText)
      : undefined;
    message.loginText = (object.loginText !== undefined && object.loginText !== null)
      ? LoginScreenText.fromPartial(object.loginText)
      : undefined;
    message.passwordText = (object.passwordText !== undefined && object.passwordText !== null)
      ? PasswordScreenText.fromPartial(object.passwordText)
      : undefined;
    message.usernameChangeText = (object.usernameChangeText !== undefined && object.usernameChangeText !== null)
      ? UsernameChangeScreenText.fromPartial(object.usernameChangeText)
      : undefined;
    message.usernameChangeDoneText =
      (object.usernameChangeDoneText !== undefined && object.usernameChangeDoneText !== null)
        ? UsernameChangeDoneScreenText.fromPartial(object.usernameChangeDoneText)
        : undefined;
    message.initPasswordText = (object.initPasswordText !== undefined && object.initPasswordText !== null)
      ? InitPasswordScreenText.fromPartial(object.initPasswordText)
      : undefined;
    message.initPasswordDoneText = (object.initPasswordDoneText !== undefined && object.initPasswordDoneText !== null)
      ? InitPasswordDoneScreenText.fromPartial(object.initPasswordDoneText)
      : undefined;
    message.emailVerificationText =
      (object.emailVerificationText !== undefined && object.emailVerificationText !== null)
        ? EmailVerificationScreenText.fromPartial(object.emailVerificationText)
        : undefined;
    message.emailVerificationDoneText =
      (object.emailVerificationDoneText !== undefined && object.emailVerificationDoneText !== null)
        ? EmailVerificationDoneScreenText.fromPartial(object.emailVerificationDoneText)
        : undefined;
    message.initializeUserText = (object.initializeUserText !== undefined && object.initializeUserText !== null)
      ? InitializeUserScreenText.fromPartial(object.initializeUserText)
      : undefined;
    message.initializeDoneText = (object.initializeDoneText !== undefined && object.initializeDoneText !== null)
      ? InitializeUserDoneScreenText.fromPartial(object.initializeDoneText)
      : undefined;
    message.initMfaPromptText = (object.initMfaPromptText !== undefined && object.initMfaPromptText !== null)
      ? InitMFAPromptScreenText.fromPartial(object.initMfaPromptText)
      : undefined;
    message.initMfaOtpText = (object.initMfaOtpText !== undefined && object.initMfaOtpText !== null)
      ? InitMFAOTPScreenText.fromPartial(object.initMfaOtpText)
      : undefined;
    message.initMfaU2fText = (object.initMfaU2fText !== undefined && object.initMfaU2fText !== null)
      ? InitMFAU2FScreenText.fromPartial(object.initMfaU2fText)
      : undefined;
    message.initMfaDoneText = (object.initMfaDoneText !== undefined && object.initMfaDoneText !== null)
      ? InitMFADoneScreenText.fromPartial(object.initMfaDoneText)
      : undefined;
    message.mfaProvidersText = (object.mfaProvidersText !== undefined && object.mfaProvidersText !== null)
      ? MFAProvidersText.fromPartial(object.mfaProvidersText)
      : undefined;
    message.verifyMfaOtpText = (object.verifyMfaOtpText !== undefined && object.verifyMfaOtpText !== null)
      ? VerifyMFAOTPScreenText.fromPartial(object.verifyMfaOtpText)
      : undefined;
    message.verifyMfaU2fText = (object.verifyMfaU2fText !== undefined && object.verifyMfaU2fText !== null)
      ? VerifyMFAU2FScreenText.fromPartial(object.verifyMfaU2fText)
      : undefined;
    message.passwordlessText = (object.passwordlessText !== undefined && object.passwordlessText !== null)
      ? PasswordlessScreenText.fromPartial(object.passwordlessText)
      : undefined;
    message.passwordChangeText = (object.passwordChangeText !== undefined && object.passwordChangeText !== null)
      ? PasswordChangeScreenText.fromPartial(object.passwordChangeText)
      : undefined;
    message.passwordChangeDoneText =
      (object.passwordChangeDoneText !== undefined && object.passwordChangeDoneText !== null)
        ? PasswordChangeDoneScreenText.fromPartial(object.passwordChangeDoneText)
        : undefined;
    message.passwordResetDoneText =
      (object.passwordResetDoneText !== undefined && object.passwordResetDoneText !== null)
        ? PasswordResetDoneScreenText.fromPartial(object.passwordResetDoneText)
        : undefined;
    message.registrationOptionText =
      (object.registrationOptionText !== undefined && object.registrationOptionText !== null)
        ? RegistrationOptionScreenText.fromPartial(object.registrationOptionText)
        : undefined;
    message.registrationUserText = (object.registrationUserText !== undefined && object.registrationUserText !== null)
      ? RegistrationUserScreenText.fromPartial(object.registrationUserText)
      : undefined;
    message.registrationOrgText = (object.registrationOrgText !== undefined && object.registrationOrgText !== null)
      ? RegistrationOrgScreenText.fromPartial(object.registrationOrgText)
      : undefined;
    message.linkingUserDoneText = (object.linkingUserDoneText !== undefined && object.linkingUserDoneText !== null)
      ? LinkingUserDoneScreenText.fromPartial(object.linkingUserDoneText)
      : undefined;
    message.externalUserNotFoundText =
      (object.externalUserNotFoundText !== undefined && object.externalUserNotFoundText !== null)
        ? ExternalUserNotFoundScreenText.fromPartial(object.externalUserNotFoundText)
        : undefined;
    message.successLoginText = (object.successLoginText !== undefined && object.successLoginText !== null)
      ? SuccessLoginScreenText.fromPartial(object.successLoginText)
      : undefined;
    message.logoutText = (object.logoutText !== undefined && object.logoutText !== null)
      ? LogoutDoneScreenText.fromPartial(object.logoutText)
      : undefined;
    message.footerText = (object.footerText !== undefined && object.footerText !== null)
      ? FooterText.fromPartial(object.footerText)
      : undefined;
    message.passwordlessPromptText =
      (object.passwordlessPromptText !== undefined && object.passwordlessPromptText !== null)
        ? PasswordlessPromptScreenText.fromPartial(object.passwordlessPromptText)
        : undefined;
    message.passwordlessRegistrationText =
      (object.passwordlessRegistrationText !== undefined && object.passwordlessRegistrationText !== null)
        ? PasswordlessRegistrationScreenText.fromPartial(object.passwordlessRegistrationText)
        : undefined;
    message.passwordlessRegistrationDoneText =
      (object.passwordlessRegistrationDoneText !== undefined && object.passwordlessRegistrationDoneText !== null)
        ? PasswordlessRegistrationDoneScreenText.fromPartial(object.passwordlessRegistrationDoneText)
        : undefined;
    message.externalRegistrationUserOverviewText =
      (object.externalRegistrationUserOverviewText !== undefined &&
          object.externalRegistrationUserOverviewText !== null)
        ? ExternalRegistrationUserOverviewScreenText.fromPartial(object.externalRegistrationUserOverviewText)
        : undefined;
    return message;
  },
};

function createBaseSetCustomLoginTextsResponse(): SetCustomLoginTextsResponse {
  return { details: undefined };
}

export const SetCustomLoginTextsResponse = {
  encode(message: SetCustomLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomLoginTextsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomLoginTextsResponse>, I>>(base?: I): SetCustomLoginTextsResponse {
    return SetCustomLoginTextsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomLoginTextsResponse>, I>>(object: I): SetCustomLoginTextsResponse {
    const message = createBaseSetCustomLoginTextsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomLoginTextsToDefaultRequest(): ResetCustomLoginTextsToDefaultRequest {
  return { language: "" };
}

export const ResetCustomLoginTextsToDefaultRequest = {
  encode(message: ResetCustomLoginTextsToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomLoginTextsToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomLoginTextsToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomLoginTextsToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomLoginTextsToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomLoginTextsToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomLoginTextsToDefaultRequest {
    return ResetCustomLoginTextsToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomLoginTextsToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomLoginTextsToDefaultRequest {
    const message = createBaseResetCustomLoginTextsToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomLoginTextsToDefaultResponse(): ResetCustomLoginTextsToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomLoginTextsToDefaultResponse = {
  encode(message: ResetCustomLoginTextsToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomLoginTextsToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomLoginTextsToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomLoginTextsToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomLoginTextsToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomLoginTextsToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomLoginTextsToDefaultResponse {
    return ResetCustomLoginTextsToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomLoginTextsToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomLoginTextsToDefaultResponse {
    const message = createBaseResetCustomLoginTextsToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordResetMessageTextRequest(): GetCustomPasswordResetMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordResetMessageTextRequest = {
  encode(message: GetCustomPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordResetMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordResetMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomPasswordResetMessageTextRequest {
    return GetCustomPasswordResetMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordResetMessageTextRequest>, I>>(
    object: I,
  ): GetCustomPasswordResetMessageTextRequest {
    const message = createBaseGetCustomPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordResetMessageTextResponse(): GetCustomPasswordResetMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordResetMessageTextResponse = {
  encode(message: GetCustomPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordResetMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordResetMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomPasswordResetMessageTextResponse {
    return GetCustomPasswordResetMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordResetMessageTextResponse>, I>>(
    object: I,
  ): GetCustomPasswordResetMessageTextResponse {
    const message = createBaseGetCustomPasswordResetMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordResetMessageTextRequest(): GetDefaultPasswordResetMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordResetMessageTextRequest = {
  encode(message: GetDefaultPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordResetMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordResetMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultPasswordResetMessageTextRequest {
    return GetDefaultPasswordResetMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordResetMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultPasswordResetMessageTextRequest {
    const message = createBaseGetDefaultPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordResetMessageTextResponse(): GetDefaultPasswordResetMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordResetMessageTextResponse = {
  encode(message: GetDefaultPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordResetMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordResetMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultPasswordResetMessageTextResponse {
    return GetDefaultPasswordResetMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordResetMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultPasswordResetMessageTextResponse {
    const message = createBaseGetDefaultPasswordResetMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomPasswordResetMessageTextRequest(): SetCustomPasswordResetMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomPasswordResetMessageTextRequest = {
  encode(message: SetCustomPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomPasswordResetMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetCustomPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomPasswordResetMessageTextRequest>, I>>(
    base?: I,
  ): SetCustomPasswordResetMessageTextRequest {
    return SetCustomPasswordResetMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomPasswordResetMessageTextRequest>, I>>(
    object: I,
  ): SetCustomPasswordResetMessageTextRequest {
    const message = createBaseSetCustomPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomPasswordResetMessageTextResponse(): SetCustomPasswordResetMessageTextResponse {
  return { details: undefined };
}

export const SetCustomPasswordResetMessageTextResponse = {
  encode(message: SetCustomPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomPasswordResetMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomPasswordResetMessageTextResponse>, I>>(
    base?: I,
  ): SetCustomPasswordResetMessageTextResponse {
    return SetCustomPasswordResetMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomPasswordResetMessageTextResponse>, I>>(
    object: I,
  ): SetCustomPasswordResetMessageTextResponse {
    const message = createBaseSetCustomPasswordResetMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordResetMessageTextToDefaultRequest(): ResetCustomPasswordResetMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordResetMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordResetMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordResetMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordResetMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordResetMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomPasswordResetMessageTextToDefaultRequest {
    return ResetCustomPasswordResetMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomPasswordResetMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordResetMessageTextToDefaultResponse(): ResetCustomPasswordResetMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordResetMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordResetMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordResetMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordResetMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordResetMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomPasswordResetMessageTextToDefaultResponse {
    return ResetCustomPasswordResetMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomPasswordResetMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyEmailMessageTextRequest(): GetCustomVerifyEmailMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyEmailMessageTextRequest = {
  encode(message: GetCustomVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyEmailMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomVerifyEmailMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomVerifyEmailMessageTextRequest {
    return GetCustomVerifyEmailMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomVerifyEmailMessageTextRequest>, I>>(
    object: I,
  ): GetCustomVerifyEmailMessageTextRequest {
    const message = createBaseGetCustomVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyEmailMessageTextResponse(): GetCustomVerifyEmailMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyEmailMessageTextResponse = {
  encode(message: GetCustomVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyEmailMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomVerifyEmailMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomVerifyEmailMessageTextResponse {
    return GetCustomVerifyEmailMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomVerifyEmailMessageTextResponse>, I>>(
    object: I,
  ): GetCustomVerifyEmailMessageTextResponse {
    const message = createBaseGetCustomVerifyEmailMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyEmailMessageTextRequest(): GetDefaultVerifyEmailMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyEmailMessageTextRequest = {
  encode(message: GetDefaultVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyEmailMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultVerifyEmailMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultVerifyEmailMessageTextRequest {
    return GetDefaultVerifyEmailMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultVerifyEmailMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultVerifyEmailMessageTextRequest {
    const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyEmailMessageTextResponse(): GetDefaultVerifyEmailMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyEmailMessageTextResponse = {
  encode(message: GetDefaultVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyEmailMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultVerifyEmailMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultVerifyEmailMessageTextResponse {
    return GetDefaultVerifyEmailMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultVerifyEmailMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultVerifyEmailMessageTextResponse {
    const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomVerifyEmailMessageTextRequest(): SetCustomVerifyEmailMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomVerifyEmailMessageTextRequest = {
  encode(message: SetCustomVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomVerifyEmailMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetCustomVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomVerifyEmailMessageTextRequest>, I>>(
    base?: I,
  ): SetCustomVerifyEmailMessageTextRequest {
    return SetCustomVerifyEmailMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomVerifyEmailMessageTextRequest>, I>>(
    object: I,
  ): SetCustomVerifyEmailMessageTextRequest {
    const message = createBaseSetCustomVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomVerifyEmailMessageTextResponse(): SetCustomVerifyEmailMessageTextResponse {
  return { details: undefined };
}

export const SetCustomVerifyEmailMessageTextResponse = {
  encode(message: SetCustomVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomVerifyEmailMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomVerifyEmailMessageTextResponse>, I>>(
    base?: I,
  ): SetCustomVerifyEmailMessageTextResponse {
    return SetCustomVerifyEmailMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomVerifyEmailMessageTextResponse>, I>>(
    object: I,
  ): SetCustomVerifyEmailMessageTextResponse {
    const message = createBaseSetCustomVerifyEmailMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyEmailMessageTextToDefaultRequest(): ResetCustomVerifyEmailMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyEmailMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomVerifyEmailMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomVerifyEmailMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    return ResetCustomVerifyEmailMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyEmailMessageTextToDefaultResponse(): ResetCustomVerifyEmailMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyEmailMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomVerifyEmailMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomVerifyEmailMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    return ResetCustomVerifyEmailMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyPhoneMessageTextRequest(): GetCustomVerifyPhoneMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyPhoneMessageTextRequest = {
  encode(message: GetCustomVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyPhoneMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomVerifyPhoneMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomVerifyPhoneMessageTextRequest {
    return GetCustomVerifyPhoneMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomVerifyPhoneMessageTextRequest>, I>>(
    object: I,
  ): GetCustomVerifyPhoneMessageTextRequest {
    const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyPhoneMessageTextResponse(): GetCustomVerifyPhoneMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyPhoneMessageTextResponse = {
  encode(message: GetCustomVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyPhoneMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomVerifyPhoneMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomVerifyPhoneMessageTextResponse {
    return GetCustomVerifyPhoneMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomVerifyPhoneMessageTextResponse>, I>>(
    object: I,
  ): GetCustomVerifyPhoneMessageTextResponse {
    const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyPhoneMessageTextRequest(): GetDefaultVerifyPhoneMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyPhoneMessageTextRequest = {
  encode(message: GetDefaultVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyPhoneMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultVerifyPhoneMessageTextRequest {
    return GetDefaultVerifyPhoneMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultVerifyPhoneMessageTextRequest {
    const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyPhoneMessageTextResponse(): GetDefaultVerifyPhoneMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyPhoneMessageTextResponse = {
  encode(message: GetDefaultVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyPhoneMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultVerifyPhoneMessageTextResponse {
    return GetDefaultVerifyPhoneMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultVerifyPhoneMessageTextResponse {
    const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomVerifyPhoneMessageTextRequest(): SetCustomVerifyPhoneMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomVerifyPhoneMessageTextRequest = {
  encode(message: SetCustomVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomVerifyPhoneMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetCustomVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomVerifyPhoneMessageTextRequest>, I>>(
    base?: I,
  ): SetCustomVerifyPhoneMessageTextRequest {
    return SetCustomVerifyPhoneMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomVerifyPhoneMessageTextRequest>, I>>(
    object: I,
  ): SetCustomVerifyPhoneMessageTextRequest {
    const message = createBaseSetCustomVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomVerifyPhoneMessageTextResponse(): SetCustomVerifyPhoneMessageTextResponse {
  return { details: undefined };
}

export const SetCustomVerifyPhoneMessageTextResponse = {
  encode(message: SetCustomVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomVerifyPhoneMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomVerifyPhoneMessageTextResponse>, I>>(
    base?: I,
  ): SetCustomVerifyPhoneMessageTextResponse {
    return SetCustomVerifyPhoneMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomVerifyPhoneMessageTextResponse>, I>>(
    object: I,
  ): SetCustomVerifyPhoneMessageTextResponse {
    const message = createBaseSetCustomVerifyPhoneMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest(): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyPhoneMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomVerifyPhoneMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    return ResetCustomVerifyPhoneMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse(): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyPhoneMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomVerifyPhoneMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomVerifyPhoneMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    return ResetCustomVerifyPhoneMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomDomainClaimedMessageTextRequest(): GetCustomDomainClaimedMessageTextRequest {
  return { language: "" };
}

export const GetCustomDomainClaimedMessageTextRequest = {
  encode(message: GetCustomDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainClaimedMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomDomainClaimedMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomDomainClaimedMessageTextRequest {
    return GetCustomDomainClaimedMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomDomainClaimedMessageTextRequest>, I>>(
    object: I,
  ): GetCustomDomainClaimedMessageTextRequest {
    const message = createBaseGetCustomDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomDomainClaimedMessageTextResponse(): GetCustomDomainClaimedMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomDomainClaimedMessageTextResponse = {
  encode(message: GetCustomDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainClaimedMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomDomainClaimedMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomDomainClaimedMessageTextResponse {
    return GetCustomDomainClaimedMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomDomainClaimedMessageTextResponse>, I>>(
    object: I,
  ): GetCustomDomainClaimedMessageTextResponse {
    const message = createBaseGetCustomDomainClaimedMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultDomainClaimedMessageTextRequest(): GetDefaultDomainClaimedMessageTextRequest {
  return { language: "" };
}

export const GetDefaultDomainClaimedMessageTextRequest = {
  encode(message: GetDefaultDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultDomainClaimedMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultDomainClaimedMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultDomainClaimedMessageTextRequest {
    return GetDefaultDomainClaimedMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultDomainClaimedMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultDomainClaimedMessageTextRequest {
    const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultDomainClaimedMessageTextResponse(): GetDefaultDomainClaimedMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultDomainClaimedMessageTextResponse = {
  encode(message: GetDefaultDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultDomainClaimedMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultDomainClaimedMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultDomainClaimedMessageTextResponse {
    return GetDefaultDomainClaimedMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultDomainClaimedMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultDomainClaimedMessageTextResponse {
    const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomDomainClaimedMessageTextRequest(): SetCustomDomainClaimedMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomDomainClaimedMessageTextRequest = {
  encode(message: SetCustomDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomDomainClaimedMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetCustomDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomDomainClaimedMessageTextRequest>, I>>(
    base?: I,
  ): SetCustomDomainClaimedMessageTextRequest {
    return SetCustomDomainClaimedMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomDomainClaimedMessageTextRequest>, I>>(
    object: I,
  ): SetCustomDomainClaimedMessageTextRequest {
    const message = createBaseSetCustomDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomDomainClaimedMessageTextResponse(): SetCustomDomainClaimedMessageTextResponse {
  return { details: undefined };
}

export const SetCustomDomainClaimedMessageTextResponse = {
  encode(message: SetCustomDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomDomainClaimedMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomDomainClaimedMessageTextResponse>, I>>(
    base?: I,
  ): SetCustomDomainClaimedMessageTextResponse {
    return SetCustomDomainClaimedMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomDomainClaimedMessageTextResponse>, I>>(
    object: I,
  ): SetCustomDomainClaimedMessageTextResponse {
    const message = createBaseSetCustomDomainClaimedMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomDomainClaimedMessageTextToDefaultRequest(): ResetCustomDomainClaimedMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomDomainClaimedMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomDomainClaimedMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomDomainClaimedMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    return ResetCustomDomainClaimedMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomDomainClaimedMessageTextToDefaultResponse(): ResetCustomDomainClaimedMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomDomainClaimedMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomDomainClaimedMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomDomainClaimedMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    return ResetCustomDomainClaimedMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordlessRegistrationMessageTextRequest(): GetCustomPasswordlessRegistrationMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: GetCustomPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordlessRegistrationMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomPasswordlessRegistrationMessageTextRequest {
    return GetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>, I>>(
    object: I,
  ): GetCustomPasswordlessRegistrationMessageTextRequest {
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordlessRegistrationMessageTextResponse(): GetCustomPasswordlessRegistrationMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: GetCustomPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordlessRegistrationMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomPasswordlessRegistrationMessageTextResponse {
    return GetCustomPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>, I>>(
    object: I,
  ): GetCustomPasswordlessRegistrationMessageTextResponse {
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordlessRegistrationMessageTextRequest(): GetDefaultPasswordlessRegistrationMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: GetDefaultPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordlessRegistrationMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultPasswordlessRegistrationMessageTextRequest {
    return GetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultPasswordlessRegistrationMessageTextRequest {
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordlessRegistrationMessageTextResponse(): GetDefaultPasswordlessRegistrationMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: GetDefaultPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordlessRegistrationMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultPasswordlessRegistrationMessageTextResponse {
    return GetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultPasswordlessRegistrationMessageTextResponse {
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomPasswordlessRegistrationMessageTextRequest(): SetCustomPasswordlessRegistrationMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: SetCustomPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomPasswordlessRegistrationMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetCustomPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomPasswordlessRegistrationMessageTextRequest>, I>>(
    base?: I,
  ): SetCustomPasswordlessRegistrationMessageTextRequest {
    return SetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomPasswordlessRegistrationMessageTextRequest>, I>>(
    object: I,
  ): SetCustomPasswordlessRegistrationMessageTextRequest {
    const message = createBaseSetCustomPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomPasswordlessRegistrationMessageTextResponse(): SetCustomPasswordlessRegistrationMessageTextResponse {
  return { details: undefined };
}

export const SetCustomPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: SetCustomPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomPasswordlessRegistrationMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomPasswordlessRegistrationMessageTextResponse>, I>>(
    base?: I,
  ): SetCustomPasswordlessRegistrationMessageTextResponse {
    return SetCustomPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomPasswordlessRegistrationMessageTextResponse>, I>>(
    object: I,
  ): SetCustomPasswordlessRegistrationMessageTextResponse {
    const message = createBaseSetCustomPasswordlessRegistrationMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest(): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse(): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    return ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordChangeMessageTextRequest(): GetCustomPasswordChangeMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordChangeMessageTextRequest = {
  encode(message: GetCustomPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordChangeMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordChangeMessageTextRequest>, I>>(
    base?: I,
  ): GetCustomPasswordChangeMessageTextRequest {
    return GetCustomPasswordChangeMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordChangeMessageTextRequest>, I>>(
    object: I,
  ): GetCustomPasswordChangeMessageTextRequest {
    const message = createBaseGetCustomPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordChangeMessageTextResponse(): GetCustomPasswordChangeMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordChangeMessageTextResponse = {
  encode(message: GetCustomPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordChangeMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCustomPasswordChangeMessageTextResponse>, I>>(
    base?: I,
  ): GetCustomPasswordChangeMessageTextResponse {
    return GetCustomPasswordChangeMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCustomPasswordChangeMessageTextResponse>, I>>(
    object: I,
  ): GetCustomPasswordChangeMessageTextResponse {
    const message = createBaseGetCustomPasswordChangeMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordChangeMessageTextRequest(): GetDefaultPasswordChangeMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordChangeMessageTextRequest = {
  encode(message: GetDefaultPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordChangeMessageTextRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordChangeMessageTextRequest>, I>>(
    base?: I,
  ): GetDefaultPasswordChangeMessageTextRequest {
    return GetDefaultPasswordChangeMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordChangeMessageTextRequest>, I>>(
    object: I,
  ): GetDefaultPasswordChangeMessageTextRequest {
    const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordChangeMessageTextResponse(): GetDefaultPasswordChangeMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordChangeMessageTextResponse = {
  encode(message: GetDefaultPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordChangeMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDefaultPasswordChangeMessageTextResponse>, I>>(
    base?: I,
  ): GetDefaultPasswordChangeMessageTextResponse {
    return GetDefaultPasswordChangeMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDefaultPasswordChangeMessageTextResponse>, I>>(
    object: I,
  ): GetDefaultPasswordChangeMessageTextResponse {
    const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomPasswordChangeMessageTextRequest(): SetCustomPasswordChangeMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomPasswordChangeMessageTextRequest = {
  encode(message: SetCustomPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomPasswordChangeMessageTextRequest {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      title: isSet(object.title) ? String(object.title) : "",
      preHeader: isSet(object.preHeader) ? String(object.preHeader) : "",
      subject: isSet(object.subject) ? String(object.subject) : "",
      greeting: isSet(object.greeting) ? String(object.greeting) : "",
      text: isSet(object.text) ? String(object.text) : "",
      buttonText: isSet(object.buttonText) ? String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? String(object.footerText) : "",
    };
  },

  toJSON(message: SetCustomPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomPasswordChangeMessageTextRequest>, I>>(
    base?: I,
  ): SetCustomPasswordChangeMessageTextRequest {
    return SetCustomPasswordChangeMessageTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomPasswordChangeMessageTextRequest>, I>>(
    object: I,
  ): SetCustomPasswordChangeMessageTextRequest {
    const message = createBaseSetCustomPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomPasswordChangeMessageTextResponse(): SetCustomPasswordChangeMessageTextResponse {
  return { details: undefined };
}

export const SetCustomPasswordChangeMessageTextResponse = {
  encode(message: SetCustomPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomPasswordChangeMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCustomPasswordChangeMessageTextResponse>, I>>(
    base?: I,
  ): SetCustomPasswordChangeMessageTextResponse {
    return SetCustomPasswordChangeMessageTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCustomPasswordChangeMessageTextResponse>, I>>(
    object: I,
  ): SetCustomPasswordChangeMessageTextResponse {
    const message = createBaseSetCustomPasswordChangeMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordChangeMessageTextToDefaultRequest(): ResetCustomPasswordChangeMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordChangeMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordChangeMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordChangeMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>, I>>(
    base?: I,
  ): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    return ResetCustomPasswordChangeMessageTextToDefaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>, I>>(
    object: I,
  ): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordChangeMessageTextToDefaultResponse(): ResetCustomPasswordChangeMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordChangeMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordChangeMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordChangeMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>, I>>(
    base?: I,
  ): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    return ResetCustomPasswordChangeMessageTextToDefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>, I>>(
    object: I,
  ): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetOrgIDPByIDRequest(): GetOrgIDPByIDRequest {
  return { id: "" };
}

export const GetOrgIDPByIDRequest = {
  encode(message: GetOrgIDPByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIDPByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIDPByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgIDPByIDRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetOrgIDPByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgIDPByIDRequest>, I>>(base?: I): GetOrgIDPByIDRequest {
    return GetOrgIDPByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgIDPByIDRequest>, I>>(object: I): GetOrgIDPByIDRequest {
    const message = createBaseGetOrgIDPByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetOrgIDPByIDResponse(): GetOrgIDPByIDResponse {
  return { idp: undefined };
}

export const GetOrgIDPByIDResponse = {
  encode(message: GetOrgIDPByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idp !== undefined) {
      IDP.encode(message.idp, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIDPByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIDPByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = IDP.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgIDPByIDResponse {
    return { idp: isSet(object.idp) ? IDP.fromJSON(object.idp) : undefined };
  },

  toJSON(message: GetOrgIDPByIDResponse): unknown {
    const obj: any = {};
    if (message.idp !== undefined) {
      obj.idp = IDP.toJSON(message.idp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrgIDPByIDResponse>, I>>(base?: I): GetOrgIDPByIDResponse {
    return GetOrgIDPByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrgIDPByIDResponse>, I>>(object: I): GetOrgIDPByIDResponse {
    const message = createBaseGetOrgIDPByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? IDP.fromPartial(object.idp) : undefined;
    return message;
  },
};

function createBaseListOrgIDPsRequest(): ListOrgIDPsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListOrgIDPsRequest = {
  encode(message: ListOrgIDPsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      IDPQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgIDPsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(IDPQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgIDPsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? iDPFieldNameFromJSON(object.sortingColumn) : 0,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => IDPQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgIDPsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = iDPFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => IDPQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgIDPsRequest>, I>>(base?: I): ListOrgIDPsRequest {
    return ListOrgIDPsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgIDPsRequest>, I>>(object: I): ListOrgIDPsRequest {
    const message = createBaseListOrgIDPsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => IDPQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIDPQuery(): IDPQuery {
  return { idpIdQuery: undefined, idpNameQuery: undefined, ownerTypeQuery: undefined };
}

export const IDPQuery = {
  encode(message: IDPQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpIdQuery !== undefined) {
      IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpNameQuery !== undefined) {
      IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).ldelim();
    }
    if (message.ownerTypeQuery !== undefined) {
      IDPOwnerTypeQuery.encode(message.ownerTypeQuery, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IDPQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIDPQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ownerTypeQuery = IDPOwnerTypeQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IDPQuery {
    return {
      idpIdQuery: isSet(object.idpIdQuery) ? IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
      idpNameQuery: isSet(object.idpNameQuery) ? IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
      ownerTypeQuery: isSet(object.ownerTypeQuery) ? IDPOwnerTypeQuery.fromJSON(object.ownerTypeQuery) : undefined,
    };
  },

  toJSON(message: IDPQuery): unknown {
    const obj: any = {};
    if (message.idpIdQuery !== undefined) {
      obj.idpIdQuery = IDPIDQuery.toJSON(message.idpIdQuery);
    }
    if (message.idpNameQuery !== undefined) {
      obj.idpNameQuery = IDPNameQuery.toJSON(message.idpNameQuery);
    }
    if (message.ownerTypeQuery !== undefined) {
      obj.ownerTypeQuery = IDPOwnerTypeQuery.toJSON(message.ownerTypeQuery);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IDPQuery>, I>>(base?: I): IDPQuery {
    return IDPQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IDPQuery>, I>>(object: I): IDPQuery {
    const message = createBaseIDPQuery();
    message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
      ? IDPIDQuery.fromPartial(object.idpIdQuery)
      : undefined;
    message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
      ? IDPNameQuery.fromPartial(object.idpNameQuery)
      : undefined;
    message.ownerTypeQuery = (object.ownerTypeQuery !== undefined && object.ownerTypeQuery !== null)
      ? IDPOwnerTypeQuery.fromPartial(object.ownerTypeQuery)
      : undefined;
    return message;
  },
};

function createBaseListOrgIDPsResponse(): ListOrgIDPsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListOrgIDPsResponse = {
  encode(message: ListOrgIDPsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      IDP.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgIDPsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(IDP.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgIDPsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? iDPFieldNameFromJSON(object.sortingColumn) : 0,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => IDP.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgIDPsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = iDPFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => IDP.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrgIDPsResponse>, I>>(base?: I): ListOrgIDPsResponse {
    return ListOrgIDPsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrgIDPsResponse>, I>>(object: I): ListOrgIDPsResponse {
    const message = createBaseListOrgIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => IDP.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOrgOIDCIDPRequest(): AddOrgOIDCIDPRequest {
  return {
    name: "",
    stylingType: 0,
    clientId: "",
    clientSecret: "",
    issuer: "",
    scopes: [],
    displayNameMapping: 0,
    usernameMapping: 0,
    autoRegister: false,
  };
}

export const AddOrgOIDCIDPRequest = {
  encode(message: AddOrgOIDCIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(16).int32(message.stylingType);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.issuer !== "") {
      writer.uint32(42).string(message.issuer);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.displayNameMapping !== 0) {
      writer.uint32(56).int32(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      writer.uint32(64).int32(message.usernameMapping);
    }
    if (message.autoRegister === true) {
      writer.uint32(72).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgOIDCIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgOIDCIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.displayNameMapping = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.usernameMapping = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgOIDCIDPRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      displayNameMapping: isSet(object.displayNameMapping) ? oIDCMappingFieldFromJSON(object.displayNameMapping) : 0,
      usernameMapping: isSet(object.usernameMapping) ? oIDCMappingFieldFromJSON(object.usernameMapping) : 0,
      autoRegister: isSet(object.autoRegister) ? Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: AddOrgOIDCIDPRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.displayNameMapping !== 0) {
      obj.displayNameMapping = oIDCMappingFieldToJSON(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      obj.usernameMapping = oIDCMappingFieldToJSON(message.usernameMapping);
    }
    if (message.autoRegister === true) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgOIDCIDPRequest>, I>>(base?: I): AddOrgOIDCIDPRequest {
    return AddOrgOIDCIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgOIDCIDPRequest>, I>>(object: I): AddOrgOIDCIDPRequest {
    const message = createBaseAddOrgOIDCIDPRequest();
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.issuer = object.issuer ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.displayNameMapping = object.displayNameMapping ?? 0;
    message.usernameMapping = object.usernameMapping ?? 0;
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseAddOrgOIDCIDPResponse(): AddOrgOIDCIDPResponse {
  return { details: undefined, idpId: "" };
}

export const AddOrgOIDCIDPResponse = {
  encode(message: AddOrgOIDCIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgOIDCIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgOIDCIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgOIDCIDPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
    };
  },

  toJSON(message: AddOrgOIDCIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgOIDCIDPResponse>, I>>(base?: I): AddOrgOIDCIDPResponse {
    return AddOrgOIDCIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgOIDCIDPResponse>, I>>(object: I): AddOrgOIDCIDPResponse {
    const message = createBaseAddOrgOIDCIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseAddOrgJWTIDPRequest(): AddOrgJWTIDPRequest {
  return {
    name: "",
    stylingType: 0,
    jwtEndpoint: "",
    issuer: "",
    keysEndpoint: "",
    headerName: "",
    autoRegister: false,
  };
}

export const AddOrgJWTIDPRequest = {
  encode(message: AddOrgJWTIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(16).int32(message.stylingType);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(26).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(42).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(50).string(message.headerName);
    }
    if (message.autoRegister === true) {
      writer.uint32(56).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgJWTIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgJWTIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgJWTIDPRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      jwtEndpoint: isSet(object.jwtEndpoint) ? String(object.jwtEndpoint) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? String(object.headerName) : "",
      autoRegister: isSet(object.autoRegister) ? Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: AddOrgJWTIDPRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.autoRegister === true) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgJWTIDPRequest>, I>>(base?: I): AddOrgJWTIDPRequest {
    return AddOrgJWTIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgJWTIDPRequest>, I>>(object: I): AddOrgJWTIDPRequest {
    const message = createBaseAddOrgJWTIDPRequest();
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseAddOrgJWTIDPResponse(): AddOrgJWTIDPResponse {
  return { details: undefined, idpId: "" };
}

export const AddOrgJWTIDPResponse = {
  encode(message: AddOrgJWTIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgJWTIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgJWTIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrgJWTIDPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
    };
  },

  toJSON(message: AddOrgJWTIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddOrgJWTIDPResponse>, I>>(base?: I): AddOrgJWTIDPResponse {
    return AddOrgJWTIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddOrgJWTIDPResponse>, I>>(object: I): AddOrgJWTIDPResponse {
    const message = createBaseAddOrgJWTIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseDeactivateOrgIDPRequest(): DeactivateOrgIDPRequest {
  return { idpId: "" };
}

export const DeactivateOrgIDPRequest = {
  encode(message: DeactivateOrgIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateOrgIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateOrgIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateOrgIDPRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: DeactivateOrgIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateOrgIDPRequest>, I>>(base?: I): DeactivateOrgIDPRequest {
    return DeactivateOrgIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateOrgIDPRequest>, I>>(object: I): DeactivateOrgIDPRequest {
    const message = createBaseDeactivateOrgIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseDeactivateOrgIDPResponse(): DeactivateOrgIDPResponse {
  return { details: undefined };
}

export const DeactivateOrgIDPResponse = {
  encode(message: DeactivateOrgIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateOrgIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateOrgIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateOrgIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateOrgIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateOrgIDPResponse>, I>>(base?: I): DeactivateOrgIDPResponse {
    return DeactivateOrgIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateOrgIDPResponse>, I>>(object: I): DeactivateOrgIDPResponse {
    const message = createBaseDeactivateOrgIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateOrgIDPRequest(): ReactivateOrgIDPRequest {
  return { idpId: "" };
}

export const ReactivateOrgIDPRequest = {
  encode(message: ReactivateOrgIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateOrgIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateOrgIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateOrgIDPRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: ReactivateOrgIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateOrgIDPRequest>, I>>(base?: I): ReactivateOrgIDPRequest {
    return ReactivateOrgIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateOrgIDPRequest>, I>>(object: I): ReactivateOrgIDPRequest {
    const message = createBaseReactivateOrgIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseReactivateOrgIDPResponse(): ReactivateOrgIDPResponse {
  return { details: undefined };
}

export const ReactivateOrgIDPResponse = {
  encode(message: ReactivateOrgIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateOrgIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateOrgIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateOrgIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateOrgIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateOrgIDPResponse>, I>>(base?: I): ReactivateOrgIDPResponse {
    return ReactivateOrgIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateOrgIDPResponse>, I>>(object: I): ReactivateOrgIDPResponse {
    const message = createBaseReactivateOrgIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgIDPRequest(): RemoveOrgIDPRequest {
  return { idpId: "" };
}

export const RemoveOrgIDPRequest = {
  encode(message: RemoveOrgIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgIDPRequest {
    return { idpId: isSet(object.idpId) ? String(object.idpId) : "" };
  },

  toJSON(message: RemoveOrgIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgIDPRequest>, I>>(base?: I): RemoveOrgIDPRequest {
    return RemoveOrgIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgIDPRequest>, I>>(object: I): RemoveOrgIDPRequest {
    const message = createBaseRemoveOrgIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseRemoveOrgIDPResponse(): RemoveOrgIDPResponse {
  return {};
}

export const RemoveOrgIDPResponse = {
  encode(_: RemoveOrgIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveOrgIDPResponse {
    return {};
  },

  toJSON(_: RemoveOrgIDPResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveOrgIDPResponse>, I>>(base?: I): RemoveOrgIDPResponse {
    return RemoveOrgIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveOrgIDPResponse>, I>>(_: I): RemoveOrgIDPResponse {
    const message = createBaseRemoveOrgIDPResponse();
    return message;
  },
};

function createBaseUpdateOrgIDPRequest(): UpdateOrgIDPRequest {
  return { idpId: "", name: "", stylingType: 0, autoRegister: false };
}

export const UpdateOrgIDPRequest = {
  encode(message: UpdateOrgIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(24).int32(message.stylingType);
    }
    if (message.autoRegister === true) {
      writer.uint32(32).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIDPRequest {
    return {
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      autoRegister: isSet(object.autoRegister) ? Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: UpdateOrgIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.autoRegister === true) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgIDPRequest>, I>>(base?: I): UpdateOrgIDPRequest {
    return UpdateOrgIDPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgIDPRequest>, I>>(object: I): UpdateOrgIDPRequest {
    const message = createBaseUpdateOrgIDPRequest();
    message.idpId = object.idpId ?? "";
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseUpdateOrgIDPResponse(): UpdateOrgIDPResponse {
  return { details: undefined };
}

export const UpdateOrgIDPResponse = {
  encode(message: UpdateOrgIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOrgIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgIDPResponse>, I>>(base?: I): UpdateOrgIDPResponse {
    return UpdateOrgIDPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgIDPResponse>, I>>(object: I): UpdateOrgIDPResponse {
    const message = createBaseUpdateOrgIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgIDPOIDCConfigRequest(): UpdateOrgIDPOIDCConfigRequest {
  return {
    idpId: "",
    clientId: "",
    clientSecret: "",
    issuer: "",
    scopes: [],
    displayNameMapping: 0,
    usernameMapping: 0,
  };
}

export const UpdateOrgIDPOIDCConfigRequest = {
  encode(message: UpdateOrgIDPOIDCConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.displayNameMapping !== 0) {
      writer.uint32(48).int32(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      writer.uint32(56).int32(message.usernameMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPOIDCConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPOIDCConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.displayNameMapping = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.usernameMapping = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIDPOIDCConfigRequest {
    return {
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      displayNameMapping: isSet(object.displayNameMapping) ? oIDCMappingFieldFromJSON(object.displayNameMapping) : 0,
      usernameMapping: isSet(object.usernameMapping) ? oIDCMappingFieldFromJSON(object.usernameMapping) : 0,
    };
  },

  toJSON(message: UpdateOrgIDPOIDCConfigRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.displayNameMapping !== 0) {
      obj.displayNameMapping = oIDCMappingFieldToJSON(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      obj.usernameMapping = oIDCMappingFieldToJSON(message.usernameMapping);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgIDPOIDCConfigRequest>, I>>(base?: I): UpdateOrgIDPOIDCConfigRequest {
    return UpdateOrgIDPOIDCConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgIDPOIDCConfigRequest>, I>>(
    object: I,
  ): UpdateOrgIDPOIDCConfigRequest {
    const message = createBaseUpdateOrgIDPOIDCConfigRequest();
    message.idpId = object.idpId ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.issuer = object.issuer ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.displayNameMapping = object.displayNameMapping ?? 0;
    message.usernameMapping = object.usernameMapping ?? 0;
    return message;
  },
};

function createBaseUpdateOrgIDPOIDCConfigResponse(): UpdateOrgIDPOIDCConfigResponse {
  return { details: undefined };
}

export const UpdateOrgIDPOIDCConfigResponse = {
  encode(message: UpdateOrgIDPOIDCConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPOIDCConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPOIDCConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIDPOIDCConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOrgIDPOIDCConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgIDPOIDCConfigResponse>, I>>(base?: I): UpdateOrgIDPOIDCConfigResponse {
    return UpdateOrgIDPOIDCConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgIDPOIDCConfigResponse>, I>>(
    object: I,
  ): UpdateOrgIDPOIDCConfigResponse {
    const message = createBaseUpdateOrgIDPOIDCConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgIDPJWTConfigRequest(): UpdateOrgIDPJWTConfigRequest {
  return { idpId: "", jwtEndpoint: "", issuer: "", keysEndpoint: "", headerName: "" };
}

export const UpdateOrgIDPJWTConfigRequest = {
  encode(message: UpdateOrgIDPJWTConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(18).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(34).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(42).string(message.headerName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPJWTConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPJWTConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headerName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIDPJWTConfigRequest {
    return {
      idpId: isSet(object.idpId) ? String(object.idpId) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? String(object.jwtEndpoint) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? String(object.headerName) : "",
    };
  },

  toJSON(message: UpdateOrgIDPJWTConfigRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgIDPJWTConfigRequest>, I>>(base?: I): UpdateOrgIDPJWTConfigRequest {
    return UpdateOrgIDPJWTConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgIDPJWTConfigRequest>, I>>(object: I): UpdateOrgIDPJWTConfigRequest {
    const message = createBaseUpdateOrgIDPJWTConfigRequest();
    message.idpId = object.idpId ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    return message;
  },
};

function createBaseUpdateOrgIDPJWTConfigResponse(): UpdateOrgIDPJWTConfigResponse {
  return { details: undefined };
}

export const UpdateOrgIDPJWTConfigResponse = {
  encode(message: UpdateOrgIDPJWTConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPJWTConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPJWTConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIDPJWTConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOrgIDPJWTConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrgIDPJWTConfigResponse>, I>>(base?: I): UpdateOrgIDPJWTConfigResponse {
    return UpdateOrgIDPJWTConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrgIDPJWTConfigResponse>, I>>(
    object: I,
  ): UpdateOrgIDPJWTConfigResponse {
    const message = createBaseUpdateOrgIDPJWTConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProvidersRequest(): ListProvidersRequest {
  return { query: undefined, queries: [] };
}

export const ListProvidersRequest = {
  encode(message: ListProvidersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProviderQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProvidersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(ProviderQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProvidersRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => ProviderQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProvidersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => ProviderQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProvidersRequest>, I>>(base?: I): ListProvidersRequest {
    return ListProvidersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProvidersRequest>, I>>(object: I): ListProvidersRequest {
    const message = createBaseListProvidersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProviderQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProviderQuery(): ProviderQuery {
  return { idpIdQuery: undefined, idpNameQuery: undefined, ownerTypeQuery: undefined };
}

export const ProviderQuery = {
  encode(message: ProviderQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpIdQuery !== undefined) {
      IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpNameQuery !== undefined) {
      IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).ldelim();
    }
    if (message.ownerTypeQuery !== undefined) {
      IDPOwnerTypeQuery.encode(message.ownerTypeQuery, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProviderQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProviderQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ownerTypeQuery = IDPOwnerTypeQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProviderQuery {
    return {
      idpIdQuery: isSet(object.idpIdQuery) ? IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
      idpNameQuery: isSet(object.idpNameQuery) ? IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
      ownerTypeQuery: isSet(object.ownerTypeQuery) ? IDPOwnerTypeQuery.fromJSON(object.ownerTypeQuery) : undefined,
    };
  },

  toJSON(message: ProviderQuery): unknown {
    const obj: any = {};
    if (message.idpIdQuery !== undefined) {
      obj.idpIdQuery = IDPIDQuery.toJSON(message.idpIdQuery);
    }
    if (message.idpNameQuery !== undefined) {
      obj.idpNameQuery = IDPNameQuery.toJSON(message.idpNameQuery);
    }
    if (message.ownerTypeQuery !== undefined) {
      obj.ownerTypeQuery = IDPOwnerTypeQuery.toJSON(message.ownerTypeQuery);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProviderQuery>, I>>(base?: I): ProviderQuery {
    return ProviderQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProviderQuery>, I>>(object: I): ProviderQuery {
    const message = createBaseProviderQuery();
    message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
      ? IDPIDQuery.fromPartial(object.idpIdQuery)
      : undefined;
    message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
      ? IDPNameQuery.fromPartial(object.idpNameQuery)
      : undefined;
    message.ownerTypeQuery = (object.ownerTypeQuery !== undefined && object.ownerTypeQuery !== null)
      ? IDPOwnerTypeQuery.fromPartial(object.ownerTypeQuery)
      : undefined;
    return message;
  },
};

function createBaseListProvidersResponse(): ListProvidersResponse {
  return { details: undefined, result: [] };
}

export const ListProvidersResponse = {
  encode(message: ListProvidersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Provider.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProvidersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Provider.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProvidersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Provider.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProvidersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Provider.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProvidersResponse>, I>>(base?: I): ListProvidersResponse {
    return ListProvidersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProvidersResponse>, I>>(object: I): ListProvidersResponse {
    const message = createBaseListProvidersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Provider.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProviderByIDRequest(): GetProviderByIDRequest {
  return { id: "" };
}

export const GetProviderByIDRequest = {
  encode(message: GetProviderByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProviderByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProviderByIDRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetProviderByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProviderByIDRequest>, I>>(base?: I): GetProviderByIDRequest {
    return GetProviderByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProviderByIDRequest>, I>>(object: I): GetProviderByIDRequest {
    const message = createBaseGetProviderByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetProviderByIDResponse(): GetProviderByIDResponse {
  return { idp: undefined };
}

export const GetProviderByIDResponse = {
  encode(message: GetProviderByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idp !== undefined) {
      Provider.encode(message.idp, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProviderByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = Provider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProviderByIDResponse {
    return { idp: isSet(object.idp) ? Provider.fromJSON(object.idp) : undefined };
  },

  toJSON(message: GetProviderByIDResponse): unknown {
    const obj: any = {};
    if (message.idp !== undefined) {
      obj.idp = Provider.toJSON(message.idp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProviderByIDResponse>, I>>(base?: I): GetProviderByIDResponse {
    return GetProviderByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProviderByIDResponse>, I>>(object: I): GetProviderByIDResponse {
    const message = createBaseGetProviderByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? Provider.fromPartial(object.idp) : undefined;
    return message;
  },
};

function createBaseAddGenericOAuthProviderRequest(): AddGenericOAuthProviderRequest {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    idAttribute: "",
    providerOptions: undefined,
  };
}

export const AddGenericOAuthProviderRequest = {
  encode(message: AddGenericOAuthProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(34).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(42).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(50).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(66).string(message.idAttribute);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOAuthProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOAuthProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOAuthProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? String(object.userEndpoint) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      idAttribute: isSet(object.idAttribute) ? String(object.idAttribute) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGenericOAuthProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.idAttribute !== "") {
      obj.idAttribute = message.idAttribute;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGenericOAuthProviderRequest>, I>>(base?: I): AddGenericOAuthProviderRequest {
    return AddGenericOAuthProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGenericOAuthProviderRequest>, I>>(
    object: I,
  ): AddGenericOAuthProviderRequest {
    const message = createBaseAddGenericOAuthProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGenericOAuthProviderResponse(): AddGenericOAuthProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGenericOAuthProviderResponse = {
  encode(message: AddGenericOAuthProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOAuthProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOAuthProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOAuthProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGenericOAuthProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGenericOAuthProviderResponse>, I>>(base?: I): AddGenericOAuthProviderResponse {
    return AddGenericOAuthProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGenericOAuthProviderResponse>, I>>(
    object: I,
  ): AddGenericOAuthProviderResponse {
    const message = createBaseAddGenericOAuthProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGenericOAuthProviderRequest(): UpdateGenericOAuthProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    idAttribute: "",
    providerOptions: undefined,
  };
}

export const UpdateGenericOAuthProviderRequest = {
  encode(message: UpdateGenericOAuthProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(42).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(58).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(66).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(74).string(message.idAttribute);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOAuthProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOAuthProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOAuthProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? String(object.userEndpoint) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      idAttribute: isSet(object.idAttribute) ? String(object.idAttribute) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGenericOAuthProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.idAttribute !== "") {
      obj.idAttribute = message.idAttribute;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGenericOAuthProviderRequest>, I>>(
    base?: I,
  ): UpdateGenericOAuthProviderRequest {
    return UpdateGenericOAuthProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGenericOAuthProviderRequest>, I>>(
    object: I,
  ): UpdateGenericOAuthProviderRequest {
    const message = createBaseUpdateGenericOAuthProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGenericOAuthProviderResponse(): UpdateGenericOAuthProviderResponse {
  return { details: undefined };
}

export const UpdateGenericOAuthProviderResponse = {
  encode(message: UpdateGenericOAuthProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOAuthProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOAuthProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOAuthProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGenericOAuthProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGenericOAuthProviderResponse>, I>>(
    base?: I,
  ): UpdateGenericOAuthProviderResponse {
    return UpdateGenericOAuthProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGenericOAuthProviderResponse>, I>>(
    object: I,
  ): UpdateGenericOAuthProviderResponse {
    const message = createBaseUpdateGenericOAuthProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGenericOIDCProviderRequest(): AddGenericOIDCProviderRequest {
  return {
    name: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    providerOptions: undefined,
    isIdTokenMapping: false,
  };
}

export const AddGenericOIDCProviderRequest = {
  encode(message: AddGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    if (message.isIdTokenMapping === true) {
      writer.uint32(56).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOIDCProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
      isIdTokenMapping: isSet(object.isIdTokenMapping) ? Boolean(object.isIdTokenMapping) : false,
    };
  },

  toJSON(message: AddGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    if (message.isIdTokenMapping === true) {
      obj.isIdTokenMapping = message.isIdTokenMapping;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGenericOIDCProviderRequest>, I>>(base?: I): AddGenericOIDCProviderRequest {
    return AddGenericOIDCProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGenericOIDCProviderRequest>, I>>(
    object: I,
  ): AddGenericOIDCProviderRequest {
    const message = createBaseAddGenericOIDCProviderRequest();
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseAddGenericOIDCProviderResponse(): AddGenericOIDCProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGenericOIDCProviderResponse = {
  encode(message: AddGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOIDCProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGenericOIDCProviderResponse>, I>>(base?: I): AddGenericOIDCProviderResponse {
    return AddGenericOIDCProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGenericOIDCProviderResponse>, I>>(
    object: I,
  ): AddGenericOIDCProviderResponse {
    const message = createBaseAddGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGenericOIDCProviderRequest(): UpdateGenericOIDCProviderRequest {
  return {
    id: "",
    name: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    providerOptions: undefined,
    isIdTokenMapping: false,
  };
}

export const UpdateGenericOIDCProviderRequest = {
  encode(message: UpdateGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(34).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(42).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    if (message.isIdTokenMapping === true) {
      writer.uint32(64).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOIDCProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
      isIdTokenMapping: isSet(object.isIdTokenMapping) ? Boolean(object.isIdTokenMapping) : false,
    };
  },

  toJSON(message: UpdateGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    if (message.isIdTokenMapping === true) {
      obj.isIdTokenMapping = message.isIdTokenMapping;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGenericOIDCProviderRequest>, I>>(
    base?: I,
  ): UpdateGenericOIDCProviderRequest {
    return UpdateGenericOIDCProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGenericOIDCProviderRequest>, I>>(
    object: I,
  ): UpdateGenericOIDCProviderRequest {
    const message = createBaseUpdateGenericOIDCProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseUpdateGenericOIDCProviderResponse(): UpdateGenericOIDCProviderResponse {
  return { details: undefined };
}

export const UpdateGenericOIDCProviderResponse = {
  encode(message: UpdateGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOIDCProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGenericOIDCProviderResponse>, I>>(
    base?: I,
  ): UpdateGenericOIDCProviderResponse {
    return UpdateGenericOIDCProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGenericOIDCProviderResponse>, I>>(
    object: I,
  ): UpdateGenericOIDCProviderResponse {
    const message = createBaseUpdateGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseMigrateGenericOIDCProviderRequest(): MigrateGenericOIDCProviderRequest {
  return { id: "", azure: undefined, google: undefined };
}

export const MigrateGenericOIDCProviderRequest = {
  encode(message: MigrateGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.azure !== undefined) {
      AddAzureADProviderRequest.encode(message.azure, writer.uint32(18).fork()).ldelim();
    }
    if (message.google !== undefined) {
      AddGoogleProviderRequest.encode(message.google, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MigrateGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.azure = AddAzureADProviderRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.google = AddGoogleProviderRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateGenericOIDCProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      azure: isSet(object.azure) ? AddAzureADProviderRequest.fromJSON(object.azure) : undefined,
      google: isSet(object.google) ? AddGoogleProviderRequest.fromJSON(object.google) : undefined,
    };
  },

  toJSON(message: MigrateGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.azure !== undefined) {
      obj.azure = AddAzureADProviderRequest.toJSON(message.azure);
    }
    if (message.google !== undefined) {
      obj.google = AddGoogleProviderRequest.toJSON(message.google);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigrateGenericOIDCProviderRequest>, I>>(
    base?: I,
  ): MigrateGenericOIDCProviderRequest {
    return MigrateGenericOIDCProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigrateGenericOIDCProviderRequest>, I>>(
    object: I,
  ): MigrateGenericOIDCProviderRequest {
    const message = createBaseMigrateGenericOIDCProviderRequest();
    message.id = object.id ?? "";
    message.azure = (object.azure !== undefined && object.azure !== null)
      ? AddAzureADProviderRequest.fromPartial(object.azure)
      : undefined;
    message.google = (object.google !== undefined && object.google !== null)
      ? AddGoogleProviderRequest.fromPartial(object.google)
      : undefined;
    return message;
  },
};

function createBaseMigrateGenericOIDCProviderResponse(): MigrateGenericOIDCProviderResponse {
  return { details: undefined };
}

export const MigrateGenericOIDCProviderResponse = {
  encode(message: MigrateGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MigrateGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateGenericOIDCProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: MigrateGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigrateGenericOIDCProviderResponse>, I>>(
    base?: I,
  ): MigrateGenericOIDCProviderResponse {
    return MigrateGenericOIDCProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigrateGenericOIDCProviderResponse>, I>>(
    object: I,
  ): MigrateGenericOIDCProviderResponse {
    const message = createBaseMigrateGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddJWTProviderRequest(): AddJWTProviderRequest {
  return { name: "", issuer: "", jwtEndpoint: "", keysEndpoint: "", headerName: "", providerOptions: undefined };
}

export const AddJWTProviderRequest = {
  encode(message: AddJWTProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(26).string(message.jwtEndpoint);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(34).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(42).string(message.headerName);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddJWTProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? String(object.jwtEndpoint) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? String(object.headerName) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddJWTProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddJWTProviderRequest>, I>>(base?: I): AddJWTProviderRequest {
    return AddJWTProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddJWTProviderRequest>, I>>(object: I): AddJWTProviderRequest {
    const message = createBaseAddJWTProviderRequest();
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddJWTProviderResponse(): AddJWTProviderResponse {
  return { details: undefined, id: "" };
}

export const AddJWTProviderResponse = {
  encode(message: AddJWTProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddJWTProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddJWTProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddJWTProviderResponse>, I>>(base?: I): AddJWTProviderResponse {
    return AddJWTProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddJWTProviderResponse>, I>>(object: I): AddJWTProviderResponse {
    const message = createBaseAddJWTProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateJWTProviderRequest(): UpdateJWTProviderRequest {
  return {
    id: "",
    name: "",
    issuer: "",
    jwtEndpoint: "",
    keysEndpoint: "",
    headerName: "",
    providerOptions: undefined,
  };
}

export const UpdateJWTProviderRequest = {
  encode(message: UpdateJWTProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(34).string(message.jwtEndpoint);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(42).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(50).string(message.headerName);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateJWTProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJWTProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJWTProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? String(object.jwtEndpoint) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? String(object.headerName) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateJWTProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJWTProviderRequest>, I>>(base?: I): UpdateJWTProviderRequest {
    return UpdateJWTProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJWTProviderRequest>, I>>(object: I): UpdateJWTProviderRequest {
    const message = createBaseUpdateJWTProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateJWTProviderResponse(): UpdateJWTProviderResponse {
  return { details: undefined };
}

export const UpdateJWTProviderResponse = {
  encode(message: UpdateJWTProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateJWTProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJWTProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJWTProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateJWTProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJWTProviderResponse>, I>>(base?: I): UpdateJWTProviderResponse {
    return UpdateJWTProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJWTProviderResponse>, I>>(object: I): UpdateJWTProviderResponse {
    const message = createBaseUpdateJWTProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddAzureADProviderRequest(): AddAzureADProviderRequest {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    tenant: undefined,
    emailVerified: false,
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddAzureADProviderRequest = {
  encode(message: AddAzureADProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(34).fork()).ldelim();
    }
    if (message.emailVerified === true) {
      writer.uint32(40).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAzureADProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAzureADProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAzureADProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
      emailVerified: isSet(object.emailVerified) ? Boolean(object.emailVerified) : false,
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddAzureADProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.tenant !== undefined) {
      obj.tenant = AzureADTenant.toJSON(message.tenant);
    }
    if (message.emailVerified === true) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAzureADProviderRequest>, I>>(base?: I): AddAzureADProviderRequest {
    return AddAzureADProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAzureADProviderRequest>, I>>(object: I): AddAzureADProviderRequest {
    const message = createBaseAddAzureADProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddAzureADProviderResponse(): AddAzureADProviderResponse {
  return { details: undefined, id: "" };
}

export const AddAzureADProviderResponse = {
  encode(message: AddAzureADProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAzureADProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAzureADProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAzureADProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddAzureADProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAzureADProviderResponse>, I>>(base?: I): AddAzureADProviderResponse {
    return AddAzureADProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAzureADProviderResponse>, I>>(object: I): AddAzureADProviderResponse {
    const message = createBaseAddAzureADProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateAzureADProviderRequest(): UpdateAzureADProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    tenant: undefined,
    emailVerified: false,
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateAzureADProviderRequest = {
  encode(message: UpdateAzureADProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(42).fork()).ldelim();
    }
    if (message.emailVerified === true) {
      writer.uint32(48).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAzureADProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureADProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAzureADProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
      emailVerified: isSet(object.emailVerified) ? Boolean(object.emailVerified) : false,
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateAzureADProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.tenant !== undefined) {
      obj.tenant = AzureADTenant.toJSON(message.tenant);
    }
    if (message.emailVerified === true) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAzureADProviderRequest>, I>>(base?: I): UpdateAzureADProviderRequest {
    return UpdateAzureADProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAzureADProviderRequest>, I>>(object: I): UpdateAzureADProviderRequest {
    const message = createBaseUpdateAzureADProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateAzureADProviderResponse(): UpdateAzureADProviderResponse {
  return { details: undefined };
}

export const UpdateAzureADProviderResponse = {
  encode(message: UpdateAzureADProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAzureADProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureADProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAzureADProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateAzureADProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAzureADProviderResponse>, I>>(base?: I): UpdateAzureADProviderResponse {
    return UpdateAzureADProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAzureADProviderResponse>, I>>(
    object: I,
  ): UpdateAzureADProviderResponse {
    const message = createBaseUpdateAzureADProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubProviderRequest(): AddGitHubProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitHubProviderRequest = {
  encode(message: AddGitHubProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitHubProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitHubProviderRequest>, I>>(base?: I): AddGitHubProviderRequest {
    return AddGitHubProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitHubProviderRequest>, I>>(object: I): AddGitHubProviderRequest {
    const message = createBaseAddGitHubProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubProviderResponse(): AddGitHubProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitHubProviderResponse = {
  encode(message: AddGitHubProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGitHubProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitHubProviderResponse>, I>>(base?: I): AddGitHubProviderResponse {
    return AddGitHubProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitHubProviderResponse>, I>>(object: I): AddGitHubProviderResponse {
    const message = createBaseAddGitHubProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitHubProviderRequest(): UpdateGitHubProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitHubProviderRequest = {
  encode(message: UpdateGitHubProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitHubProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitHubProviderRequest>, I>>(base?: I): UpdateGitHubProviderRequest {
    return UpdateGitHubProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitHubProviderRequest>, I>>(object: I): UpdateGitHubProviderRequest {
    const message = createBaseUpdateGitHubProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitHubProviderResponse(): UpdateGitHubProviderResponse {
  return { details: undefined };
}

export const UpdateGitHubProviderResponse = {
  encode(message: UpdateGitHubProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitHubProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitHubProviderResponse>, I>>(base?: I): UpdateGitHubProviderResponse {
    return UpdateGitHubProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitHubProviderResponse>, I>>(object: I): UpdateGitHubProviderResponse {
    const message = createBaseUpdateGitHubProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubEnterpriseServerProviderRequest(): AddGitHubEnterpriseServerProviderRequest {
  return {
    clientId: "",
    name: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddGitHubEnterpriseServerProviderRequest = {
  encode(message: AddGitHubEnterpriseServerProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(34).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(42).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(50).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubEnterpriseServerProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubEnterpriseServerProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubEnterpriseServerProviderRequest {
    return {
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? String(object.userEndpoint) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitHubEnterpriseServerProviderRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitHubEnterpriseServerProviderRequest>, I>>(
    base?: I,
  ): AddGitHubEnterpriseServerProviderRequest {
    return AddGitHubEnterpriseServerProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitHubEnterpriseServerProviderRequest>, I>>(
    object: I,
  ): AddGitHubEnterpriseServerProviderRequest {
    const message = createBaseAddGitHubEnterpriseServerProviderRequest();
    message.clientId = object.clientId ?? "";
    message.name = object.name ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubEnterpriseServerProviderResponse(): AddGitHubEnterpriseServerProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitHubEnterpriseServerProviderResponse = {
  encode(message: AddGitHubEnterpriseServerProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubEnterpriseServerProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubEnterpriseServerProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubEnterpriseServerProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGitHubEnterpriseServerProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitHubEnterpriseServerProviderResponse>, I>>(
    base?: I,
  ): AddGitHubEnterpriseServerProviderResponse {
    return AddGitHubEnterpriseServerProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitHubEnterpriseServerProviderResponse>, I>>(
    object: I,
  ): AddGitHubEnterpriseServerProviderResponse {
    const message = createBaseAddGitHubEnterpriseServerProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitHubEnterpriseServerProviderRequest(): UpdateGitHubEnterpriseServerProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateGitHubEnterpriseServerProviderRequest = {
  encode(message: UpdateGitHubEnterpriseServerProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(42).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(58).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(66).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubEnterpriseServerProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubEnterpriseServerProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? String(object.userEndpoint) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitHubEnterpriseServerProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>, I>>(
    base?: I,
  ): UpdateGitHubEnterpriseServerProviderRequest {
    return UpdateGitHubEnterpriseServerProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>, I>>(
    object: I,
  ): UpdateGitHubEnterpriseServerProviderRequest {
    const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitHubEnterpriseServerProviderResponse(): UpdateGitHubEnterpriseServerProviderResponse {
  return { details: undefined };
}

export const UpdateGitHubEnterpriseServerProviderResponse = {
  encode(message: UpdateGitHubEnterpriseServerProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubEnterpriseServerProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubEnterpriseServerProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitHubEnterpriseServerProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>, I>>(
    base?: I,
  ): UpdateGitHubEnterpriseServerProviderResponse {
    return UpdateGitHubEnterpriseServerProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>, I>>(
    object: I,
  ): UpdateGitHubEnterpriseServerProviderResponse {
    const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabProviderRequest(): AddGitLabProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitLabProviderRequest = {
  encode(message: AddGitLabProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitLabProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitLabProviderRequest>, I>>(base?: I): AddGitLabProviderRequest {
    return AddGitLabProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitLabProviderRequest>, I>>(object: I): AddGitLabProviderRequest {
    const message = createBaseAddGitLabProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabProviderResponse(): AddGitLabProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitLabProviderResponse = {
  encode(message: AddGitLabProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGitLabProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitLabProviderResponse>, I>>(base?: I): AddGitLabProviderResponse {
    return AddGitLabProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitLabProviderResponse>, I>>(object: I): AddGitLabProviderResponse {
    const message = createBaseAddGitLabProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitLabProviderRequest(): UpdateGitLabProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitLabProviderRequest = {
  encode(message: UpdateGitLabProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitLabProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitLabProviderRequest>, I>>(base?: I): UpdateGitLabProviderRequest {
    return UpdateGitLabProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitLabProviderRequest>, I>>(object: I): UpdateGitLabProviderRequest {
    const message = createBaseUpdateGitLabProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitLabProviderResponse(): UpdateGitLabProviderResponse {
  return { details: undefined };
}

export const UpdateGitLabProviderResponse = {
  encode(message: UpdateGitLabProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitLabProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitLabProviderResponse>, I>>(base?: I): UpdateGitLabProviderResponse {
    return UpdateGitLabProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitLabProviderResponse>, I>>(object: I): UpdateGitLabProviderResponse {
    const message = createBaseUpdateGitLabProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabSelfHostedProviderRequest(): AddGitLabSelfHostedProviderRequest {
  return { issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitLabSelfHostedProviderRequest = {
  encode(message: AddGitLabSelfHostedProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabSelfHostedProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabSelfHostedProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabSelfHostedProviderRequest {
    return {
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitLabSelfHostedProviderRequest): unknown {
    const obj: any = {};
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitLabSelfHostedProviderRequest>, I>>(
    base?: I,
  ): AddGitLabSelfHostedProviderRequest {
    return AddGitLabSelfHostedProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitLabSelfHostedProviderRequest>, I>>(
    object: I,
  ): AddGitLabSelfHostedProviderRequest {
    const message = createBaseAddGitLabSelfHostedProviderRequest();
    message.issuer = object.issuer ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabSelfHostedProviderResponse(): AddGitLabSelfHostedProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitLabSelfHostedProviderResponse = {
  encode(message: AddGitLabSelfHostedProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabSelfHostedProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabSelfHostedProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabSelfHostedProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGitLabSelfHostedProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGitLabSelfHostedProviderResponse>, I>>(
    base?: I,
  ): AddGitLabSelfHostedProviderResponse {
    return AddGitLabSelfHostedProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGitLabSelfHostedProviderResponse>, I>>(
    object: I,
  ): AddGitLabSelfHostedProviderResponse {
    const message = createBaseAddGitLabSelfHostedProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitLabSelfHostedProviderRequest(): UpdateGitLabSelfHostedProviderRequest {
  return { id: "", issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitLabSelfHostedProviderRequest = {
  encode(message: UpdateGitLabSelfHostedProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(34).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(42).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabSelfHostedProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabSelfHostedProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabSelfHostedProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      issuer: isSet(object.issuer) ? String(object.issuer) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitLabSelfHostedProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitLabSelfHostedProviderRequest>, I>>(
    base?: I,
  ): UpdateGitLabSelfHostedProviderRequest {
    return UpdateGitLabSelfHostedProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitLabSelfHostedProviderRequest>, I>>(
    object: I,
  ): UpdateGitLabSelfHostedProviderRequest {
    const message = createBaseUpdateGitLabSelfHostedProviderRequest();
    message.id = object.id ?? "";
    message.issuer = object.issuer ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitLabSelfHostedProviderResponse(): UpdateGitLabSelfHostedProviderResponse {
  return { details: undefined };
}

export const UpdateGitLabSelfHostedProviderResponse = {
  encode(message: UpdateGitLabSelfHostedProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabSelfHostedProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabSelfHostedProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabSelfHostedProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitLabSelfHostedProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGitLabSelfHostedProviderResponse>, I>>(
    base?: I,
  ): UpdateGitLabSelfHostedProviderResponse {
    return UpdateGitLabSelfHostedProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGitLabSelfHostedProviderResponse>, I>>(
    object: I,
  ): UpdateGitLabSelfHostedProviderResponse {
    const message = createBaseUpdateGitLabSelfHostedProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGoogleProviderRequest(): AddGoogleProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGoogleProviderRequest = {
  encode(message: AddGoogleProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGoogleProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGoogleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGoogleProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGoogleProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGoogleProviderRequest>, I>>(base?: I): AddGoogleProviderRequest {
    return AddGoogleProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGoogleProviderRequest>, I>>(object: I): AddGoogleProviderRequest {
    const message = createBaseAddGoogleProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGoogleProviderResponse(): AddGoogleProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGoogleProviderResponse = {
  encode(message: AddGoogleProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGoogleProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGoogleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGoogleProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddGoogleProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddGoogleProviderResponse>, I>>(base?: I): AddGoogleProviderResponse {
    return AddGoogleProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddGoogleProviderResponse>, I>>(object: I): AddGoogleProviderResponse {
    const message = createBaseAddGoogleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGoogleProviderRequest(): UpdateGoogleProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGoogleProviderRequest = {
  encode(message: UpdateGoogleProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGoogleProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? String(object.clientSecret) : "",
      scopes: Array.isArray(object?.scopes) ? object.scopes.map((e: any) => String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGoogleProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGoogleProviderRequest>, I>>(base?: I): UpdateGoogleProviderRequest {
    return UpdateGoogleProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGoogleProviderRequest>, I>>(object: I): UpdateGoogleProviderRequest {
    const message = createBaseUpdateGoogleProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGoogleProviderResponse(): UpdateGoogleProviderResponse {
  return { details: undefined };
}

export const UpdateGoogleProviderResponse = {
  encode(message: UpdateGoogleProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGoogleProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGoogleProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGoogleProviderResponse>, I>>(base?: I): UpdateGoogleProviderResponse {
    return UpdateGoogleProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGoogleProviderResponse>, I>>(object: I): UpdateGoogleProviderResponse {
    const message = createBaseUpdateGoogleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddLDAPProviderRequest(): AddLDAPProviderRequest {
  return {
    name: "",
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    bindPassword: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
    providerOptions: undefined,
  };
}

export const AddLDAPProviderRequest = {
  encode(message: AddLDAPProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.servers) {
      writer.uint32(18).string(v!);
    }
    if (message.startTls === true) {
      writer.uint32(24).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(34).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(42).string(message.bindDn);
    }
    if (message.bindPassword !== "") {
      writer.uint32(50).string(message.bindPassword);
    }
    if (message.userBase !== "") {
      writer.uint32(58).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(74).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(82).fork()).ldelim();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(90).fork()).ldelim();
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddLDAPProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLDAPProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddLDAPProviderRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      servers: Array.isArray(object?.servers) ? object.servers.map((e: any) => String(e)) : [],
      startTls: isSet(object.startTls) ? Boolean(object.startTls) : false,
      baseDn: isSet(object.baseDn) ? String(object.baseDn) : "",
      bindDn: isSet(object.bindDn) ? String(object.bindDn) : "",
      bindPassword: isSet(object.bindPassword) ? String(object.bindPassword) : "",
      userBase: isSet(object.userBase) ? String(object.userBase) : "",
      userObjectClasses: Array.isArray(object?.userObjectClasses)
        ? object.userObjectClasses.map((e: any) => String(e))
        : [],
      userFilters: Array.isArray(object?.userFilters) ? object.userFilters.map((e: any) => String(e)) : [],
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddLDAPProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.servers?.length) {
      obj.servers = message.servers;
    }
    if (message.startTls === true) {
      obj.startTls = message.startTls;
    }
    if (message.baseDn !== "") {
      obj.baseDn = message.baseDn;
    }
    if (message.bindDn !== "") {
      obj.bindDn = message.bindDn;
    }
    if (message.bindPassword !== "") {
      obj.bindPassword = message.bindPassword;
    }
    if (message.userBase !== "") {
      obj.userBase = message.userBase;
    }
    if (message.userObjectClasses?.length) {
      obj.userObjectClasses = message.userObjectClasses;
    }
    if (message.userFilters?.length) {
      obj.userFilters = message.userFilters;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.attributes !== undefined) {
      obj.attributes = LDAPAttributes.toJSON(message.attributes);
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddLDAPProviderRequest>, I>>(base?: I): AddLDAPProviderRequest {
    return AddLDAPProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddLDAPProviderRequest>, I>>(object: I): AddLDAPProviderRequest {
    const message = createBaseAddLDAPProviderRequest();
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.bindPassword = object.bindPassword ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddLDAPProviderResponse(): AddLDAPProviderResponse {
  return { details: undefined, id: "" };
}

export const AddLDAPProviderResponse = {
  encode(message: AddLDAPProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddLDAPProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLDAPProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddLDAPProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: AddLDAPProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddLDAPProviderResponse>, I>>(base?: I): AddLDAPProviderResponse {
    return AddLDAPProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddLDAPProviderResponse>, I>>(object: I): AddLDAPProviderResponse {
    const message = createBaseAddLDAPProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateLDAPProviderRequest(): UpdateLDAPProviderRequest {
  return {
    id: "",
    name: "",
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    bindPassword: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
    providerOptions: undefined,
  };
}

export const UpdateLDAPProviderRequest = {
  encode(message: UpdateLDAPProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.servers) {
      writer.uint32(26).string(v!);
    }
    if (message.startTls === true) {
      writer.uint32(32).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(42).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(50).string(message.bindDn);
    }
    if (message.bindPassword !== "") {
      writer.uint32(58).string(message.bindPassword);
    }
    if (message.userBase !== "") {
      writer.uint32(66).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(82).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(90).fork()).ldelim();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(98).fork()).ldelim();
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(106).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLDAPProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLDAPProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLDAPProviderRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      servers: Array.isArray(object?.servers) ? object.servers.map((e: any) => String(e)) : [],
      startTls: isSet(object.startTls) ? Boolean(object.startTls) : false,
      baseDn: isSet(object.baseDn) ? String(object.baseDn) : "",
      bindDn: isSet(object.bindDn) ? String(object.bindDn) : "",
      bindPassword: isSet(object.bindPassword) ? String(object.bindPassword) : "",
      userBase: isSet(object.userBase) ? String(object.userBase) : "",
      userObjectClasses: Array.isArray(object?.userObjectClasses)
        ? object.userObjectClasses.map((e: any) => String(e))
        : [],
      userFilters: Array.isArray(object?.userFilters) ? object.userFilters.map((e: any) => String(e)) : [],
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateLDAPProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.servers?.length) {
      obj.servers = message.servers;
    }
    if (message.startTls === true) {
      obj.startTls = message.startTls;
    }
    if (message.baseDn !== "") {
      obj.baseDn = message.baseDn;
    }
    if (message.bindDn !== "") {
      obj.bindDn = message.bindDn;
    }
    if (message.bindPassword !== "") {
      obj.bindPassword = message.bindPassword;
    }
    if (message.userBase !== "") {
      obj.userBase = message.userBase;
    }
    if (message.userObjectClasses?.length) {
      obj.userObjectClasses = message.userObjectClasses;
    }
    if (message.userFilters?.length) {
      obj.userFilters = message.userFilters;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.attributes !== undefined) {
      obj.attributes = LDAPAttributes.toJSON(message.attributes);
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLDAPProviderRequest>, I>>(base?: I): UpdateLDAPProviderRequest {
    return UpdateLDAPProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLDAPProviderRequest>, I>>(object: I): UpdateLDAPProviderRequest {
    const message = createBaseUpdateLDAPProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.bindPassword = object.bindPassword ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateLDAPProviderResponse(): UpdateLDAPProviderResponse {
  return { details: undefined };
}

export const UpdateLDAPProviderResponse = {
  encode(message: UpdateLDAPProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLDAPProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLDAPProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLDAPProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLDAPProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLDAPProviderResponse>, I>>(base?: I): UpdateLDAPProviderResponse {
    return UpdateLDAPProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLDAPProviderResponse>, I>>(object: I): UpdateLDAPProviderResponse {
    const message = createBaseUpdateLDAPProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeleteProviderRequest(): DeleteProviderRequest {
  return { id: "" };
}

export const DeleteProviderRequest = {
  encode(message: DeleteProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProviderRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: DeleteProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProviderRequest>, I>>(base?: I): DeleteProviderRequest {
    return DeleteProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProviderRequest>, I>>(object: I): DeleteProviderRequest {
    const message = createBaseDeleteProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteProviderResponse(): DeleteProviderResponse {
  return { details: undefined };
}

export const DeleteProviderResponse = {
  encode(message: DeleteProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeleteProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProviderResponse>, I>>(base?: I): DeleteProviderResponse {
    return DeleteProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProviderResponse>, I>>(object: I): DeleteProviderResponse {
    const message = createBaseDeleteProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListActionsRequest(): ListActionsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListActionsRequest = {
  encode(message: ListActionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      ActionQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListActionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(ActionQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActionsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? actionFieldNameFromJSON(object.sortingColumn) : 0,
      queries: Array.isArray(object?.queries) ? object.queries.map((e: any) => ActionQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListActionsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = actionFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => ActionQuery.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActionsRequest>, I>>(base?: I): ListActionsRequest {
    return ListActionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActionsRequest>, I>>(object: I): ListActionsRequest {
    const message = createBaseListActionsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => ActionQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseActionQuery(): ActionQuery {
  return { actionIdQuery: undefined, actionNameQuery: undefined, actionStateQuery: undefined };
}

export const ActionQuery = {
  encode(message: ActionQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.actionIdQuery !== undefined) {
      ActionIDQuery.encode(message.actionIdQuery, writer.uint32(10).fork()).ldelim();
    }
    if (message.actionNameQuery !== undefined) {
      ActionNameQuery.encode(message.actionNameQuery, writer.uint32(18).fork()).ldelim();
    }
    if (message.actionStateQuery !== undefined) {
      ActionStateQuery.encode(message.actionStateQuery, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActionQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actionIdQuery = ActionIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actionNameQuery = ActionNameQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actionStateQuery = ActionStateQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionQuery {
    return {
      actionIdQuery: isSet(object.actionIdQuery) ? ActionIDQuery.fromJSON(object.actionIdQuery) : undefined,
      actionNameQuery: isSet(object.actionNameQuery) ? ActionNameQuery.fromJSON(object.actionNameQuery) : undefined,
      actionStateQuery: isSet(object.actionStateQuery) ? ActionStateQuery.fromJSON(object.actionStateQuery) : undefined,
    };
  },

  toJSON(message: ActionQuery): unknown {
    const obj: any = {};
    if (message.actionIdQuery !== undefined) {
      obj.actionIdQuery = ActionIDQuery.toJSON(message.actionIdQuery);
    }
    if (message.actionNameQuery !== undefined) {
      obj.actionNameQuery = ActionNameQuery.toJSON(message.actionNameQuery);
    }
    if (message.actionStateQuery !== undefined) {
      obj.actionStateQuery = ActionStateQuery.toJSON(message.actionStateQuery);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionQuery>, I>>(base?: I): ActionQuery {
    return ActionQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionQuery>, I>>(object: I): ActionQuery {
    const message = createBaseActionQuery();
    message.actionIdQuery = (object.actionIdQuery !== undefined && object.actionIdQuery !== null)
      ? ActionIDQuery.fromPartial(object.actionIdQuery)
      : undefined;
    message.actionNameQuery = (object.actionNameQuery !== undefined && object.actionNameQuery !== null)
      ? ActionNameQuery.fromPartial(object.actionNameQuery)
      : undefined;
    message.actionStateQuery = (object.actionStateQuery !== undefined && object.actionStateQuery !== null)
      ? ActionStateQuery.fromPartial(object.actionStateQuery)
      : undefined;
    return message;
  },
};

function createBaseListActionsResponse(): ListActionsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListActionsResponse = {
  encode(message: ListActionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      Action.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListActionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(Action.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActionsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? actionFieldNameFromJSON(object.sortingColumn) : 0,
      result: Array.isArray(object?.result) ? object.result.map((e: any) => Action.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListActionsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = actionFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Action.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActionsResponse>, I>>(base?: I): ListActionsResponse {
    return ListActionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActionsResponse>, I>>(object: I): ListActionsResponse {
    const message = createBaseListActionsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => Action.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateActionRequest(): CreateActionRequest {
  return { name: "", script: "", timeout: undefined, allowedToFail: false };
}

export const CreateActionRequest = {
  encode(message: CreateActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.script !== "") {
      writer.uint32(18).string(message.script);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(26).fork()).ldelim();
    }
    if (message.allowedToFail === true) {
      writer.uint32(32).bool(message.allowedToFail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.script = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.allowedToFail = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateActionRequest {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      script: isSet(object.script) ? String(object.script) : "",
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      allowedToFail: isSet(object.allowedToFail) ? Boolean(object.allowedToFail) : false,
    };
  },

  toJSON(message: CreateActionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.script !== "") {
      obj.script = message.script;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.allowedToFail === true) {
      obj.allowedToFail = message.allowedToFail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateActionRequest>, I>>(base?: I): CreateActionRequest {
    return CreateActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateActionRequest>, I>>(object: I): CreateActionRequest {
    const message = createBaseCreateActionRequest();
    message.name = object.name ?? "";
    message.script = object.script ?? "";
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.allowedToFail = object.allowedToFail ?? false;
    return message;
  },
};

function createBaseCreateActionResponse(): CreateActionResponse {
  return { details: undefined, id: "" };
}

export const CreateActionResponse = {
  encode(message: CreateActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateActionResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? String(object.id) : "",
    };
  },

  toJSON(message: CreateActionResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateActionResponse>, I>>(base?: I): CreateActionResponse {
    return CreateActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateActionResponse>, I>>(object: I): CreateActionResponse {
    const message = createBaseCreateActionResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetActionRequest(): GetActionRequest {
  return { id: "" };
}

export const GetActionRequest = {
  encode(message: GetActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetActionRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetActionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActionRequest>, I>>(base?: I): GetActionRequest {
    return GetActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActionRequest>, I>>(object: I): GetActionRequest {
    const message = createBaseGetActionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetActionResponse(): GetActionResponse {
  return { action: undefined };
}

export const GetActionResponse = {
  encode(message: GetActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.action !== undefined) {
      Action.encode(message.action, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.action = Action.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetActionResponse {
    return { action: isSet(object.action) ? Action.fromJSON(object.action) : undefined };
  },

  toJSON(message: GetActionResponse): unknown {
    const obj: any = {};
    if (message.action !== undefined) {
      obj.action = Action.toJSON(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActionResponse>, I>>(base?: I): GetActionResponse {
    return GetActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActionResponse>, I>>(object: I): GetActionResponse {
    const message = createBaseGetActionResponse();
    message.action = (object.action !== undefined && object.action !== null)
      ? Action.fromPartial(object.action)
      : undefined;
    return message;
  },
};

function createBaseUpdateActionRequest(): UpdateActionRequest {
  return { id: "", name: "", script: "", timeout: undefined, allowedToFail: false };
}

export const UpdateActionRequest = {
  encode(message: UpdateActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.script !== "") {
      writer.uint32(26).string(message.script);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(34).fork()).ldelim();
    }
    if (message.allowedToFail === true) {
      writer.uint32(40).bool(message.allowedToFail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.script = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.allowedToFail = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateActionRequest {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      script: isSet(object.script) ? String(object.script) : "",
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      allowedToFail: isSet(object.allowedToFail) ? Boolean(object.allowedToFail) : false,
    };
  },

  toJSON(message: UpdateActionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.script !== "") {
      obj.script = message.script;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.allowedToFail === true) {
      obj.allowedToFail = message.allowedToFail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateActionRequest>, I>>(base?: I): UpdateActionRequest {
    return UpdateActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateActionRequest>, I>>(object: I): UpdateActionRequest {
    const message = createBaseUpdateActionRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.script = object.script ?? "";
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.allowedToFail = object.allowedToFail ?? false;
    return message;
  },
};

function createBaseUpdateActionResponse(): UpdateActionResponse {
  return { details: undefined };
}

export const UpdateActionResponse = {
  encode(message: UpdateActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateActionResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateActionResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateActionResponse>, I>>(base?: I): UpdateActionResponse {
    return UpdateActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateActionResponse>, I>>(object: I): UpdateActionResponse {
    const message = createBaseUpdateActionResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeleteActionRequest(): DeleteActionRequest {
  return { id: "" };
}

export const DeleteActionRequest = {
  encode(message: DeleteActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteActionRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: DeleteActionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteActionRequest>, I>>(base?: I): DeleteActionRequest {
    return DeleteActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteActionRequest>, I>>(object: I): DeleteActionRequest {
    const message = createBaseDeleteActionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteActionResponse(): DeleteActionResponse {
  return {};
}

export const DeleteActionResponse = {
  encode(_: DeleteActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteActionResponse {
    return {};
  },

  toJSON(_: DeleteActionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteActionResponse>, I>>(base?: I): DeleteActionResponse {
    return DeleteActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteActionResponse>, I>>(_: I): DeleteActionResponse {
    const message = createBaseDeleteActionResponse();
    return message;
  },
};

function createBaseListFlowTypesRequest(): ListFlowTypesRequest {
  return {};
}

export const ListFlowTypesRequest = {
  encode(_: ListFlowTypesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFlowTypesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListFlowTypesRequest {
    return {};
  },

  toJSON(_: ListFlowTypesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFlowTypesRequest>, I>>(base?: I): ListFlowTypesRequest {
    return ListFlowTypesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFlowTypesRequest>, I>>(_: I): ListFlowTypesRequest {
    const message = createBaseListFlowTypesRequest();
    return message;
  },
};

function createBaseListFlowTypesResponse(): ListFlowTypesResponse {
  return { result: [] };
}

export const ListFlowTypesResponse = {
  encode(message: ListFlowTypesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      FlowType.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFlowTypesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(FlowType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFlowTypesResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => FlowType.fromJSON(e)) : [] };
  },

  toJSON(message: ListFlowTypesResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => FlowType.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFlowTypesResponse>, I>>(base?: I): ListFlowTypesResponse {
    return ListFlowTypesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFlowTypesResponse>, I>>(object: I): ListFlowTypesResponse {
    const message = createBaseListFlowTypesResponse();
    message.result = object.result?.map((e) => FlowType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFlowTriggerTypesRequest(): ListFlowTriggerTypesRequest {
  return { type: "" };
}

export const ListFlowTriggerTypesRequest = {
  encode(message: ListFlowTriggerTypesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFlowTriggerTypesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowTriggerTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFlowTriggerTypesRequest {
    return { type: isSet(object.type) ? String(object.type) : "" };
  },

  toJSON(message: ListFlowTriggerTypesRequest): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFlowTriggerTypesRequest>, I>>(base?: I): ListFlowTriggerTypesRequest {
    return ListFlowTriggerTypesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFlowTriggerTypesRequest>, I>>(object: I): ListFlowTriggerTypesRequest {
    const message = createBaseListFlowTriggerTypesRequest();
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseListFlowTriggerTypesResponse(): ListFlowTriggerTypesResponse {
  return { result: [] };
}

export const ListFlowTriggerTypesResponse = {
  encode(message: ListFlowTriggerTypesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      TriggerType.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFlowTriggerTypesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowTriggerTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(TriggerType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFlowTriggerTypesResponse {
    return { result: Array.isArray(object?.result) ? object.result.map((e: any) => TriggerType.fromJSON(e)) : [] };
  },

  toJSON(message: ListFlowTriggerTypesResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => TriggerType.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFlowTriggerTypesResponse>, I>>(base?: I): ListFlowTriggerTypesResponse {
    return ListFlowTriggerTypesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFlowTriggerTypesResponse>, I>>(object: I): ListFlowTriggerTypesResponse {
    const message = createBaseListFlowTriggerTypesResponse();
    message.result = object.result?.map((e) => TriggerType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeactivateActionRequest(): DeactivateActionRequest {
  return { id: "" };
}

export const DeactivateActionRequest = {
  encode(message: DeactivateActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateActionRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: DeactivateActionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateActionRequest>, I>>(base?: I): DeactivateActionRequest {
    return DeactivateActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateActionRequest>, I>>(object: I): DeactivateActionRequest {
    const message = createBaseDeactivateActionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateActionResponse(): DeactivateActionResponse {
  return { details: undefined };
}

export const DeactivateActionResponse = {
  encode(message: DeactivateActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateActionResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateActionResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeactivateActionResponse>, I>>(base?: I): DeactivateActionResponse {
    return DeactivateActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeactivateActionResponse>, I>>(object: I): DeactivateActionResponse {
    const message = createBaseDeactivateActionResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateActionRequest(): ReactivateActionRequest {
  return { id: "" };
}

export const ReactivateActionRequest = {
  encode(message: ReactivateActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateActionRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: ReactivateActionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateActionRequest>, I>>(base?: I): ReactivateActionRequest {
    return ReactivateActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateActionRequest>, I>>(object: I): ReactivateActionRequest {
    const message = createBaseReactivateActionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseReactivateActionResponse(): ReactivateActionResponse {
  return { details: undefined };
}

export const ReactivateActionResponse = {
  encode(message: ReactivateActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateActionResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateActionResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactivateActionResponse>, I>>(base?: I): ReactivateActionResponse {
    return ReactivateActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactivateActionResponse>, I>>(object: I): ReactivateActionResponse {
    const message = createBaseReactivateActionResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetFlowRequest(): GetFlowRequest {
  return { type: "" };
}

export const GetFlowRequest = {
  encode(message: GetFlowRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFlowRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFlowRequest {
    return { type: isSet(object.type) ? String(object.type) : "" };
  },

  toJSON(message: GetFlowRequest): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFlowRequest>, I>>(base?: I): GetFlowRequest {
    return GetFlowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFlowRequest>, I>>(object: I): GetFlowRequest {
    const message = createBaseGetFlowRequest();
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseGetFlowResponse(): GetFlowResponse {
  return { flow: undefined };
}

export const GetFlowResponse = {
  encode(message: GetFlowResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFlowResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFlowResponse {
    return { flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined };
  },

  toJSON(message: GetFlowResponse): unknown {
    const obj: any = {};
    if (message.flow !== undefined) {
      obj.flow = Flow.toJSON(message.flow);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFlowResponse>, I>>(base?: I): GetFlowResponse {
    return GetFlowResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFlowResponse>, I>>(object: I): GetFlowResponse {
    const message = createBaseGetFlowResponse();
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    return message;
  },
};

function createBaseClearFlowRequest(): ClearFlowRequest {
  return { type: "" };
}

export const ClearFlowRequest = {
  encode(message: ClearFlowRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClearFlowRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearFlowRequest {
    return { type: isSet(object.type) ? String(object.type) : "" };
  },

  toJSON(message: ClearFlowRequest): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearFlowRequest>, I>>(base?: I): ClearFlowRequest {
    return ClearFlowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearFlowRequest>, I>>(object: I): ClearFlowRequest {
    const message = createBaseClearFlowRequest();
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseClearFlowResponse(): ClearFlowResponse {
  return { details: undefined };
}

export const ClearFlowResponse = {
  encode(message: ClearFlowResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClearFlowResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearFlowResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ClearFlowResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearFlowResponse>, I>>(base?: I): ClearFlowResponse {
    return ClearFlowResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearFlowResponse>, I>>(object: I): ClearFlowResponse {
    const message = createBaseClearFlowResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSetTriggerActionsRequest(): SetTriggerActionsRequest {
  return { flowType: "", triggerType: "", actionIds: [] };
}

export const SetTriggerActionsRequest = {
  encode(message: SetTriggerActionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.flowType !== "") {
      writer.uint32(10).string(message.flowType);
    }
    if (message.triggerType !== "") {
      writer.uint32(18).string(message.triggerType);
    }
    for (const v of message.actionIds) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTriggerActionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTriggerActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flowType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.triggerType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actionIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetTriggerActionsRequest {
    return {
      flowType: isSet(object.flowType) ? String(object.flowType) : "",
      triggerType: isSet(object.triggerType) ? String(object.triggerType) : "",
      actionIds: Array.isArray(object?.actionIds) ? object.actionIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: SetTriggerActionsRequest): unknown {
    const obj: any = {};
    if (message.flowType !== "") {
      obj.flowType = message.flowType;
    }
    if (message.triggerType !== "") {
      obj.triggerType = message.triggerType;
    }
    if (message.actionIds?.length) {
      obj.actionIds = message.actionIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTriggerActionsRequest>, I>>(base?: I): SetTriggerActionsRequest {
    return SetTriggerActionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTriggerActionsRequest>, I>>(object: I): SetTriggerActionsRequest {
    const message = createBaseSetTriggerActionsRequest();
    message.flowType = object.flowType ?? "";
    message.triggerType = object.triggerType ?? "";
    message.actionIds = object.actionIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetTriggerActionsResponse(): SetTriggerActionsResponse {
  return { details: undefined };
}

export const SetTriggerActionsResponse = {
  encode(message: SetTriggerActionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTriggerActionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTriggerActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetTriggerActionsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetTriggerActionsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTriggerActionsResponse>, I>>(base?: I): SetTriggerActionsResponse {
    return SetTriggerActionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTriggerActionsResponse>, I>>(object: I): SetTriggerActionsResponse {
    const message = createBaseSetTriggerActionsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

export interface ManagementService {
  Healthz(request: DeepPartial<HealthzRequest>, metadata?: grpc.Metadata): Promise<HealthzResponse>;
  GetOIDCInformation(
    request: DeepPartial<GetOIDCInformationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOIDCInformationResponse>;
  GetIAM(request: DeepPartial<GetIAMRequest>, metadata?: grpc.Metadata): Promise<GetIAMResponse>;
  GetSupportedLanguages(
    request: DeepPartial<GetSupportedLanguagesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSupportedLanguagesResponse>;
  GetUserByID(request: DeepPartial<GetUserByIDRequest>, metadata?: grpc.Metadata): Promise<GetUserByIDResponse>;
  GetUserByLoginNameGlobal(
    request: DeepPartial<GetUserByLoginNameGlobalRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetUserByLoginNameGlobalResponse>;
  ListUsers(request: DeepPartial<ListUsersRequest>, metadata?: grpc.Metadata): Promise<ListUsersResponse>;
  ListUserChanges(
    request: DeepPartial<ListUserChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListUserChangesResponse>;
  IsUserUnique(request: DeepPartial<IsUserUniqueRequest>, metadata?: grpc.Metadata): Promise<IsUserUniqueResponse>;
  /** deprecated: use ImportHumanUser */
  AddHumanUser(request: DeepPartial<AddHumanUserRequest>, metadata?: grpc.Metadata): Promise<AddHumanUserResponse>;
  ImportHumanUser(
    request: DeepPartial<ImportHumanUserRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ImportHumanUserResponse>;
  AddMachineUser(
    request: DeepPartial<AddMachineUserRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddMachineUserResponse>;
  DeactivateUser(
    request: DeepPartial<DeactivateUserRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateUserResponse>;
  ReactivateUser(
    request: DeepPartial<ReactivateUserRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateUserResponse>;
  LockUser(request: DeepPartial<LockUserRequest>, metadata?: grpc.Metadata): Promise<LockUserResponse>;
  UnlockUser(request: DeepPartial<UnlockUserRequest>, metadata?: grpc.Metadata): Promise<UnlockUserResponse>;
  RemoveUser(request: DeepPartial<RemoveUserRequest>, metadata?: grpc.Metadata): Promise<RemoveUserResponse>;
  UpdateUserName(
    request: DeepPartial<UpdateUserNameRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateUserNameResponse>;
  SetUserMetadata(
    request: DeepPartial<SetUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetUserMetadataResponse>;
  BulkSetUserMetadata(
    request: DeepPartial<BulkSetUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkSetUserMetadataResponse>;
  ListUserMetadata(
    request: DeepPartial<ListUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListUserMetadataResponse>;
  GetUserMetadata(
    request: DeepPartial<GetUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetUserMetadataResponse>;
  RemoveUserMetadata(
    request: DeepPartial<RemoveUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveUserMetadataResponse>;
  BulkRemoveUserMetadata(
    request: DeepPartial<BulkRemoveUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkRemoveUserMetadataResponse>;
  GetHumanProfile(
    request: DeepPartial<GetHumanProfileRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetHumanProfileResponse>;
  UpdateHumanProfile(
    request: DeepPartial<UpdateHumanProfileRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateHumanProfileResponse>;
  GetHumanEmail(request: DeepPartial<GetHumanEmailRequest>, metadata?: grpc.Metadata): Promise<GetHumanEmailResponse>;
  UpdateHumanEmail(
    request: DeepPartial<UpdateHumanEmailRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateHumanEmailResponse>;
  ResendHumanInitialization(
    request: DeepPartial<ResendHumanInitializationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResendHumanInitializationResponse>;
  ResendHumanEmailVerification(
    request: DeepPartial<ResendHumanEmailVerificationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResendHumanEmailVerificationResponse>;
  GetHumanPhone(request: DeepPartial<GetHumanPhoneRequest>, metadata?: grpc.Metadata): Promise<GetHumanPhoneResponse>;
  UpdateHumanPhone(
    request: DeepPartial<UpdateHumanPhoneRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateHumanPhoneResponse>;
  RemoveHumanPhone(
    request: DeepPartial<RemoveHumanPhoneRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanPhoneResponse>;
  ResendHumanPhoneVerification(
    request: DeepPartial<ResendHumanPhoneVerificationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResendHumanPhoneVerificationResponse>;
  RemoveHumanAvatar(
    request: DeepPartial<RemoveHumanAvatarRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanAvatarResponse>;
  /** deprecated: use SetHumanPassword */
  SetHumanInitialPassword(
    request: DeepPartial<SetHumanInitialPasswordRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetHumanInitialPasswordResponse>;
  SetHumanPassword(
    request: DeepPartial<SetHumanPasswordRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetHumanPasswordResponse>;
  SendHumanResetPasswordNotification(
    request: DeepPartial<SendHumanResetPasswordNotificationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SendHumanResetPasswordNotificationResponse>;
  ListHumanAuthFactors(
    request: DeepPartial<ListHumanAuthFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListHumanAuthFactorsResponse>;
  RemoveHumanAuthFactorOTP(
    request: DeepPartial<RemoveHumanAuthFactorOTPRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanAuthFactorOTPResponse>;
  RemoveHumanAuthFactorU2F(
    request: DeepPartial<RemoveHumanAuthFactorU2FRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanAuthFactorU2FResponse>;
  ListHumanPasswordless(
    request: DeepPartial<ListHumanPasswordlessRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListHumanPasswordlessResponse>;
  AddPasswordlessRegistration(
    request: DeepPartial<AddPasswordlessRegistrationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddPasswordlessRegistrationResponse>;
  SendPasswordlessRegistration(
    request: DeepPartial<SendPasswordlessRegistrationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SendPasswordlessRegistrationResponse>;
  RemoveHumanPasswordless(
    request: DeepPartial<RemoveHumanPasswordlessRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanPasswordlessResponse>;
  UpdateMachine(request: DeepPartial<UpdateMachineRequest>, metadata?: grpc.Metadata): Promise<UpdateMachineResponse>;
  GenerateMachineSecret(
    request: DeepPartial<GenerateMachineSecretRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GenerateMachineSecretResponse>;
  RemoveMachineSecret(
    request: DeepPartial<RemoveMachineSecretRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveMachineSecretResponse>;
  GetMachineKeyByIDs(
    request: DeepPartial<GetMachineKeyByIDsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetMachineKeyByIDsResponse>;
  ListMachineKeys(
    request: DeepPartial<ListMachineKeysRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListMachineKeysResponse>;
  AddMachineKey(request: DeepPartial<AddMachineKeyRequest>, metadata?: grpc.Metadata): Promise<AddMachineKeyResponse>;
  RemoveMachineKey(
    request: DeepPartial<RemoveMachineKeyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveMachineKeyResponse>;
  GetPersonalAccessTokenByIDs(
    request: DeepPartial<GetPersonalAccessTokenByIDsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPersonalAccessTokenByIDsResponse>;
  ListPersonalAccessTokens(
    request: DeepPartial<ListPersonalAccessTokensRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListPersonalAccessTokensResponse>;
  AddPersonalAccessToken(
    request: DeepPartial<AddPersonalAccessTokenRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddPersonalAccessTokenResponse>;
  RemovePersonalAccessToken(
    request: DeepPartial<RemovePersonalAccessTokenRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemovePersonalAccessTokenResponse>;
  ListHumanLinkedIDPs(
    request: DeepPartial<ListHumanLinkedIDPsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListHumanLinkedIDPsResponse>;
  RemoveHumanLinkedIDP(
    request: DeepPartial<RemoveHumanLinkedIDPRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanLinkedIDPResponse>;
  ListUserMemberships(
    request: DeepPartial<ListUserMembershipsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListUserMembershipsResponse>;
  GetMyOrg(request: DeepPartial<GetMyOrgRequest>, metadata?: grpc.Metadata): Promise<GetMyOrgResponse>;
  GetOrgByDomainGlobal(
    request: DeepPartial<GetOrgByDomainGlobalRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOrgByDomainGlobalResponse>;
  ListOrgChanges(
    request: DeepPartial<ListOrgChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgChangesResponse>;
  AddOrg(request: DeepPartial<AddOrgRequest>, metadata?: grpc.Metadata): Promise<AddOrgResponse>;
  UpdateOrg(request: DeepPartial<UpdateOrgRequest>, metadata?: grpc.Metadata): Promise<UpdateOrgResponse>;
  DeactivateOrg(request: DeepPartial<DeactivateOrgRequest>, metadata?: grpc.Metadata): Promise<DeactivateOrgResponse>;
  ReactivateOrg(request: DeepPartial<ReactivateOrgRequest>, metadata?: grpc.Metadata): Promise<ReactivateOrgResponse>;
  RemoveOrg(request: DeepPartial<RemoveOrgRequest>, metadata?: grpc.Metadata): Promise<RemoveOrgResponse>;
  SetOrgMetadata(
    request: DeepPartial<SetOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetOrgMetadataResponse>;
  BulkSetOrgMetadata(
    request: DeepPartial<BulkSetOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkSetOrgMetadataResponse>;
  ListOrgMetadata(
    request: DeepPartial<ListOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgMetadataResponse>;
  GetOrgMetadata(
    request: DeepPartial<GetOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOrgMetadataResponse>;
  RemoveOrgMetadata(
    request: DeepPartial<RemoveOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveOrgMetadataResponse>;
  BulkRemoveOrgMetadata(
    request: DeepPartial<BulkRemoveOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkRemoveOrgMetadataResponse>;
  ListOrgDomains(
    request: DeepPartial<ListOrgDomainsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgDomainsResponse>;
  AddOrgDomain(request: DeepPartial<AddOrgDomainRequest>, metadata?: grpc.Metadata): Promise<AddOrgDomainResponse>;
  RemoveOrgDomain(
    request: DeepPartial<RemoveOrgDomainRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveOrgDomainResponse>;
  GenerateOrgDomainValidation(
    request: DeepPartial<GenerateOrgDomainValidationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GenerateOrgDomainValidationResponse>;
  ValidateOrgDomain(
    request: DeepPartial<ValidateOrgDomainRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ValidateOrgDomainResponse>;
  SetPrimaryOrgDomain(
    request: DeepPartial<SetPrimaryOrgDomainRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetPrimaryOrgDomainResponse>;
  ListOrgMemberRoles(
    request: DeepPartial<ListOrgMemberRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgMemberRolesResponse>;
  ListOrgMembers(
    request: DeepPartial<ListOrgMembersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgMembersResponse>;
  AddOrgMember(request: DeepPartial<AddOrgMemberRequest>, metadata?: grpc.Metadata): Promise<AddOrgMemberResponse>;
  UpdateOrgMember(
    request: DeepPartial<UpdateOrgMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOrgMemberResponse>;
  RemoveOrgMember(
    request: DeepPartial<RemoveOrgMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveOrgMemberResponse>;
  GetProjectByID(
    request: DeepPartial<GetProjectByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetProjectByIDResponse>;
  GetGrantedProjectByID(
    request: DeepPartial<GetGrantedProjectByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetGrantedProjectByIDResponse>;
  ListProjects(request: DeepPartial<ListProjectsRequest>, metadata?: grpc.Metadata): Promise<ListProjectsResponse>;
  ListGrantedProjects(
    request: DeepPartial<ListGrantedProjectsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListGrantedProjectsResponse>;
  ListGrantedProjectRoles(
    request: DeepPartial<ListGrantedProjectRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListGrantedProjectRolesResponse>;
  ListProjectChanges(
    request: DeepPartial<ListProjectChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectChangesResponse>;
  AddProject(request: DeepPartial<AddProjectRequest>, metadata?: grpc.Metadata): Promise<AddProjectResponse>;
  UpdateProject(request: DeepPartial<UpdateProjectRequest>, metadata?: grpc.Metadata): Promise<UpdateProjectResponse>;
  DeactivateProject(
    request: DeepPartial<DeactivateProjectRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateProjectResponse>;
  ReactivateProject(
    request: DeepPartial<ReactivateProjectRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateProjectResponse>;
  RemoveProject(request: DeepPartial<RemoveProjectRequest>, metadata?: grpc.Metadata): Promise<RemoveProjectResponse>;
  ListProjectRoles(
    request: DeepPartial<ListProjectRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectRolesResponse>;
  AddProjectRole(
    request: DeepPartial<AddProjectRoleRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddProjectRoleResponse>;
  BulkAddProjectRoles(
    request: DeepPartial<BulkAddProjectRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkAddProjectRolesResponse>;
  UpdateProjectRole(
    request: DeepPartial<UpdateProjectRoleRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateProjectRoleResponse>;
  RemoveProjectRole(
    request: DeepPartial<RemoveProjectRoleRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveProjectRoleResponse>;
  ListProjectMemberRoles(
    request: DeepPartial<ListProjectMemberRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectMemberRolesResponse>;
  ListProjectMembers(
    request: DeepPartial<ListProjectMembersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectMembersResponse>;
  AddProjectMember(
    request: DeepPartial<AddProjectMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddProjectMemberResponse>;
  UpdateProjectMember(
    request: DeepPartial<UpdateProjectMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateProjectMemberResponse>;
  RemoveProjectMember(
    request: DeepPartial<RemoveProjectMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveProjectMemberResponse>;
  GetAppByID(request: DeepPartial<GetAppByIDRequest>, metadata?: grpc.Metadata): Promise<GetAppByIDResponse>;
  ListApps(request: DeepPartial<ListAppsRequest>, metadata?: grpc.Metadata): Promise<ListAppsResponse>;
  ListAppChanges(
    request: DeepPartial<ListAppChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListAppChangesResponse>;
  AddOIDCApp(request: DeepPartial<AddOIDCAppRequest>, metadata?: grpc.Metadata): Promise<AddOIDCAppResponse>;
  AddSAMLApp(request: DeepPartial<AddSAMLAppRequest>, metadata?: grpc.Metadata): Promise<AddSAMLAppResponse>;
  AddAPIApp(request: DeepPartial<AddAPIAppRequest>, metadata?: grpc.Metadata): Promise<AddAPIAppResponse>;
  /** Changes application */
  UpdateApp(request: DeepPartial<UpdateAppRequest>, metadata?: grpc.Metadata): Promise<UpdateAppResponse>;
  UpdateOIDCAppConfig(
    request: DeepPartial<UpdateOIDCAppConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOIDCAppConfigResponse>;
  UpdateSAMLAppConfig(
    request: DeepPartial<UpdateSAMLAppConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSAMLAppConfigResponse>;
  UpdateAPIAppConfig(
    request: DeepPartial<UpdateAPIAppConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateAPIAppConfigResponse>;
  DeactivateApp(request: DeepPartial<DeactivateAppRequest>, metadata?: grpc.Metadata): Promise<DeactivateAppResponse>;
  ReactivateApp(request: DeepPartial<ReactivateAppRequest>, metadata?: grpc.Metadata): Promise<ReactivateAppResponse>;
  RemoveApp(request: DeepPartial<RemoveAppRequest>, metadata?: grpc.Metadata): Promise<RemoveAppResponse>;
  RegenerateOIDCClientSecret(
    request: DeepPartial<RegenerateOIDCClientSecretRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RegenerateOIDCClientSecretResponse>;
  RegenerateAPIClientSecret(
    request: DeepPartial<RegenerateAPIClientSecretRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RegenerateAPIClientSecretResponse>;
  GetAppKey(request: DeepPartial<GetAppKeyRequest>, metadata?: grpc.Metadata): Promise<GetAppKeyResponse>;
  ListAppKeys(request: DeepPartial<ListAppKeysRequest>, metadata?: grpc.Metadata): Promise<ListAppKeysResponse>;
  AddAppKey(request: DeepPartial<AddAppKeyRequest>, metadata?: grpc.Metadata): Promise<AddAppKeyResponse>;
  RemoveAppKey(request: DeepPartial<RemoveAppKeyRequest>, metadata?: grpc.Metadata): Promise<RemoveAppKeyResponse>;
  ListProjectGrantChanges(
    request: DeepPartial<ListProjectGrantChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectGrantChangesResponse>;
  GetProjectGrantByID(
    request: DeepPartial<GetProjectGrantByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetProjectGrantByIDResponse>;
  ListProjectGrants(
    request: DeepPartial<ListProjectGrantsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectGrantsResponse>;
  ListAllProjectGrants(
    request: DeepPartial<ListAllProjectGrantsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListAllProjectGrantsResponse>;
  AddProjectGrant(
    request: DeepPartial<AddProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddProjectGrantResponse>;
  UpdateProjectGrant(
    request: DeepPartial<UpdateProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateProjectGrantResponse>;
  DeactivateProjectGrant(
    request: DeepPartial<DeactivateProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateProjectGrantResponse>;
  ReactivateProjectGrant(
    request: DeepPartial<ReactivateProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateProjectGrantResponse>;
  RemoveProjectGrant(
    request: DeepPartial<RemoveProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveProjectGrantResponse>;
  ListProjectGrantMemberRoles(
    request: DeepPartial<ListProjectGrantMemberRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectGrantMemberRolesResponse>;
  ListProjectGrantMembers(
    request: DeepPartial<ListProjectGrantMembersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectGrantMembersResponse>;
  AddProjectGrantMember(
    request: DeepPartial<AddProjectGrantMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddProjectGrantMemberResponse>;
  UpdateProjectGrantMember(
    request: DeepPartial<UpdateProjectGrantMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateProjectGrantMemberResponse>;
  RemoveProjectGrantMember(
    request: DeepPartial<RemoveProjectGrantMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveProjectGrantMemberResponse>;
  GetUserGrantByID(
    request: DeepPartial<GetUserGrantByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetUserGrantByIDResponse>;
  ListUserGrants(request: DeepPartial<ListUserGrantRequest>, metadata?: grpc.Metadata): Promise<ListUserGrantResponse>;
  AddUserGrant(request: DeepPartial<AddUserGrantRequest>, metadata?: grpc.Metadata): Promise<AddUserGrantResponse>;
  UpdateUserGrant(
    request: DeepPartial<UpdateUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateUserGrantResponse>;
  DeactivateUserGrant(
    request: DeepPartial<DeactivateUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateUserGrantResponse>;
  ReactivateUserGrant(
    request: DeepPartial<ReactivateUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateUserGrantResponse>;
  RemoveUserGrant(
    request: DeepPartial<RemoveUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveUserGrantResponse>;
  BulkRemoveUserGrant(
    request: DeepPartial<BulkRemoveUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkRemoveUserGrantResponse>;
  /** deprecated: please use DomainPolicy instead */
  GetOrgIAMPolicy(
    request: DeepPartial<GetOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOrgIAMPolicyResponse>;
  GetDomainPolicy(
    request: DeepPartial<GetDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDomainPolicyResponse>;
  GetLoginPolicy(
    request: DeepPartial<GetLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLoginPolicyResponse>;
  GetDefaultLoginPolicy(
    request: DeepPartial<GetDefaultLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLoginPolicyResponse>;
  AddCustomLoginPolicy(
    request: DeepPartial<AddCustomLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomLoginPolicyResponse>;
  UpdateCustomLoginPolicy(
    request: DeepPartial<UpdateCustomLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomLoginPolicyResponse>;
  ResetLoginPolicyToDefault(
    request: DeepPartial<ResetLoginPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetLoginPolicyToDefaultResponse>;
  ListLoginPolicyIDPs(
    request: DeepPartial<ListLoginPolicyIDPsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicyIDPsResponse>;
  AddIDPToLoginPolicy(
    request: DeepPartial<AddIDPToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddIDPToLoginPolicyResponse>;
  RemoveIDPFromLoginPolicy(
    request: DeepPartial<RemoveIDPFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveIDPFromLoginPolicyResponse>;
  ListLoginPolicySecondFactors(
    request: DeepPartial<ListLoginPolicySecondFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicySecondFactorsResponse>;
  AddSecondFactorToLoginPolicy(
    request: DeepPartial<AddSecondFactorToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddSecondFactorToLoginPolicyResponse>;
  RemoveSecondFactorFromLoginPolicy(
    request: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveSecondFactorFromLoginPolicyResponse>;
  ListLoginPolicyMultiFactors(
    request: DeepPartial<ListLoginPolicyMultiFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicyMultiFactorsResponse>;
  AddMultiFactorToLoginPolicy(
    request: DeepPartial<AddMultiFactorToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddMultiFactorToLoginPolicyResponse>;
  RemoveMultiFactorFromLoginPolicy(
    request: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveMultiFactorFromLoginPolicyResponse>;
  GetPasswordComplexityPolicy(
    request: DeepPartial<GetPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPasswordComplexityPolicyResponse>;
  GetDefaultPasswordComplexityPolicy(
    request: DeepPartial<GetDefaultPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordComplexityPolicyResponse>;
  AddCustomPasswordComplexityPolicy(
    request: DeepPartial<AddCustomPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomPasswordComplexityPolicyResponse>;
  UpdateCustomPasswordComplexityPolicy(
    request: DeepPartial<UpdateCustomPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomPasswordComplexityPolicyResponse>;
  ResetPasswordComplexityPolicyToDefault(
    request: DeepPartial<ResetPasswordComplexityPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetPasswordComplexityPolicyToDefaultResponse>;
  /** The password age policy is not used at the moment */
  GetPasswordAgePolicy(
    request: DeepPartial<GetPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPasswordAgePolicyResponse>;
  /** The password age policy is not used at the moment */
  GetDefaultPasswordAgePolicy(
    request: DeepPartial<GetDefaultPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordAgePolicyResponse>;
  /** The password age policy is not used at the moment */
  AddCustomPasswordAgePolicy(
    request: DeepPartial<AddCustomPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomPasswordAgePolicyResponse>;
  /** The password age policy is not used at the moment */
  UpdateCustomPasswordAgePolicy(
    request: DeepPartial<UpdateCustomPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomPasswordAgePolicyResponse>;
  /** The password age policy is not used at the moment */
  ResetPasswordAgePolicyToDefault(
    request: DeepPartial<ResetPasswordAgePolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetPasswordAgePolicyToDefaultResponse>;
  GetLockoutPolicy(
    request: DeepPartial<GetLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLockoutPolicyResponse>;
  GetDefaultLockoutPolicy(
    request: DeepPartial<GetDefaultLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLockoutPolicyResponse>;
  AddCustomLockoutPolicy(
    request: DeepPartial<AddCustomLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomLockoutPolicyResponse>;
  UpdateCustomLockoutPolicy(
    request: DeepPartial<UpdateCustomLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomLockoutPolicyResponse>;
  ResetLockoutPolicyToDefault(
    request: DeepPartial<ResetLockoutPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetLockoutPolicyToDefaultResponse>;
  GetPrivacyPolicy(
    request: DeepPartial<GetPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPrivacyPolicyResponse>;
  GetDefaultPrivacyPolicy(
    request: DeepPartial<GetDefaultPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPrivacyPolicyResponse>;
  AddCustomPrivacyPolicy(
    request: DeepPartial<AddCustomPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomPrivacyPolicyResponse>;
  UpdateCustomPrivacyPolicy(
    request: DeepPartial<UpdateCustomPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomPrivacyPolicyResponse>;
  ResetPrivacyPolicyToDefault(
    request: DeepPartial<ResetPrivacyPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetPrivacyPolicyToDefaultResponse>;
  GetNotificationPolicy(
    request: DeepPartial<GetNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetNotificationPolicyResponse>;
  GetDefaultNotificationPolicy(
    request: DeepPartial<GetDefaultNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultNotificationPolicyResponse>;
  AddCustomNotificationPolicy(
    request: DeepPartial<AddCustomNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomNotificationPolicyResponse>;
  UpdateCustomNotificationPolicy(
    request: DeepPartial<UpdateCustomNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomNotificationPolicyResponse>;
  ResetNotificationPolicyToDefault(
    request: DeepPartial<ResetNotificationPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetNotificationPolicyToDefaultResponse>;
  GetLabelPolicy(
    request: DeepPartial<GetLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLabelPolicyResponse>;
  GetPreviewLabelPolicy(
    request: DeepPartial<GetPreviewLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPreviewLabelPolicyResponse>;
  GetDefaultLabelPolicy(
    request: DeepPartial<GetDefaultLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLabelPolicyResponse>;
  AddCustomLabelPolicy(
    request: DeepPartial<AddCustomLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomLabelPolicyResponse>;
  UpdateCustomLabelPolicy(
    request: DeepPartial<UpdateCustomLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomLabelPolicyResponse>;
  ActivateCustomLabelPolicy(
    request: DeepPartial<ActivateCustomLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ActivateCustomLabelPolicyResponse>;
  RemoveCustomLabelPolicyLogo(
    request: DeepPartial<RemoveCustomLabelPolicyLogoRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyLogoResponse>;
  RemoveCustomLabelPolicyLogoDark(
    request: DeepPartial<RemoveCustomLabelPolicyLogoDarkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyLogoDarkResponse>;
  RemoveCustomLabelPolicyIcon(
    request: DeepPartial<RemoveCustomLabelPolicyIconRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyIconResponse>;
  RemoveCustomLabelPolicyIconDark(
    request: DeepPartial<RemoveCustomLabelPolicyIconDarkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyIconDarkResponse>;
  RemoveCustomLabelPolicyFont(
    request: DeepPartial<RemoveCustomLabelPolicyFontRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyFontResponse>;
  ResetLabelPolicyToDefault(
    request: DeepPartial<ResetLabelPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetLabelPolicyToDefaultResponse>;
  GetCustomInitMessageText(
    request: DeepPartial<GetCustomInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomInitMessageTextResponse>;
  GetDefaultInitMessageText(
    request: DeepPartial<GetDefaultInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultInitMessageTextResponse>;
  SetCustomInitMessageText(
    request: DeepPartial<SetCustomInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomInitMessageTextResponse>;
  ResetCustomInitMessageTextToDefault(
    request: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomInitMessageTextToDefaultResponse>;
  GetCustomPasswordResetMessageText(
    request: DeepPartial<GetCustomPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordResetMessageTextResponse>;
  GetDefaultPasswordResetMessageText(
    request: DeepPartial<GetDefaultPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordResetMessageTextResponse>;
  SetCustomPasswordResetMessageText(
    request: DeepPartial<SetCustomPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomPasswordResetMessageTextResponse>;
  ResetCustomPasswordResetMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordResetMessageTextToDefaultResponse>;
  GetCustomVerifyEmailMessageText(
    request: DeepPartial<GetCustomVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomVerifyEmailMessageTextResponse>;
  GetDefaultVerifyEmailMessageText(
    request: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultVerifyEmailMessageTextResponse>;
  SetCustomVerifyEmailMessageText(
    request: DeepPartial<SetCustomVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomVerifyEmailMessageTextResponse>;
  ResetCustomVerifyEmailMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomVerifyEmailMessageTextToDefaultResponse>;
  GetCustomVerifyPhoneMessageText(
    request: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomVerifyPhoneMessageTextResponse>;
  GetDefaultVerifyPhoneMessageText(
    request: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultVerifyPhoneMessageTextResponse>;
  SetCustomVerifyPhoneMessageText(
    request: DeepPartial<SetCustomVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomVerifyPhoneMessageTextResponse>;
  ResetCustomVerifyPhoneMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomVerifyPhoneMessageTextToDefaultResponse>;
  GetCustomDomainClaimedMessageText(
    request: DeepPartial<GetCustomDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomDomainClaimedMessageTextResponse>;
  GetDefaultDomainClaimedMessageText(
    request: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultDomainClaimedMessageTextResponse>;
  SetCustomDomainClaimedMessageCustomText(
    request: DeepPartial<SetCustomDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomDomainClaimedMessageTextResponse>;
  ResetCustomDomainClaimedMessageTextToDefault(
    request: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomDomainClaimedMessageTextToDefaultResponse>;
  GetCustomPasswordlessRegistrationMessageText(
    request: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordlessRegistrationMessageTextResponse>;
  GetDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordlessRegistrationMessageTextResponse>;
  SetCustomPasswordlessRegistrationMessageCustomText(
    request: DeepPartial<SetCustomPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomPasswordlessRegistrationMessageTextResponse>;
  ResetCustomPasswordlessRegistrationMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>;
  GetCustomPasswordChangeMessageText(
    request: DeepPartial<GetCustomPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordChangeMessageTextResponse>;
  GetDefaultPasswordChangeMessageText(
    request: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordChangeMessageTextResponse>;
  SetCustomPasswordChangeMessageCustomText(
    request: DeepPartial<SetCustomPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomPasswordChangeMessageTextResponse>;
  ResetCustomPasswordChangeMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordChangeMessageTextToDefaultResponse>;
  GetCustomLoginTexts(
    request: DeepPartial<GetCustomLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomLoginTextsResponse>;
  GetDefaultLoginTexts(
    request: DeepPartial<GetDefaultLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLoginTextsResponse>;
  SetCustomLoginText(
    request: DeepPartial<SetCustomLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomLoginTextsResponse>;
  ResetCustomLoginTextToDefault(
    request: DeepPartial<ResetCustomLoginTextsToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomLoginTextsToDefaultResponse>;
  GetOrgIDPByID(request: DeepPartial<GetOrgIDPByIDRequest>, metadata?: grpc.Metadata): Promise<GetOrgIDPByIDResponse>;
  ListOrgIDPs(request: DeepPartial<ListOrgIDPsRequest>, metadata?: grpc.Metadata): Promise<ListOrgIDPsResponse>;
  AddOrgOIDCIDP(request: DeepPartial<AddOrgOIDCIDPRequest>, metadata?: grpc.Metadata): Promise<AddOrgOIDCIDPResponse>;
  AddOrgJWTIDP(request: DeepPartial<AddOrgJWTIDPRequest>, metadata?: grpc.Metadata): Promise<AddOrgJWTIDPResponse>;
  DeactivateOrgIDP(
    request: DeepPartial<DeactivateOrgIDPRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateOrgIDPResponse>;
  ReactivateOrgIDP(
    request: DeepPartial<ReactivateOrgIDPRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateOrgIDPResponse>;
  RemoveOrgIDP(request: DeepPartial<RemoveOrgIDPRequest>, metadata?: grpc.Metadata): Promise<RemoveOrgIDPResponse>;
  UpdateOrgIDP(request: DeepPartial<UpdateOrgIDPRequest>, metadata?: grpc.Metadata): Promise<UpdateOrgIDPResponse>;
  UpdateOrgIDPOIDCConfig(
    request: DeepPartial<UpdateOrgIDPOIDCConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOrgIDPOIDCConfigResponse>;
  UpdateOrgIDPJWTConfig(
    request: DeepPartial<UpdateOrgIDPJWTConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOrgIDPJWTConfigResponse>;
  /**
   * Returns all identity providers, which match the query
   * Limit should always be set, there is a default limit set by the service
   */
  ListProviders(request: DeepPartial<ListProvidersRequest>, metadata?: grpc.Metadata): Promise<ListProvidersResponse>;
  /** Returns an identity provider of the organization */
  GetProviderByID(
    request: DeepPartial<GetProviderByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetProviderByIDResponse>;
  /** Add a new OAuth2 identity provider in the organization */
  AddGenericOAuthProvider(
    request: DeepPartial<AddGenericOAuthProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGenericOAuthProviderResponse>;
  /** Change an existing OAuth2 identity provider in the organization */
  UpdateGenericOAuthProvider(
    request: DeepPartial<UpdateGenericOAuthProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGenericOAuthProviderResponse>;
  /** Add a new OIDC identity provider in the organization */
  AddGenericOIDCProvider(
    request: DeepPartial<AddGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGenericOIDCProviderResponse>;
  /** Change an existing OIDC identity provider in the organization */
  UpdateGenericOIDCProvider(
    request: DeepPartial<UpdateGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGenericOIDCProviderResponse>;
  /** Migrate an existing OIDC identity provider in the organization */
  MigrateGenericOIDCProvider(
    request: DeepPartial<MigrateGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<MigrateGenericOIDCProviderResponse>;
  /** Add a new JWT identity provider in the organization */
  AddJWTProvider(
    request: DeepPartial<AddJWTProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddJWTProviderResponse>;
  /** Change an existing JWT identity provider in the organization */
  UpdateJWTProvider(
    request: DeepPartial<UpdateJWTProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateJWTProviderResponse>;
  /** Add a new Azure AD identity provider in the organisation */
  AddAzureADProvider(
    request: DeepPartial<AddAzureADProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddAzureADProviderResponse>;
  /** Change an existing Azure AD identity provider in the organisation */
  UpdateAzureADProvider(
    request: DeepPartial<UpdateAzureADProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateAzureADProviderResponse>;
  /** Add a new GitHub identity provider in the organization */
  AddGitHubProvider(
    request: DeepPartial<AddGitHubProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitHubProviderResponse>;
  /** Change an existing GitHub identity provider in the organization */
  UpdateGitHubProvider(
    request: DeepPartial<UpdateGitHubProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitHubProviderResponse>;
  /** Add a new GitHub Enterprise Server identity provider in the organization */
  AddGitHubEnterpriseServerProvider(
    request: DeepPartial<AddGitHubEnterpriseServerProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitHubEnterpriseServerProviderResponse>;
  /** Change an existing GitHub Enterprise Server identity provider in the organization */
  UpdateGitHubEnterpriseServerProvider(
    request: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitHubEnterpriseServerProviderResponse>;
  /** Add a new GitLab identity provider in the organization */
  AddGitLabProvider(
    request: DeepPartial<AddGitLabProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitLabProviderResponse>;
  /** Change an existing GitLab identity provider in the organization */
  UpdateGitLabProvider(
    request: DeepPartial<UpdateGitLabProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitLabProviderResponse>;
  /** Add a new self hosted GitLab identity provider in the organization */
  AddGitLabSelfHostedProvider(
    request: DeepPartial<AddGitLabSelfHostedProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitLabSelfHostedProviderResponse>;
  /** Change an existing self hosted GitLab identity provider in the organization */
  UpdateGitLabSelfHostedProvider(
    request: DeepPartial<UpdateGitLabSelfHostedProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitLabSelfHostedProviderResponse>;
  /** Add a new Google identity provider in the organization */
  AddGoogleProvider(
    request: DeepPartial<AddGoogleProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGoogleProviderResponse>;
  /** Change an existing Google identity provider in the organization */
  UpdateGoogleProvider(
    request: DeepPartial<UpdateGoogleProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGoogleProviderResponse>;
  /** Add a new LDAP identity provider in the organization */
  AddLDAPProvider(
    request: DeepPartial<AddLDAPProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddLDAPProviderResponse>;
  /** Change an existing LDAP identity provider in the organization */
  UpdateLDAPProvider(
    request: DeepPartial<UpdateLDAPProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLDAPProviderResponse>;
  /**
   * Remove an identity provider
   * Will remove all linked providers of this configuration on the users
   */
  DeleteProvider(
    request: DeepPartial<DeleteProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeleteProviderResponse>;
  ListActions(request: DeepPartial<ListActionsRequest>, metadata?: grpc.Metadata): Promise<ListActionsResponse>;
  GetAction(request: DeepPartial<GetActionRequest>, metadata?: grpc.Metadata): Promise<GetActionResponse>;
  CreateAction(request: DeepPartial<CreateActionRequest>, metadata?: grpc.Metadata): Promise<CreateActionResponse>;
  UpdateAction(request: DeepPartial<UpdateActionRequest>, metadata?: grpc.Metadata): Promise<UpdateActionResponse>;
  DeactivateAction(
    request: DeepPartial<DeactivateActionRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateActionResponse>;
  ReactivateAction(
    request: DeepPartial<ReactivateActionRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateActionResponse>;
  DeleteAction(request: DeepPartial<DeleteActionRequest>, metadata?: grpc.Metadata): Promise<DeleteActionResponse>;
  ListFlowTypes(request: DeepPartial<ListFlowTypesRequest>, metadata?: grpc.Metadata): Promise<ListFlowTypesResponse>;
  ListFlowTriggerTypes(
    request: DeepPartial<ListFlowTriggerTypesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListFlowTriggerTypesResponse>;
  GetFlow(request: DeepPartial<GetFlowRequest>, metadata?: grpc.Metadata): Promise<GetFlowResponse>;
  ClearFlow(request: DeepPartial<ClearFlowRequest>, metadata?: grpc.Metadata): Promise<ClearFlowResponse>;
  SetTriggerActions(
    request: DeepPartial<SetTriggerActionsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetTriggerActionsResponse>;
}

export class ManagementServiceClientImpl implements ManagementService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Healthz = this.Healthz.bind(this);
    this.GetOIDCInformation = this.GetOIDCInformation.bind(this);
    this.GetIAM = this.GetIAM.bind(this);
    this.GetSupportedLanguages = this.GetSupportedLanguages.bind(this);
    this.GetUserByID = this.GetUserByID.bind(this);
    this.GetUserByLoginNameGlobal = this.GetUserByLoginNameGlobal.bind(this);
    this.ListUsers = this.ListUsers.bind(this);
    this.ListUserChanges = this.ListUserChanges.bind(this);
    this.IsUserUnique = this.IsUserUnique.bind(this);
    this.AddHumanUser = this.AddHumanUser.bind(this);
    this.ImportHumanUser = this.ImportHumanUser.bind(this);
    this.AddMachineUser = this.AddMachineUser.bind(this);
    this.DeactivateUser = this.DeactivateUser.bind(this);
    this.ReactivateUser = this.ReactivateUser.bind(this);
    this.LockUser = this.LockUser.bind(this);
    this.UnlockUser = this.UnlockUser.bind(this);
    this.RemoveUser = this.RemoveUser.bind(this);
    this.UpdateUserName = this.UpdateUserName.bind(this);
    this.SetUserMetadata = this.SetUserMetadata.bind(this);
    this.BulkSetUserMetadata = this.BulkSetUserMetadata.bind(this);
    this.ListUserMetadata = this.ListUserMetadata.bind(this);
    this.GetUserMetadata = this.GetUserMetadata.bind(this);
    this.RemoveUserMetadata = this.RemoveUserMetadata.bind(this);
    this.BulkRemoveUserMetadata = this.BulkRemoveUserMetadata.bind(this);
    this.GetHumanProfile = this.GetHumanProfile.bind(this);
    this.UpdateHumanProfile = this.UpdateHumanProfile.bind(this);
    this.GetHumanEmail = this.GetHumanEmail.bind(this);
    this.UpdateHumanEmail = this.UpdateHumanEmail.bind(this);
    this.ResendHumanInitialization = this.ResendHumanInitialization.bind(this);
    this.ResendHumanEmailVerification = this.ResendHumanEmailVerification.bind(this);
    this.GetHumanPhone = this.GetHumanPhone.bind(this);
    this.UpdateHumanPhone = this.UpdateHumanPhone.bind(this);
    this.RemoveHumanPhone = this.RemoveHumanPhone.bind(this);
    this.ResendHumanPhoneVerification = this.ResendHumanPhoneVerification.bind(this);
    this.RemoveHumanAvatar = this.RemoveHumanAvatar.bind(this);
    this.SetHumanInitialPassword = this.SetHumanInitialPassword.bind(this);
    this.SetHumanPassword = this.SetHumanPassword.bind(this);
    this.SendHumanResetPasswordNotification = this.SendHumanResetPasswordNotification.bind(this);
    this.ListHumanAuthFactors = this.ListHumanAuthFactors.bind(this);
    this.RemoveHumanAuthFactorOTP = this.RemoveHumanAuthFactorOTP.bind(this);
    this.RemoveHumanAuthFactorU2F = this.RemoveHumanAuthFactorU2F.bind(this);
    this.ListHumanPasswordless = this.ListHumanPasswordless.bind(this);
    this.AddPasswordlessRegistration = this.AddPasswordlessRegistration.bind(this);
    this.SendPasswordlessRegistration = this.SendPasswordlessRegistration.bind(this);
    this.RemoveHumanPasswordless = this.RemoveHumanPasswordless.bind(this);
    this.UpdateMachine = this.UpdateMachine.bind(this);
    this.GenerateMachineSecret = this.GenerateMachineSecret.bind(this);
    this.RemoveMachineSecret = this.RemoveMachineSecret.bind(this);
    this.GetMachineKeyByIDs = this.GetMachineKeyByIDs.bind(this);
    this.ListMachineKeys = this.ListMachineKeys.bind(this);
    this.AddMachineKey = this.AddMachineKey.bind(this);
    this.RemoveMachineKey = this.RemoveMachineKey.bind(this);
    this.GetPersonalAccessTokenByIDs = this.GetPersonalAccessTokenByIDs.bind(this);
    this.ListPersonalAccessTokens = this.ListPersonalAccessTokens.bind(this);
    this.AddPersonalAccessToken = this.AddPersonalAccessToken.bind(this);
    this.RemovePersonalAccessToken = this.RemovePersonalAccessToken.bind(this);
    this.ListHumanLinkedIDPs = this.ListHumanLinkedIDPs.bind(this);
    this.RemoveHumanLinkedIDP = this.RemoveHumanLinkedIDP.bind(this);
    this.ListUserMemberships = this.ListUserMemberships.bind(this);
    this.GetMyOrg = this.GetMyOrg.bind(this);
    this.GetOrgByDomainGlobal = this.GetOrgByDomainGlobal.bind(this);
    this.ListOrgChanges = this.ListOrgChanges.bind(this);
    this.AddOrg = this.AddOrg.bind(this);
    this.UpdateOrg = this.UpdateOrg.bind(this);
    this.DeactivateOrg = this.DeactivateOrg.bind(this);
    this.ReactivateOrg = this.ReactivateOrg.bind(this);
    this.RemoveOrg = this.RemoveOrg.bind(this);
    this.SetOrgMetadata = this.SetOrgMetadata.bind(this);
    this.BulkSetOrgMetadata = this.BulkSetOrgMetadata.bind(this);
    this.ListOrgMetadata = this.ListOrgMetadata.bind(this);
    this.GetOrgMetadata = this.GetOrgMetadata.bind(this);
    this.RemoveOrgMetadata = this.RemoveOrgMetadata.bind(this);
    this.BulkRemoveOrgMetadata = this.BulkRemoveOrgMetadata.bind(this);
    this.ListOrgDomains = this.ListOrgDomains.bind(this);
    this.AddOrgDomain = this.AddOrgDomain.bind(this);
    this.RemoveOrgDomain = this.RemoveOrgDomain.bind(this);
    this.GenerateOrgDomainValidation = this.GenerateOrgDomainValidation.bind(this);
    this.ValidateOrgDomain = this.ValidateOrgDomain.bind(this);
    this.SetPrimaryOrgDomain = this.SetPrimaryOrgDomain.bind(this);
    this.ListOrgMemberRoles = this.ListOrgMemberRoles.bind(this);
    this.ListOrgMembers = this.ListOrgMembers.bind(this);
    this.AddOrgMember = this.AddOrgMember.bind(this);
    this.UpdateOrgMember = this.UpdateOrgMember.bind(this);
    this.RemoveOrgMember = this.RemoveOrgMember.bind(this);
    this.GetProjectByID = this.GetProjectByID.bind(this);
    this.GetGrantedProjectByID = this.GetGrantedProjectByID.bind(this);
    this.ListProjects = this.ListProjects.bind(this);
    this.ListGrantedProjects = this.ListGrantedProjects.bind(this);
    this.ListGrantedProjectRoles = this.ListGrantedProjectRoles.bind(this);
    this.ListProjectChanges = this.ListProjectChanges.bind(this);
    this.AddProject = this.AddProject.bind(this);
    this.UpdateProject = this.UpdateProject.bind(this);
    this.DeactivateProject = this.DeactivateProject.bind(this);
    this.ReactivateProject = this.ReactivateProject.bind(this);
    this.RemoveProject = this.RemoveProject.bind(this);
    this.ListProjectRoles = this.ListProjectRoles.bind(this);
    this.AddProjectRole = this.AddProjectRole.bind(this);
    this.BulkAddProjectRoles = this.BulkAddProjectRoles.bind(this);
    this.UpdateProjectRole = this.UpdateProjectRole.bind(this);
    this.RemoveProjectRole = this.RemoveProjectRole.bind(this);
    this.ListProjectMemberRoles = this.ListProjectMemberRoles.bind(this);
    this.ListProjectMembers = this.ListProjectMembers.bind(this);
    this.AddProjectMember = this.AddProjectMember.bind(this);
    this.UpdateProjectMember = this.UpdateProjectMember.bind(this);
    this.RemoveProjectMember = this.RemoveProjectMember.bind(this);
    this.GetAppByID = this.GetAppByID.bind(this);
    this.ListApps = this.ListApps.bind(this);
    this.ListAppChanges = this.ListAppChanges.bind(this);
    this.AddOIDCApp = this.AddOIDCApp.bind(this);
    this.AddSAMLApp = this.AddSAMLApp.bind(this);
    this.AddAPIApp = this.AddAPIApp.bind(this);
    this.UpdateApp = this.UpdateApp.bind(this);
    this.UpdateOIDCAppConfig = this.UpdateOIDCAppConfig.bind(this);
    this.UpdateSAMLAppConfig = this.UpdateSAMLAppConfig.bind(this);
    this.UpdateAPIAppConfig = this.UpdateAPIAppConfig.bind(this);
    this.DeactivateApp = this.DeactivateApp.bind(this);
    this.ReactivateApp = this.ReactivateApp.bind(this);
    this.RemoveApp = this.RemoveApp.bind(this);
    this.RegenerateOIDCClientSecret = this.RegenerateOIDCClientSecret.bind(this);
    this.RegenerateAPIClientSecret = this.RegenerateAPIClientSecret.bind(this);
    this.GetAppKey = this.GetAppKey.bind(this);
    this.ListAppKeys = this.ListAppKeys.bind(this);
    this.AddAppKey = this.AddAppKey.bind(this);
    this.RemoveAppKey = this.RemoveAppKey.bind(this);
    this.ListProjectGrantChanges = this.ListProjectGrantChanges.bind(this);
    this.GetProjectGrantByID = this.GetProjectGrantByID.bind(this);
    this.ListProjectGrants = this.ListProjectGrants.bind(this);
    this.ListAllProjectGrants = this.ListAllProjectGrants.bind(this);
    this.AddProjectGrant = this.AddProjectGrant.bind(this);
    this.UpdateProjectGrant = this.UpdateProjectGrant.bind(this);
    this.DeactivateProjectGrant = this.DeactivateProjectGrant.bind(this);
    this.ReactivateProjectGrant = this.ReactivateProjectGrant.bind(this);
    this.RemoveProjectGrant = this.RemoveProjectGrant.bind(this);
    this.ListProjectGrantMemberRoles = this.ListProjectGrantMemberRoles.bind(this);
    this.ListProjectGrantMembers = this.ListProjectGrantMembers.bind(this);
    this.AddProjectGrantMember = this.AddProjectGrantMember.bind(this);
    this.UpdateProjectGrantMember = this.UpdateProjectGrantMember.bind(this);
    this.RemoveProjectGrantMember = this.RemoveProjectGrantMember.bind(this);
    this.GetUserGrantByID = this.GetUserGrantByID.bind(this);
    this.ListUserGrants = this.ListUserGrants.bind(this);
    this.AddUserGrant = this.AddUserGrant.bind(this);
    this.UpdateUserGrant = this.UpdateUserGrant.bind(this);
    this.DeactivateUserGrant = this.DeactivateUserGrant.bind(this);
    this.ReactivateUserGrant = this.ReactivateUserGrant.bind(this);
    this.RemoveUserGrant = this.RemoveUserGrant.bind(this);
    this.BulkRemoveUserGrant = this.BulkRemoveUserGrant.bind(this);
    this.GetOrgIAMPolicy = this.GetOrgIAMPolicy.bind(this);
    this.GetDomainPolicy = this.GetDomainPolicy.bind(this);
    this.GetLoginPolicy = this.GetLoginPolicy.bind(this);
    this.GetDefaultLoginPolicy = this.GetDefaultLoginPolicy.bind(this);
    this.AddCustomLoginPolicy = this.AddCustomLoginPolicy.bind(this);
    this.UpdateCustomLoginPolicy = this.UpdateCustomLoginPolicy.bind(this);
    this.ResetLoginPolicyToDefault = this.ResetLoginPolicyToDefault.bind(this);
    this.ListLoginPolicyIDPs = this.ListLoginPolicyIDPs.bind(this);
    this.AddIDPToLoginPolicy = this.AddIDPToLoginPolicy.bind(this);
    this.RemoveIDPFromLoginPolicy = this.RemoveIDPFromLoginPolicy.bind(this);
    this.ListLoginPolicySecondFactors = this.ListLoginPolicySecondFactors.bind(this);
    this.AddSecondFactorToLoginPolicy = this.AddSecondFactorToLoginPolicy.bind(this);
    this.RemoveSecondFactorFromLoginPolicy = this.RemoveSecondFactorFromLoginPolicy.bind(this);
    this.ListLoginPolicyMultiFactors = this.ListLoginPolicyMultiFactors.bind(this);
    this.AddMultiFactorToLoginPolicy = this.AddMultiFactorToLoginPolicy.bind(this);
    this.RemoveMultiFactorFromLoginPolicy = this.RemoveMultiFactorFromLoginPolicy.bind(this);
    this.GetPasswordComplexityPolicy = this.GetPasswordComplexityPolicy.bind(this);
    this.GetDefaultPasswordComplexityPolicy = this.GetDefaultPasswordComplexityPolicy.bind(this);
    this.AddCustomPasswordComplexityPolicy = this.AddCustomPasswordComplexityPolicy.bind(this);
    this.UpdateCustomPasswordComplexityPolicy = this.UpdateCustomPasswordComplexityPolicy.bind(this);
    this.ResetPasswordComplexityPolicyToDefault = this.ResetPasswordComplexityPolicyToDefault.bind(this);
    this.GetPasswordAgePolicy = this.GetPasswordAgePolicy.bind(this);
    this.GetDefaultPasswordAgePolicy = this.GetDefaultPasswordAgePolicy.bind(this);
    this.AddCustomPasswordAgePolicy = this.AddCustomPasswordAgePolicy.bind(this);
    this.UpdateCustomPasswordAgePolicy = this.UpdateCustomPasswordAgePolicy.bind(this);
    this.ResetPasswordAgePolicyToDefault = this.ResetPasswordAgePolicyToDefault.bind(this);
    this.GetLockoutPolicy = this.GetLockoutPolicy.bind(this);
    this.GetDefaultLockoutPolicy = this.GetDefaultLockoutPolicy.bind(this);
    this.AddCustomLockoutPolicy = this.AddCustomLockoutPolicy.bind(this);
    this.UpdateCustomLockoutPolicy = this.UpdateCustomLockoutPolicy.bind(this);
    this.ResetLockoutPolicyToDefault = this.ResetLockoutPolicyToDefault.bind(this);
    this.GetPrivacyPolicy = this.GetPrivacyPolicy.bind(this);
    this.GetDefaultPrivacyPolicy = this.GetDefaultPrivacyPolicy.bind(this);
    this.AddCustomPrivacyPolicy = this.AddCustomPrivacyPolicy.bind(this);
    this.UpdateCustomPrivacyPolicy = this.UpdateCustomPrivacyPolicy.bind(this);
    this.ResetPrivacyPolicyToDefault = this.ResetPrivacyPolicyToDefault.bind(this);
    this.GetNotificationPolicy = this.GetNotificationPolicy.bind(this);
    this.GetDefaultNotificationPolicy = this.GetDefaultNotificationPolicy.bind(this);
    this.AddCustomNotificationPolicy = this.AddCustomNotificationPolicy.bind(this);
    this.UpdateCustomNotificationPolicy = this.UpdateCustomNotificationPolicy.bind(this);
    this.ResetNotificationPolicyToDefault = this.ResetNotificationPolicyToDefault.bind(this);
    this.GetLabelPolicy = this.GetLabelPolicy.bind(this);
    this.GetPreviewLabelPolicy = this.GetPreviewLabelPolicy.bind(this);
    this.GetDefaultLabelPolicy = this.GetDefaultLabelPolicy.bind(this);
    this.AddCustomLabelPolicy = this.AddCustomLabelPolicy.bind(this);
    this.UpdateCustomLabelPolicy = this.UpdateCustomLabelPolicy.bind(this);
    this.ActivateCustomLabelPolicy = this.ActivateCustomLabelPolicy.bind(this);
    this.RemoveCustomLabelPolicyLogo = this.RemoveCustomLabelPolicyLogo.bind(this);
    this.RemoveCustomLabelPolicyLogoDark = this.RemoveCustomLabelPolicyLogoDark.bind(this);
    this.RemoveCustomLabelPolicyIcon = this.RemoveCustomLabelPolicyIcon.bind(this);
    this.RemoveCustomLabelPolicyIconDark = this.RemoveCustomLabelPolicyIconDark.bind(this);
    this.RemoveCustomLabelPolicyFont = this.RemoveCustomLabelPolicyFont.bind(this);
    this.ResetLabelPolicyToDefault = this.ResetLabelPolicyToDefault.bind(this);
    this.GetCustomInitMessageText = this.GetCustomInitMessageText.bind(this);
    this.GetDefaultInitMessageText = this.GetDefaultInitMessageText.bind(this);
    this.SetCustomInitMessageText = this.SetCustomInitMessageText.bind(this);
    this.ResetCustomInitMessageTextToDefault = this.ResetCustomInitMessageTextToDefault.bind(this);
    this.GetCustomPasswordResetMessageText = this.GetCustomPasswordResetMessageText.bind(this);
    this.GetDefaultPasswordResetMessageText = this.GetDefaultPasswordResetMessageText.bind(this);
    this.SetCustomPasswordResetMessageText = this.SetCustomPasswordResetMessageText.bind(this);
    this.ResetCustomPasswordResetMessageTextToDefault = this.ResetCustomPasswordResetMessageTextToDefault.bind(this);
    this.GetCustomVerifyEmailMessageText = this.GetCustomVerifyEmailMessageText.bind(this);
    this.GetDefaultVerifyEmailMessageText = this.GetDefaultVerifyEmailMessageText.bind(this);
    this.SetCustomVerifyEmailMessageText = this.SetCustomVerifyEmailMessageText.bind(this);
    this.ResetCustomVerifyEmailMessageTextToDefault = this.ResetCustomVerifyEmailMessageTextToDefault.bind(this);
    this.GetCustomVerifyPhoneMessageText = this.GetCustomVerifyPhoneMessageText.bind(this);
    this.GetDefaultVerifyPhoneMessageText = this.GetDefaultVerifyPhoneMessageText.bind(this);
    this.SetCustomVerifyPhoneMessageText = this.SetCustomVerifyPhoneMessageText.bind(this);
    this.ResetCustomVerifyPhoneMessageTextToDefault = this.ResetCustomVerifyPhoneMessageTextToDefault.bind(this);
    this.GetCustomDomainClaimedMessageText = this.GetCustomDomainClaimedMessageText.bind(this);
    this.GetDefaultDomainClaimedMessageText = this.GetDefaultDomainClaimedMessageText.bind(this);
    this.SetCustomDomainClaimedMessageCustomText = this.SetCustomDomainClaimedMessageCustomText.bind(this);
    this.ResetCustomDomainClaimedMessageTextToDefault = this.ResetCustomDomainClaimedMessageTextToDefault.bind(this);
    this.GetCustomPasswordlessRegistrationMessageText = this.GetCustomPasswordlessRegistrationMessageText.bind(this);
    this.GetDefaultPasswordlessRegistrationMessageText = this.GetDefaultPasswordlessRegistrationMessageText.bind(this);
    this.SetCustomPasswordlessRegistrationMessageCustomText = this.SetCustomPasswordlessRegistrationMessageCustomText
      .bind(this);
    this.ResetCustomPasswordlessRegistrationMessageTextToDefault = this
      .ResetCustomPasswordlessRegistrationMessageTextToDefault.bind(this);
    this.GetCustomPasswordChangeMessageText = this.GetCustomPasswordChangeMessageText.bind(this);
    this.GetDefaultPasswordChangeMessageText = this.GetDefaultPasswordChangeMessageText.bind(this);
    this.SetCustomPasswordChangeMessageCustomText = this.SetCustomPasswordChangeMessageCustomText.bind(this);
    this.ResetCustomPasswordChangeMessageTextToDefault = this.ResetCustomPasswordChangeMessageTextToDefault.bind(this);
    this.GetCustomLoginTexts = this.GetCustomLoginTexts.bind(this);
    this.GetDefaultLoginTexts = this.GetDefaultLoginTexts.bind(this);
    this.SetCustomLoginText = this.SetCustomLoginText.bind(this);
    this.ResetCustomLoginTextToDefault = this.ResetCustomLoginTextToDefault.bind(this);
    this.GetOrgIDPByID = this.GetOrgIDPByID.bind(this);
    this.ListOrgIDPs = this.ListOrgIDPs.bind(this);
    this.AddOrgOIDCIDP = this.AddOrgOIDCIDP.bind(this);
    this.AddOrgJWTIDP = this.AddOrgJWTIDP.bind(this);
    this.DeactivateOrgIDP = this.DeactivateOrgIDP.bind(this);
    this.ReactivateOrgIDP = this.ReactivateOrgIDP.bind(this);
    this.RemoveOrgIDP = this.RemoveOrgIDP.bind(this);
    this.UpdateOrgIDP = this.UpdateOrgIDP.bind(this);
    this.UpdateOrgIDPOIDCConfig = this.UpdateOrgIDPOIDCConfig.bind(this);
    this.UpdateOrgIDPJWTConfig = this.UpdateOrgIDPJWTConfig.bind(this);
    this.ListProviders = this.ListProviders.bind(this);
    this.GetProviderByID = this.GetProviderByID.bind(this);
    this.AddGenericOAuthProvider = this.AddGenericOAuthProvider.bind(this);
    this.UpdateGenericOAuthProvider = this.UpdateGenericOAuthProvider.bind(this);
    this.AddGenericOIDCProvider = this.AddGenericOIDCProvider.bind(this);
    this.UpdateGenericOIDCProvider = this.UpdateGenericOIDCProvider.bind(this);
    this.MigrateGenericOIDCProvider = this.MigrateGenericOIDCProvider.bind(this);
    this.AddJWTProvider = this.AddJWTProvider.bind(this);
    this.UpdateJWTProvider = this.UpdateJWTProvider.bind(this);
    this.AddAzureADProvider = this.AddAzureADProvider.bind(this);
    this.UpdateAzureADProvider = this.UpdateAzureADProvider.bind(this);
    this.AddGitHubProvider = this.AddGitHubProvider.bind(this);
    this.UpdateGitHubProvider = this.UpdateGitHubProvider.bind(this);
    this.AddGitHubEnterpriseServerProvider = this.AddGitHubEnterpriseServerProvider.bind(this);
    this.UpdateGitHubEnterpriseServerProvider = this.UpdateGitHubEnterpriseServerProvider.bind(this);
    this.AddGitLabProvider = this.AddGitLabProvider.bind(this);
    this.UpdateGitLabProvider = this.UpdateGitLabProvider.bind(this);
    this.AddGitLabSelfHostedProvider = this.AddGitLabSelfHostedProvider.bind(this);
    this.UpdateGitLabSelfHostedProvider = this.UpdateGitLabSelfHostedProvider.bind(this);
    this.AddGoogleProvider = this.AddGoogleProvider.bind(this);
    this.UpdateGoogleProvider = this.UpdateGoogleProvider.bind(this);
    this.AddLDAPProvider = this.AddLDAPProvider.bind(this);
    this.UpdateLDAPProvider = this.UpdateLDAPProvider.bind(this);
    this.DeleteProvider = this.DeleteProvider.bind(this);
    this.ListActions = this.ListActions.bind(this);
    this.GetAction = this.GetAction.bind(this);
    this.CreateAction = this.CreateAction.bind(this);
    this.UpdateAction = this.UpdateAction.bind(this);
    this.DeactivateAction = this.DeactivateAction.bind(this);
    this.ReactivateAction = this.ReactivateAction.bind(this);
    this.DeleteAction = this.DeleteAction.bind(this);
    this.ListFlowTypes = this.ListFlowTypes.bind(this);
    this.ListFlowTriggerTypes = this.ListFlowTriggerTypes.bind(this);
    this.GetFlow = this.GetFlow.bind(this);
    this.ClearFlow = this.ClearFlow.bind(this);
    this.SetTriggerActions = this.SetTriggerActions.bind(this);
  }

  Healthz(request: DeepPartial<HealthzRequest>, metadata?: grpc.Metadata): Promise<HealthzResponse> {
    return this.rpc.unary(ManagementServiceHealthzDesc, HealthzRequest.fromPartial(request), metadata);
  }

  GetOIDCInformation(
    request: DeepPartial<GetOIDCInformationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOIDCInformationResponse> {
    return this.rpc.unary(
      ManagementServiceGetOIDCInformationDesc,
      GetOIDCInformationRequest.fromPartial(request),
      metadata,
    );
  }

  GetIAM(request: DeepPartial<GetIAMRequest>, metadata?: grpc.Metadata): Promise<GetIAMResponse> {
    return this.rpc.unary(ManagementServiceGetIAMDesc, GetIAMRequest.fromPartial(request), metadata);
  }

  GetSupportedLanguages(
    request: DeepPartial<GetSupportedLanguagesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetSupportedLanguagesResponse> {
    return this.rpc.unary(
      ManagementServiceGetSupportedLanguagesDesc,
      GetSupportedLanguagesRequest.fromPartial(request),
      metadata,
    );
  }

  GetUserByID(request: DeepPartial<GetUserByIDRequest>, metadata?: grpc.Metadata): Promise<GetUserByIDResponse> {
    return this.rpc.unary(ManagementServiceGetUserByIDDesc, GetUserByIDRequest.fromPartial(request), metadata);
  }

  GetUserByLoginNameGlobal(
    request: DeepPartial<GetUserByLoginNameGlobalRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetUserByLoginNameGlobalResponse> {
    return this.rpc.unary(
      ManagementServiceGetUserByLoginNameGlobalDesc,
      GetUserByLoginNameGlobalRequest.fromPartial(request),
      metadata,
    );
  }

  ListUsers(request: DeepPartial<ListUsersRequest>, metadata?: grpc.Metadata): Promise<ListUsersResponse> {
    return this.rpc.unary(ManagementServiceListUsersDesc, ListUsersRequest.fromPartial(request), metadata);
  }

  ListUserChanges(
    request: DeepPartial<ListUserChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListUserChangesResponse> {
    return this.rpc.unary(ManagementServiceListUserChangesDesc, ListUserChangesRequest.fromPartial(request), metadata);
  }

  IsUserUnique(request: DeepPartial<IsUserUniqueRequest>, metadata?: grpc.Metadata): Promise<IsUserUniqueResponse> {
    return this.rpc.unary(ManagementServiceIsUserUniqueDesc, IsUserUniqueRequest.fromPartial(request), metadata);
  }

  AddHumanUser(request: DeepPartial<AddHumanUserRequest>, metadata?: grpc.Metadata): Promise<AddHumanUserResponse> {
    return this.rpc.unary(ManagementServiceAddHumanUserDesc, AddHumanUserRequest.fromPartial(request), metadata);
  }

  ImportHumanUser(
    request: DeepPartial<ImportHumanUserRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ImportHumanUserResponse> {
    return this.rpc.unary(ManagementServiceImportHumanUserDesc, ImportHumanUserRequest.fromPartial(request), metadata);
  }

  AddMachineUser(
    request: DeepPartial<AddMachineUserRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddMachineUserResponse> {
    return this.rpc.unary(ManagementServiceAddMachineUserDesc, AddMachineUserRequest.fromPartial(request), metadata);
  }

  DeactivateUser(
    request: DeepPartial<DeactivateUserRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateUserResponse> {
    return this.rpc.unary(ManagementServiceDeactivateUserDesc, DeactivateUserRequest.fromPartial(request), metadata);
  }

  ReactivateUser(
    request: DeepPartial<ReactivateUserRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateUserResponse> {
    return this.rpc.unary(ManagementServiceReactivateUserDesc, ReactivateUserRequest.fromPartial(request), metadata);
  }

  LockUser(request: DeepPartial<LockUserRequest>, metadata?: grpc.Metadata): Promise<LockUserResponse> {
    return this.rpc.unary(ManagementServiceLockUserDesc, LockUserRequest.fromPartial(request), metadata);
  }

  UnlockUser(request: DeepPartial<UnlockUserRequest>, metadata?: grpc.Metadata): Promise<UnlockUserResponse> {
    return this.rpc.unary(ManagementServiceUnlockUserDesc, UnlockUserRequest.fromPartial(request), metadata);
  }

  RemoveUser(request: DeepPartial<RemoveUserRequest>, metadata?: grpc.Metadata): Promise<RemoveUserResponse> {
    return this.rpc.unary(ManagementServiceRemoveUserDesc, RemoveUserRequest.fromPartial(request), metadata);
  }

  UpdateUserName(
    request: DeepPartial<UpdateUserNameRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateUserNameResponse> {
    return this.rpc.unary(ManagementServiceUpdateUserNameDesc, UpdateUserNameRequest.fromPartial(request), metadata);
  }

  SetUserMetadata(
    request: DeepPartial<SetUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetUserMetadataResponse> {
    return this.rpc.unary(ManagementServiceSetUserMetadataDesc, SetUserMetadataRequest.fromPartial(request), metadata);
  }

  BulkSetUserMetadata(
    request: DeepPartial<BulkSetUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkSetUserMetadataResponse> {
    return this.rpc.unary(
      ManagementServiceBulkSetUserMetadataDesc,
      BulkSetUserMetadataRequest.fromPartial(request),
      metadata,
    );
  }

  ListUserMetadata(
    request: DeepPartial<ListUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListUserMetadataResponse> {
    return this.rpc.unary(
      ManagementServiceListUserMetadataDesc,
      ListUserMetadataRequest.fromPartial(request),
      metadata,
    );
  }

  GetUserMetadata(
    request: DeepPartial<GetUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetUserMetadataResponse> {
    return this.rpc.unary(ManagementServiceGetUserMetadataDesc, GetUserMetadataRequest.fromPartial(request), metadata);
  }

  RemoveUserMetadata(
    request: DeepPartial<RemoveUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveUserMetadataResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveUserMetadataDesc,
      RemoveUserMetadataRequest.fromPartial(request),
      metadata,
    );
  }

  BulkRemoveUserMetadata(
    request: DeepPartial<BulkRemoveUserMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkRemoveUserMetadataResponse> {
    return this.rpc.unary(
      ManagementServiceBulkRemoveUserMetadataDesc,
      BulkRemoveUserMetadataRequest.fromPartial(request),
      metadata,
    );
  }

  GetHumanProfile(
    request: DeepPartial<GetHumanProfileRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetHumanProfileResponse> {
    return this.rpc.unary(ManagementServiceGetHumanProfileDesc, GetHumanProfileRequest.fromPartial(request), metadata);
  }

  UpdateHumanProfile(
    request: DeepPartial<UpdateHumanProfileRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateHumanProfileResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateHumanProfileDesc,
      UpdateHumanProfileRequest.fromPartial(request),
      metadata,
    );
  }

  GetHumanEmail(request: DeepPartial<GetHumanEmailRequest>, metadata?: grpc.Metadata): Promise<GetHumanEmailResponse> {
    return this.rpc.unary(ManagementServiceGetHumanEmailDesc, GetHumanEmailRequest.fromPartial(request), metadata);
  }

  UpdateHumanEmail(
    request: DeepPartial<UpdateHumanEmailRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateHumanEmailResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateHumanEmailDesc,
      UpdateHumanEmailRequest.fromPartial(request),
      metadata,
    );
  }

  ResendHumanInitialization(
    request: DeepPartial<ResendHumanInitializationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResendHumanInitializationResponse> {
    return this.rpc.unary(
      ManagementServiceResendHumanInitializationDesc,
      ResendHumanInitializationRequest.fromPartial(request),
      metadata,
    );
  }

  ResendHumanEmailVerification(
    request: DeepPartial<ResendHumanEmailVerificationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResendHumanEmailVerificationResponse> {
    return this.rpc.unary(
      ManagementServiceResendHumanEmailVerificationDesc,
      ResendHumanEmailVerificationRequest.fromPartial(request),
      metadata,
    );
  }

  GetHumanPhone(request: DeepPartial<GetHumanPhoneRequest>, metadata?: grpc.Metadata): Promise<GetHumanPhoneResponse> {
    return this.rpc.unary(ManagementServiceGetHumanPhoneDesc, GetHumanPhoneRequest.fromPartial(request), metadata);
  }

  UpdateHumanPhone(
    request: DeepPartial<UpdateHumanPhoneRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateHumanPhoneResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateHumanPhoneDesc,
      UpdateHumanPhoneRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveHumanPhone(
    request: DeepPartial<RemoveHumanPhoneRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanPhoneResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveHumanPhoneDesc,
      RemoveHumanPhoneRequest.fromPartial(request),
      metadata,
    );
  }

  ResendHumanPhoneVerification(
    request: DeepPartial<ResendHumanPhoneVerificationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResendHumanPhoneVerificationResponse> {
    return this.rpc.unary(
      ManagementServiceResendHumanPhoneVerificationDesc,
      ResendHumanPhoneVerificationRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveHumanAvatar(
    request: DeepPartial<RemoveHumanAvatarRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanAvatarResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveHumanAvatarDesc,
      RemoveHumanAvatarRequest.fromPartial(request),
      metadata,
    );
  }

  SetHumanInitialPassword(
    request: DeepPartial<SetHumanInitialPasswordRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetHumanInitialPasswordResponse> {
    return this.rpc.unary(
      ManagementServiceSetHumanInitialPasswordDesc,
      SetHumanInitialPasswordRequest.fromPartial(request),
      metadata,
    );
  }

  SetHumanPassword(
    request: DeepPartial<SetHumanPasswordRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetHumanPasswordResponse> {
    return this.rpc.unary(
      ManagementServiceSetHumanPasswordDesc,
      SetHumanPasswordRequest.fromPartial(request),
      metadata,
    );
  }

  SendHumanResetPasswordNotification(
    request: DeepPartial<SendHumanResetPasswordNotificationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SendHumanResetPasswordNotificationResponse> {
    return this.rpc.unary(
      ManagementServiceSendHumanResetPasswordNotificationDesc,
      SendHumanResetPasswordNotificationRequest.fromPartial(request),
      metadata,
    );
  }

  ListHumanAuthFactors(
    request: DeepPartial<ListHumanAuthFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListHumanAuthFactorsResponse> {
    return this.rpc.unary(
      ManagementServiceListHumanAuthFactorsDesc,
      ListHumanAuthFactorsRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveHumanAuthFactorOTP(
    request: DeepPartial<RemoveHumanAuthFactorOTPRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanAuthFactorOTPResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveHumanAuthFactorOTPDesc,
      RemoveHumanAuthFactorOTPRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveHumanAuthFactorU2F(
    request: DeepPartial<RemoveHumanAuthFactorU2FRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanAuthFactorU2FResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveHumanAuthFactorU2FDesc,
      RemoveHumanAuthFactorU2FRequest.fromPartial(request),
      metadata,
    );
  }

  ListHumanPasswordless(
    request: DeepPartial<ListHumanPasswordlessRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListHumanPasswordlessResponse> {
    return this.rpc.unary(
      ManagementServiceListHumanPasswordlessDesc,
      ListHumanPasswordlessRequest.fromPartial(request),
      metadata,
    );
  }

  AddPasswordlessRegistration(
    request: DeepPartial<AddPasswordlessRegistrationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddPasswordlessRegistrationResponse> {
    return this.rpc.unary(
      ManagementServiceAddPasswordlessRegistrationDesc,
      AddPasswordlessRegistrationRequest.fromPartial(request),
      metadata,
    );
  }

  SendPasswordlessRegistration(
    request: DeepPartial<SendPasswordlessRegistrationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SendPasswordlessRegistrationResponse> {
    return this.rpc.unary(
      ManagementServiceSendPasswordlessRegistrationDesc,
      SendPasswordlessRegistrationRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveHumanPasswordless(
    request: DeepPartial<RemoveHumanPasswordlessRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanPasswordlessResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveHumanPasswordlessDesc,
      RemoveHumanPasswordlessRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateMachine(request: DeepPartial<UpdateMachineRequest>, metadata?: grpc.Metadata): Promise<UpdateMachineResponse> {
    return this.rpc.unary(ManagementServiceUpdateMachineDesc, UpdateMachineRequest.fromPartial(request), metadata);
  }

  GenerateMachineSecret(
    request: DeepPartial<GenerateMachineSecretRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GenerateMachineSecretResponse> {
    return this.rpc.unary(
      ManagementServiceGenerateMachineSecretDesc,
      GenerateMachineSecretRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveMachineSecret(
    request: DeepPartial<RemoveMachineSecretRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveMachineSecretResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveMachineSecretDesc,
      RemoveMachineSecretRequest.fromPartial(request),
      metadata,
    );
  }

  GetMachineKeyByIDs(
    request: DeepPartial<GetMachineKeyByIDsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetMachineKeyByIDsResponse> {
    return this.rpc.unary(
      ManagementServiceGetMachineKeyByIDsDesc,
      GetMachineKeyByIDsRequest.fromPartial(request),
      metadata,
    );
  }

  ListMachineKeys(
    request: DeepPartial<ListMachineKeysRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListMachineKeysResponse> {
    return this.rpc.unary(ManagementServiceListMachineKeysDesc, ListMachineKeysRequest.fromPartial(request), metadata);
  }

  AddMachineKey(request: DeepPartial<AddMachineKeyRequest>, metadata?: grpc.Metadata): Promise<AddMachineKeyResponse> {
    return this.rpc.unary(ManagementServiceAddMachineKeyDesc, AddMachineKeyRequest.fromPartial(request), metadata);
  }

  RemoveMachineKey(
    request: DeepPartial<RemoveMachineKeyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveMachineKeyResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveMachineKeyDesc,
      RemoveMachineKeyRequest.fromPartial(request),
      metadata,
    );
  }

  GetPersonalAccessTokenByIDs(
    request: DeepPartial<GetPersonalAccessTokenByIDsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPersonalAccessTokenByIDsResponse> {
    return this.rpc.unary(
      ManagementServiceGetPersonalAccessTokenByIDsDesc,
      GetPersonalAccessTokenByIDsRequest.fromPartial(request),
      metadata,
    );
  }

  ListPersonalAccessTokens(
    request: DeepPartial<ListPersonalAccessTokensRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListPersonalAccessTokensResponse> {
    return this.rpc.unary(
      ManagementServiceListPersonalAccessTokensDesc,
      ListPersonalAccessTokensRequest.fromPartial(request),
      metadata,
    );
  }

  AddPersonalAccessToken(
    request: DeepPartial<AddPersonalAccessTokenRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddPersonalAccessTokenResponse> {
    return this.rpc.unary(
      ManagementServiceAddPersonalAccessTokenDesc,
      AddPersonalAccessTokenRequest.fromPartial(request),
      metadata,
    );
  }

  RemovePersonalAccessToken(
    request: DeepPartial<RemovePersonalAccessTokenRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemovePersonalAccessTokenResponse> {
    return this.rpc.unary(
      ManagementServiceRemovePersonalAccessTokenDesc,
      RemovePersonalAccessTokenRequest.fromPartial(request),
      metadata,
    );
  }

  ListHumanLinkedIDPs(
    request: DeepPartial<ListHumanLinkedIDPsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListHumanLinkedIDPsResponse> {
    return this.rpc.unary(
      ManagementServiceListHumanLinkedIDPsDesc,
      ListHumanLinkedIDPsRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveHumanLinkedIDP(
    request: DeepPartial<RemoveHumanLinkedIDPRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveHumanLinkedIDPResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveHumanLinkedIDPDesc,
      RemoveHumanLinkedIDPRequest.fromPartial(request),
      metadata,
    );
  }

  ListUserMemberships(
    request: DeepPartial<ListUserMembershipsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListUserMembershipsResponse> {
    return this.rpc.unary(
      ManagementServiceListUserMembershipsDesc,
      ListUserMembershipsRequest.fromPartial(request),
      metadata,
    );
  }

  GetMyOrg(request: DeepPartial<GetMyOrgRequest>, metadata?: grpc.Metadata): Promise<GetMyOrgResponse> {
    return this.rpc.unary(ManagementServiceGetMyOrgDesc, GetMyOrgRequest.fromPartial(request), metadata);
  }

  GetOrgByDomainGlobal(
    request: DeepPartial<GetOrgByDomainGlobalRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOrgByDomainGlobalResponse> {
    return this.rpc.unary(
      ManagementServiceGetOrgByDomainGlobalDesc,
      GetOrgByDomainGlobalRequest.fromPartial(request),
      metadata,
    );
  }

  ListOrgChanges(
    request: DeepPartial<ListOrgChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgChangesResponse> {
    return this.rpc.unary(ManagementServiceListOrgChangesDesc, ListOrgChangesRequest.fromPartial(request), metadata);
  }

  AddOrg(request: DeepPartial<AddOrgRequest>, metadata?: grpc.Metadata): Promise<AddOrgResponse> {
    return this.rpc.unary(ManagementServiceAddOrgDesc, AddOrgRequest.fromPartial(request), metadata);
  }

  UpdateOrg(request: DeepPartial<UpdateOrgRequest>, metadata?: grpc.Metadata): Promise<UpdateOrgResponse> {
    return this.rpc.unary(ManagementServiceUpdateOrgDesc, UpdateOrgRequest.fromPartial(request), metadata);
  }

  DeactivateOrg(request: DeepPartial<DeactivateOrgRequest>, metadata?: grpc.Metadata): Promise<DeactivateOrgResponse> {
    return this.rpc.unary(ManagementServiceDeactivateOrgDesc, DeactivateOrgRequest.fromPartial(request), metadata);
  }

  ReactivateOrg(request: DeepPartial<ReactivateOrgRequest>, metadata?: grpc.Metadata): Promise<ReactivateOrgResponse> {
    return this.rpc.unary(ManagementServiceReactivateOrgDesc, ReactivateOrgRequest.fromPartial(request), metadata);
  }

  RemoveOrg(request: DeepPartial<RemoveOrgRequest>, metadata?: grpc.Metadata): Promise<RemoveOrgResponse> {
    return this.rpc.unary(ManagementServiceRemoveOrgDesc, RemoveOrgRequest.fromPartial(request), metadata);
  }

  SetOrgMetadata(
    request: DeepPartial<SetOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetOrgMetadataResponse> {
    return this.rpc.unary(ManagementServiceSetOrgMetadataDesc, SetOrgMetadataRequest.fromPartial(request), metadata);
  }

  BulkSetOrgMetadata(
    request: DeepPartial<BulkSetOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkSetOrgMetadataResponse> {
    return this.rpc.unary(
      ManagementServiceBulkSetOrgMetadataDesc,
      BulkSetOrgMetadataRequest.fromPartial(request),
      metadata,
    );
  }

  ListOrgMetadata(
    request: DeepPartial<ListOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgMetadataResponse> {
    return this.rpc.unary(ManagementServiceListOrgMetadataDesc, ListOrgMetadataRequest.fromPartial(request), metadata);
  }

  GetOrgMetadata(
    request: DeepPartial<GetOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOrgMetadataResponse> {
    return this.rpc.unary(ManagementServiceGetOrgMetadataDesc, GetOrgMetadataRequest.fromPartial(request), metadata);
  }

  RemoveOrgMetadata(
    request: DeepPartial<RemoveOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveOrgMetadataResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveOrgMetadataDesc,
      RemoveOrgMetadataRequest.fromPartial(request),
      metadata,
    );
  }

  BulkRemoveOrgMetadata(
    request: DeepPartial<BulkRemoveOrgMetadataRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkRemoveOrgMetadataResponse> {
    return this.rpc.unary(
      ManagementServiceBulkRemoveOrgMetadataDesc,
      BulkRemoveOrgMetadataRequest.fromPartial(request),
      metadata,
    );
  }

  ListOrgDomains(
    request: DeepPartial<ListOrgDomainsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgDomainsResponse> {
    return this.rpc.unary(ManagementServiceListOrgDomainsDesc, ListOrgDomainsRequest.fromPartial(request), metadata);
  }

  AddOrgDomain(request: DeepPartial<AddOrgDomainRequest>, metadata?: grpc.Metadata): Promise<AddOrgDomainResponse> {
    return this.rpc.unary(ManagementServiceAddOrgDomainDesc, AddOrgDomainRequest.fromPartial(request), metadata);
  }

  RemoveOrgDomain(
    request: DeepPartial<RemoveOrgDomainRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveOrgDomainResponse> {
    return this.rpc.unary(ManagementServiceRemoveOrgDomainDesc, RemoveOrgDomainRequest.fromPartial(request), metadata);
  }

  GenerateOrgDomainValidation(
    request: DeepPartial<GenerateOrgDomainValidationRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GenerateOrgDomainValidationResponse> {
    return this.rpc.unary(
      ManagementServiceGenerateOrgDomainValidationDesc,
      GenerateOrgDomainValidationRequest.fromPartial(request),
      metadata,
    );
  }

  ValidateOrgDomain(
    request: DeepPartial<ValidateOrgDomainRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ValidateOrgDomainResponse> {
    return this.rpc.unary(
      ManagementServiceValidateOrgDomainDesc,
      ValidateOrgDomainRequest.fromPartial(request),
      metadata,
    );
  }

  SetPrimaryOrgDomain(
    request: DeepPartial<SetPrimaryOrgDomainRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetPrimaryOrgDomainResponse> {
    return this.rpc.unary(
      ManagementServiceSetPrimaryOrgDomainDesc,
      SetPrimaryOrgDomainRequest.fromPartial(request),
      metadata,
    );
  }

  ListOrgMemberRoles(
    request: DeepPartial<ListOrgMemberRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgMemberRolesResponse> {
    return this.rpc.unary(
      ManagementServiceListOrgMemberRolesDesc,
      ListOrgMemberRolesRequest.fromPartial(request),
      metadata,
    );
  }

  ListOrgMembers(
    request: DeepPartial<ListOrgMembersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListOrgMembersResponse> {
    return this.rpc.unary(ManagementServiceListOrgMembersDesc, ListOrgMembersRequest.fromPartial(request), metadata);
  }

  AddOrgMember(request: DeepPartial<AddOrgMemberRequest>, metadata?: grpc.Metadata): Promise<AddOrgMemberResponse> {
    return this.rpc.unary(ManagementServiceAddOrgMemberDesc, AddOrgMemberRequest.fromPartial(request), metadata);
  }

  UpdateOrgMember(
    request: DeepPartial<UpdateOrgMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOrgMemberResponse> {
    return this.rpc.unary(ManagementServiceUpdateOrgMemberDesc, UpdateOrgMemberRequest.fromPartial(request), metadata);
  }

  RemoveOrgMember(
    request: DeepPartial<RemoveOrgMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveOrgMemberResponse> {
    return this.rpc.unary(ManagementServiceRemoveOrgMemberDesc, RemoveOrgMemberRequest.fromPartial(request), metadata);
  }

  GetProjectByID(
    request: DeepPartial<GetProjectByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetProjectByIDResponse> {
    return this.rpc.unary(ManagementServiceGetProjectByIDDesc, GetProjectByIDRequest.fromPartial(request), metadata);
  }

  GetGrantedProjectByID(
    request: DeepPartial<GetGrantedProjectByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetGrantedProjectByIDResponse> {
    return this.rpc.unary(
      ManagementServiceGetGrantedProjectByIDDesc,
      GetGrantedProjectByIDRequest.fromPartial(request),
      metadata,
    );
  }

  ListProjects(request: DeepPartial<ListProjectsRequest>, metadata?: grpc.Metadata): Promise<ListProjectsResponse> {
    return this.rpc.unary(ManagementServiceListProjectsDesc, ListProjectsRequest.fromPartial(request), metadata);
  }

  ListGrantedProjects(
    request: DeepPartial<ListGrantedProjectsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListGrantedProjectsResponse> {
    return this.rpc.unary(
      ManagementServiceListGrantedProjectsDesc,
      ListGrantedProjectsRequest.fromPartial(request),
      metadata,
    );
  }

  ListGrantedProjectRoles(
    request: DeepPartial<ListGrantedProjectRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListGrantedProjectRolesResponse> {
    return this.rpc.unary(
      ManagementServiceListGrantedProjectRolesDesc,
      ListGrantedProjectRolesRequest.fromPartial(request),
      metadata,
    );
  }

  ListProjectChanges(
    request: DeepPartial<ListProjectChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectChangesResponse> {
    return this.rpc.unary(
      ManagementServiceListProjectChangesDesc,
      ListProjectChangesRequest.fromPartial(request),
      metadata,
    );
  }

  AddProject(request: DeepPartial<AddProjectRequest>, metadata?: grpc.Metadata): Promise<AddProjectResponse> {
    return this.rpc.unary(ManagementServiceAddProjectDesc, AddProjectRequest.fromPartial(request), metadata);
  }

  UpdateProject(request: DeepPartial<UpdateProjectRequest>, metadata?: grpc.Metadata): Promise<UpdateProjectResponse> {
    return this.rpc.unary(ManagementServiceUpdateProjectDesc, UpdateProjectRequest.fromPartial(request), metadata);
  }

  DeactivateProject(
    request: DeepPartial<DeactivateProjectRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateProjectResponse> {
    return this.rpc.unary(
      ManagementServiceDeactivateProjectDesc,
      DeactivateProjectRequest.fromPartial(request),
      metadata,
    );
  }

  ReactivateProject(
    request: DeepPartial<ReactivateProjectRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateProjectResponse> {
    return this.rpc.unary(
      ManagementServiceReactivateProjectDesc,
      ReactivateProjectRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveProject(request: DeepPartial<RemoveProjectRequest>, metadata?: grpc.Metadata): Promise<RemoveProjectResponse> {
    return this.rpc.unary(ManagementServiceRemoveProjectDesc, RemoveProjectRequest.fromPartial(request), metadata);
  }

  ListProjectRoles(
    request: DeepPartial<ListProjectRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectRolesResponse> {
    return this.rpc.unary(
      ManagementServiceListProjectRolesDesc,
      ListProjectRolesRequest.fromPartial(request),
      metadata,
    );
  }

  AddProjectRole(
    request: DeepPartial<AddProjectRoleRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddProjectRoleResponse> {
    return this.rpc.unary(ManagementServiceAddProjectRoleDesc, AddProjectRoleRequest.fromPartial(request), metadata);
  }

  BulkAddProjectRoles(
    request: DeepPartial<BulkAddProjectRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkAddProjectRolesResponse> {
    return this.rpc.unary(
      ManagementServiceBulkAddProjectRolesDesc,
      BulkAddProjectRolesRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateProjectRole(
    request: DeepPartial<UpdateProjectRoleRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateProjectRoleResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateProjectRoleDesc,
      UpdateProjectRoleRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveProjectRole(
    request: DeepPartial<RemoveProjectRoleRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveProjectRoleResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveProjectRoleDesc,
      RemoveProjectRoleRequest.fromPartial(request),
      metadata,
    );
  }

  ListProjectMemberRoles(
    request: DeepPartial<ListProjectMemberRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectMemberRolesResponse> {
    return this.rpc.unary(
      ManagementServiceListProjectMemberRolesDesc,
      ListProjectMemberRolesRequest.fromPartial(request),
      metadata,
    );
  }

  ListProjectMembers(
    request: DeepPartial<ListProjectMembersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectMembersResponse> {
    return this.rpc.unary(
      ManagementServiceListProjectMembersDesc,
      ListProjectMembersRequest.fromPartial(request),
      metadata,
    );
  }

  AddProjectMember(
    request: DeepPartial<AddProjectMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddProjectMemberResponse> {
    return this.rpc.unary(
      ManagementServiceAddProjectMemberDesc,
      AddProjectMemberRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateProjectMember(
    request: DeepPartial<UpdateProjectMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateProjectMemberResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateProjectMemberDesc,
      UpdateProjectMemberRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveProjectMember(
    request: DeepPartial<RemoveProjectMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveProjectMemberResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveProjectMemberDesc,
      RemoveProjectMemberRequest.fromPartial(request),
      metadata,
    );
  }

  GetAppByID(request: DeepPartial<GetAppByIDRequest>, metadata?: grpc.Metadata): Promise<GetAppByIDResponse> {
    return this.rpc.unary(ManagementServiceGetAppByIDDesc, GetAppByIDRequest.fromPartial(request), metadata);
  }

  ListApps(request: DeepPartial<ListAppsRequest>, metadata?: grpc.Metadata): Promise<ListAppsResponse> {
    return this.rpc.unary(ManagementServiceListAppsDesc, ListAppsRequest.fromPartial(request), metadata);
  }

  ListAppChanges(
    request: DeepPartial<ListAppChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListAppChangesResponse> {
    return this.rpc.unary(ManagementServiceListAppChangesDesc, ListAppChangesRequest.fromPartial(request), metadata);
  }

  AddOIDCApp(request: DeepPartial<AddOIDCAppRequest>, metadata?: grpc.Metadata): Promise<AddOIDCAppResponse> {
    return this.rpc.unary(ManagementServiceAddOIDCAppDesc, AddOIDCAppRequest.fromPartial(request), metadata);
  }

  AddSAMLApp(request: DeepPartial<AddSAMLAppRequest>, metadata?: grpc.Metadata): Promise<AddSAMLAppResponse> {
    return this.rpc.unary(ManagementServiceAddSAMLAppDesc, AddSAMLAppRequest.fromPartial(request), metadata);
  }

  AddAPIApp(request: DeepPartial<AddAPIAppRequest>, metadata?: grpc.Metadata): Promise<AddAPIAppResponse> {
    return this.rpc.unary(ManagementServiceAddAPIAppDesc, AddAPIAppRequest.fromPartial(request), metadata);
  }

  UpdateApp(request: DeepPartial<UpdateAppRequest>, metadata?: grpc.Metadata): Promise<UpdateAppResponse> {
    return this.rpc.unary(ManagementServiceUpdateAppDesc, UpdateAppRequest.fromPartial(request), metadata);
  }

  UpdateOIDCAppConfig(
    request: DeepPartial<UpdateOIDCAppConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOIDCAppConfigResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateOIDCAppConfigDesc,
      UpdateOIDCAppConfigRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateSAMLAppConfig(
    request: DeepPartial<UpdateSAMLAppConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateSAMLAppConfigResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateSAMLAppConfigDesc,
      UpdateSAMLAppConfigRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateAPIAppConfig(
    request: DeepPartial<UpdateAPIAppConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateAPIAppConfigResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateAPIAppConfigDesc,
      UpdateAPIAppConfigRequest.fromPartial(request),
      metadata,
    );
  }

  DeactivateApp(request: DeepPartial<DeactivateAppRequest>, metadata?: grpc.Metadata): Promise<DeactivateAppResponse> {
    return this.rpc.unary(ManagementServiceDeactivateAppDesc, DeactivateAppRequest.fromPartial(request), metadata);
  }

  ReactivateApp(request: DeepPartial<ReactivateAppRequest>, metadata?: grpc.Metadata): Promise<ReactivateAppResponse> {
    return this.rpc.unary(ManagementServiceReactivateAppDesc, ReactivateAppRequest.fromPartial(request), metadata);
  }

  RemoveApp(request: DeepPartial<RemoveAppRequest>, metadata?: grpc.Metadata): Promise<RemoveAppResponse> {
    return this.rpc.unary(ManagementServiceRemoveAppDesc, RemoveAppRequest.fromPartial(request), metadata);
  }

  RegenerateOIDCClientSecret(
    request: DeepPartial<RegenerateOIDCClientSecretRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RegenerateOIDCClientSecretResponse> {
    return this.rpc.unary(
      ManagementServiceRegenerateOIDCClientSecretDesc,
      RegenerateOIDCClientSecretRequest.fromPartial(request),
      metadata,
    );
  }

  RegenerateAPIClientSecret(
    request: DeepPartial<RegenerateAPIClientSecretRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RegenerateAPIClientSecretResponse> {
    return this.rpc.unary(
      ManagementServiceRegenerateAPIClientSecretDesc,
      RegenerateAPIClientSecretRequest.fromPartial(request),
      metadata,
    );
  }

  GetAppKey(request: DeepPartial<GetAppKeyRequest>, metadata?: grpc.Metadata): Promise<GetAppKeyResponse> {
    return this.rpc.unary(ManagementServiceGetAppKeyDesc, GetAppKeyRequest.fromPartial(request), metadata);
  }

  ListAppKeys(request: DeepPartial<ListAppKeysRequest>, metadata?: grpc.Metadata): Promise<ListAppKeysResponse> {
    return this.rpc.unary(ManagementServiceListAppKeysDesc, ListAppKeysRequest.fromPartial(request), metadata);
  }

  AddAppKey(request: DeepPartial<AddAppKeyRequest>, metadata?: grpc.Metadata): Promise<AddAppKeyResponse> {
    return this.rpc.unary(ManagementServiceAddAppKeyDesc, AddAppKeyRequest.fromPartial(request), metadata);
  }

  RemoveAppKey(request: DeepPartial<RemoveAppKeyRequest>, metadata?: grpc.Metadata): Promise<RemoveAppKeyResponse> {
    return this.rpc.unary(ManagementServiceRemoveAppKeyDesc, RemoveAppKeyRequest.fromPartial(request), metadata);
  }

  ListProjectGrantChanges(
    request: DeepPartial<ListProjectGrantChangesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectGrantChangesResponse> {
    return this.rpc.unary(
      ManagementServiceListProjectGrantChangesDesc,
      ListProjectGrantChangesRequest.fromPartial(request),
      metadata,
    );
  }

  GetProjectGrantByID(
    request: DeepPartial<GetProjectGrantByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetProjectGrantByIDResponse> {
    return this.rpc.unary(
      ManagementServiceGetProjectGrantByIDDesc,
      GetProjectGrantByIDRequest.fromPartial(request),
      metadata,
    );
  }

  ListProjectGrants(
    request: DeepPartial<ListProjectGrantsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectGrantsResponse> {
    return this.rpc.unary(
      ManagementServiceListProjectGrantsDesc,
      ListProjectGrantsRequest.fromPartial(request),
      metadata,
    );
  }

  ListAllProjectGrants(
    request: DeepPartial<ListAllProjectGrantsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListAllProjectGrantsResponse> {
    return this.rpc.unary(
      ManagementServiceListAllProjectGrantsDesc,
      ListAllProjectGrantsRequest.fromPartial(request),
      metadata,
    );
  }

  AddProjectGrant(
    request: DeepPartial<AddProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddProjectGrantResponse> {
    return this.rpc.unary(ManagementServiceAddProjectGrantDesc, AddProjectGrantRequest.fromPartial(request), metadata);
  }

  UpdateProjectGrant(
    request: DeepPartial<UpdateProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateProjectGrantResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateProjectGrantDesc,
      UpdateProjectGrantRequest.fromPartial(request),
      metadata,
    );
  }

  DeactivateProjectGrant(
    request: DeepPartial<DeactivateProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateProjectGrantResponse> {
    return this.rpc.unary(
      ManagementServiceDeactivateProjectGrantDesc,
      DeactivateProjectGrantRequest.fromPartial(request),
      metadata,
    );
  }

  ReactivateProjectGrant(
    request: DeepPartial<ReactivateProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateProjectGrantResponse> {
    return this.rpc.unary(
      ManagementServiceReactivateProjectGrantDesc,
      ReactivateProjectGrantRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveProjectGrant(
    request: DeepPartial<RemoveProjectGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveProjectGrantResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveProjectGrantDesc,
      RemoveProjectGrantRequest.fromPartial(request),
      metadata,
    );
  }

  ListProjectGrantMemberRoles(
    request: DeepPartial<ListProjectGrantMemberRolesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectGrantMemberRolesResponse> {
    return this.rpc.unary(
      ManagementServiceListProjectGrantMemberRolesDesc,
      ListProjectGrantMemberRolesRequest.fromPartial(request),
      metadata,
    );
  }

  ListProjectGrantMembers(
    request: DeepPartial<ListProjectGrantMembersRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListProjectGrantMembersResponse> {
    return this.rpc.unary(
      ManagementServiceListProjectGrantMembersDesc,
      ListProjectGrantMembersRequest.fromPartial(request),
      metadata,
    );
  }

  AddProjectGrantMember(
    request: DeepPartial<AddProjectGrantMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddProjectGrantMemberResponse> {
    return this.rpc.unary(
      ManagementServiceAddProjectGrantMemberDesc,
      AddProjectGrantMemberRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateProjectGrantMember(
    request: DeepPartial<UpdateProjectGrantMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateProjectGrantMemberResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateProjectGrantMemberDesc,
      UpdateProjectGrantMemberRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveProjectGrantMember(
    request: DeepPartial<RemoveProjectGrantMemberRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveProjectGrantMemberResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveProjectGrantMemberDesc,
      RemoveProjectGrantMemberRequest.fromPartial(request),
      metadata,
    );
  }

  GetUserGrantByID(
    request: DeepPartial<GetUserGrantByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetUserGrantByIDResponse> {
    return this.rpc.unary(
      ManagementServiceGetUserGrantByIDDesc,
      GetUserGrantByIDRequest.fromPartial(request),
      metadata,
    );
  }

  ListUserGrants(request: DeepPartial<ListUserGrantRequest>, metadata?: grpc.Metadata): Promise<ListUserGrantResponse> {
    return this.rpc.unary(ManagementServiceListUserGrantsDesc, ListUserGrantRequest.fromPartial(request), metadata);
  }

  AddUserGrant(request: DeepPartial<AddUserGrantRequest>, metadata?: grpc.Metadata): Promise<AddUserGrantResponse> {
    return this.rpc.unary(ManagementServiceAddUserGrantDesc, AddUserGrantRequest.fromPartial(request), metadata);
  }

  UpdateUserGrant(
    request: DeepPartial<UpdateUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateUserGrantResponse> {
    return this.rpc.unary(ManagementServiceUpdateUserGrantDesc, UpdateUserGrantRequest.fromPartial(request), metadata);
  }

  DeactivateUserGrant(
    request: DeepPartial<DeactivateUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateUserGrantResponse> {
    return this.rpc.unary(
      ManagementServiceDeactivateUserGrantDesc,
      DeactivateUserGrantRequest.fromPartial(request),
      metadata,
    );
  }

  ReactivateUserGrant(
    request: DeepPartial<ReactivateUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateUserGrantResponse> {
    return this.rpc.unary(
      ManagementServiceReactivateUserGrantDesc,
      ReactivateUserGrantRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveUserGrant(
    request: DeepPartial<RemoveUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveUserGrantResponse> {
    return this.rpc.unary(ManagementServiceRemoveUserGrantDesc, RemoveUserGrantRequest.fromPartial(request), metadata);
  }

  BulkRemoveUserGrant(
    request: DeepPartial<BulkRemoveUserGrantRequest>,
    metadata?: grpc.Metadata,
  ): Promise<BulkRemoveUserGrantResponse> {
    return this.rpc.unary(
      ManagementServiceBulkRemoveUserGrantDesc,
      BulkRemoveUserGrantRequest.fromPartial(request),
      metadata,
    );
  }

  GetOrgIAMPolicy(
    request: DeepPartial<GetOrgIAMPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetOrgIAMPolicyResponse> {
    return this.rpc.unary(ManagementServiceGetOrgIAMPolicyDesc, GetOrgIAMPolicyRequest.fromPartial(request), metadata);
  }

  GetDomainPolicy(
    request: DeepPartial<GetDomainPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDomainPolicyResponse> {
    return this.rpc.unary(ManagementServiceGetDomainPolicyDesc, GetDomainPolicyRequest.fromPartial(request), metadata);
  }

  GetLoginPolicy(
    request: DeepPartial<GetLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLoginPolicyResponse> {
    return this.rpc.unary(ManagementServiceGetLoginPolicyDesc, GetLoginPolicyRequest.fromPartial(request), metadata);
  }

  GetDefaultLoginPolicy(
    request: DeepPartial<GetDefaultLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultLoginPolicyDesc,
      GetDefaultLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomLoginPolicy(
    request: DeepPartial<AddCustomLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddCustomLoginPolicyDesc,
      AddCustomLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomLoginPolicy(
    request: DeepPartial<UpdateCustomLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateCustomLoginPolicyDesc,
      UpdateCustomLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ResetLoginPolicyToDefault(
    request: DeepPartial<ResetLoginPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetLoginPolicyToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetLoginPolicyToDefaultDesc,
      ResetLoginPolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  ListLoginPolicyIDPs(
    request: DeepPartial<ListLoginPolicyIDPsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicyIDPsResponse> {
    return this.rpc.unary(
      ManagementServiceListLoginPolicyIDPsDesc,
      ListLoginPolicyIDPsRequest.fromPartial(request),
      metadata,
    );
  }

  AddIDPToLoginPolicy(
    request: DeepPartial<AddIDPToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddIDPToLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddIDPToLoginPolicyDesc,
      AddIDPToLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveIDPFromLoginPolicy(
    request: DeepPartial<RemoveIDPFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveIDPFromLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveIDPFromLoginPolicyDesc,
      RemoveIDPFromLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ListLoginPolicySecondFactors(
    request: DeepPartial<ListLoginPolicySecondFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicySecondFactorsResponse> {
    return this.rpc.unary(
      ManagementServiceListLoginPolicySecondFactorsDesc,
      ListLoginPolicySecondFactorsRequest.fromPartial(request),
      metadata,
    );
  }

  AddSecondFactorToLoginPolicy(
    request: DeepPartial<AddSecondFactorToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddSecondFactorToLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddSecondFactorToLoginPolicyDesc,
      AddSecondFactorToLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveSecondFactorFromLoginPolicy(
    request: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveSecondFactorFromLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveSecondFactorFromLoginPolicyDesc,
      RemoveSecondFactorFromLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ListLoginPolicyMultiFactors(
    request: DeepPartial<ListLoginPolicyMultiFactorsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListLoginPolicyMultiFactorsResponse> {
    return this.rpc.unary(
      ManagementServiceListLoginPolicyMultiFactorsDesc,
      ListLoginPolicyMultiFactorsRequest.fromPartial(request),
      metadata,
    );
  }

  AddMultiFactorToLoginPolicy(
    request: DeepPartial<AddMultiFactorToLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddMultiFactorToLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddMultiFactorToLoginPolicyDesc,
      AddMultiFactorToLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveMultiFactorFromLoginPolicy(
    request: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveMultiFactorFromLoginPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveMultiFactorFromLoginPolicyDesc,
      RemoveMultiFactorFromLoginPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetPasswordComplexityPolicy(
    request: DeepPartial<GetPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPasswordComplexityPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetPasswordComplexityPolicyDesc,
      GetPasswordComplexityPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPasswordComplexityPolicy(
    request: DeepPartial<GetDefaultPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordComplexityPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultPasswordComplexityPolicyDesc,
      GetDefaultPasswordComplexityPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomPasswordComplexityPolicy(
    request: DeepPartial<AddCustomPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomPasswordComplexityPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddCustomPasswordComplexityPolicyDesc,
      AddCustomPasswordComplexityPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomPasswordComplexityPolicy(
    request: DeepPartial<UpdateCustomPasswordComplexityPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomPasswordComplexityPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateCustomPasswordComplexityPolicyDesc,
      UpdateCustomPasswordComplexityPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ResetPasswordComplexityPolicyToDefault(
    request: DeepPartial<ResetPasswordComplexityPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetPasswordComplexityPolicyToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetPasswordComplexityPolicyToDefaultDesc,
      ResetPasswordComplexityPolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetPasswordAgePolicy(
    request: DeepPartial<GetPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPasswordAgePolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetPasswordAgePolicyDesc,
      GetPasswordAgePolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPasswordAgePolicy(
    request: DeepPartial<GetDefaultPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordAgePolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultPasswordAgePolicyDesc,
      GetDefaultPasswordAgePolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomPasswordAgePolicy(
    request: DeepPartial<AddCustomPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomPasswordAgePolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddCustomPasswordAgePolicyDesc,
      AddCustomPasswordAgePolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomPasswordAgePolicy(
    request: DeepPartial<UpdateCustomPasswordAgePolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomPasswordAgePolicyResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateCustomPasswordAgePolicyDesc,
      UpdateCustomPasswordAgePolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ResetPasswordAgePolicyToDefault(
    request: DeepPartial<ResetPasswordAgePolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetPasswordAgePolicyToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetPasswordAgePolicyToDefaultDesc,
      ResetPasswordAgePolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetLockoutPolicy(
    request: DeepPartial<GetLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLockoutPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetLockoutPolicyDesc,
      GetLockoutPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultLockoutPolicy(
    request: DeepPartial<GetDefaultLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLockoutPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultLockoutPolicyDesc,
      GetDefaultLockoutPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomLockoutPolicy(
    request: DeepPartial<AddCustomLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomLockoutPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddCustomLockoutPolicyDesc,
      AddCustomLockoutPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomLockoutPolicy(
    request: DeepPartial<UpdateCustomLockoutPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomLockoutPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateCustomLockoutPolicyDesc,
      UpdateCustomLockoutPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ResetLockoutPolicyToDefault(
    request: DeepPartial<ResetLockoutPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetLockoutPolicyToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetLockoutPolicyToDefaultDesc,
      ResetLockoutPolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetPrivacyPolicy(
    request: DeepPartial<GetPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPrivacyPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetPrivacyPolicyDesc,
      GetPrivacyPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPrivacyPolicy(
    request: DeepPartial<GetDefaultPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPrivacyPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultPrivacyPolicyDesc,
      GetDefaultPrivacyPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomPrivacyPolicy(
    request: DeepPartial<AddCustomPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomPrivacyPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddCustomPrivacyPolicyDesc,
      AddCustomPrivacyPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomPrivacyPolicy(
    request: DeepPartial<UpdateCustomPrivacyPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomPrivacyPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateCustomPrivacyPolicyDesc,
      UpdateCustomPrivacyPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ResetPrivacyPolicyToDefault(
    request: DeepPartial<ResetPrivacyPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetPrivacyPolicyToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetPrivacyPolicyToDefaultDesc,
      ResetPrivacyPolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetNotificationPolicy(
    request: DeepPartial<GetNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetNotificationPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetNotificationPolicyDesc,
      GetNotificationPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultNotificationPolicy(
    request: DeepPartial<GetDefaultNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultNotificationPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultNotificationPolicyDesc,
      GetDefaultNotificationPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomNotificationPolicy(
    request: DeepPartial<AddCustomNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomNotificationPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddCustomNotificationPolicyDesc,
      AddCustomNotificationPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomNotificationPolicy(
    request: DeepPartial<UpdateCustomNotificationPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomNotificationPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateCustomNotificationPolicyDesc,
      UpdateCustomNotificationPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ResetNotificationPolicyToDefault(
    request: DeepPartial<ResetNotificationPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetNotificationPolicyToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetNotificationPolicyToDefaultDesc,
      ResetNotificationPolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetLabelPolicy(
    request: DeepPartial<GetLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLabelPolicyResponse> {
    return this.rpc.unary(ManagementServiceGetLabelPolicyDesc, GetLabelPolicyRequest.fromPartial(request), metadata);
  }

  GetPreviewLabelPolicy(
    request: DeepPartial<GetPreviewLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetPreviewLabelPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetPreviewLabelPolicyDesc,
      GetPreviewLabelPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultLabelPolicy(
    request: DeepPartial<GetDefaultLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLabelPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultLabelPolicyDesc,
      GetDefaultLabelPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  AddCustomLabelPolicy(
    request: DeepPartial<AddCustomLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddCustomLabelPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceAddCustomLabelPolicyDesc,
      AddCustomLabelPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateCustomLabelPolicy(
    request: DeepPartial<UpdateCustomLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateCustomLabelPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateCustomLabelPolicyDesc,
      UpdateCustomLabelPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  ActivateCustomLabelPolicy(
    request: DeepPartial<ActivateCustomLabelPolicyRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ActivateCustomLabelPolicyResponse> {
    return this.rpc.unary(
      ManagementServiceActivateCustomLabelPolicyDesc,
      ActivateCustomLabelPolicyRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveCustomLabelPolicyLogo(
    request: DeepPartial<RemoveCustomLabelPolicyLogoRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyLogoResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveCustomLabelPolicyLogoDesc,
      RemoveCustomLabelPolicyLogoRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveCustomLabelPolicyLogoDark(
    request: DeepPartial<RemoveCustomLabelPolicyLogoDarkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyLogoDarkResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveCustomLabelPolicyLogoDarkDesc,
      RemoveCustomLabelPolicyLogoDarkRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveCustomLabelPolicyIcon(
    request: DeepPartial<RemoveCustomLabelPolicyIconRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyIconResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveCustomLabelPolicyIconDesc,
      RemoveCustomLabelPolicyIconRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveCustomLabelPolicyIconDark(
    request: DeepPartial<RemoveCustomLabelPolicyIconDarkRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyIconDarkResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveCustomLabelPolicyIconDarkDesc,
      RemoveCustomLabelPolicyIconDarkRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveCustomLabelPolicyFont(
    request: DeepPartial<RemoveCustomLabelPolicyFontRequest>,
    metadata?: grpc.Metadata,
  ): Promise<RemoveCustomLabelPolicyFontResponse> {
    return this.rpc.unary(
      ManagementServiceRemoveCustomLabelPolicyFontDesc,
      RemoveCustomLabelPolicyFontRequest.fromPartial(request),
      metadata,
    );
  }

  ResetLabelPolicyToDefault(
    request: DeepPartial<ResetLabelPolicyToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetLabelPolicyToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetLabelPolicyToDefaultDesc,
      ResetLabelPolicyToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomInitMessageText(
    request: DeepPartial<GetCustomInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomInitMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetCustomInitMessageTextDesc,
      GetCustomInitMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultInitMessageText(
    request: DeepPartial<GetDefaultInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultInitMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultInitMessageTextDesc,
      GetDefaultInitMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomInitMessageText(
    request: DeepPartial<SetCustomInitMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomInitMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceSetCustomInitMessageTextDesc,
      SetCustomInitMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomInitMessageTextToDefault(
    request: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomInitMessageTextToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetCustomInitMessageTextToDefaultDesc,
      ResetCustomInitMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomPasswordResetMessageText(
    request: DeepPartial<GetCustomPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordResetMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetCustomPasswordResetMessageTextDesc,
      GetCustomPasswordResetMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPasswordResetMessageText(
    request: DeepPartial<GetDefaultPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordResetMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultPasswordResetMessageTextDesc,
      GetDefaultPasswordResetMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomPasswordResetMessageText(
    request: DeepPartial<SetCustomPasswordResetMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomPasswordResetMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceSetCustomPasswordResetMessageTextDesc,
      SetCustomPasswordResetMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomPasswordResetMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordResetMessageTextToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetCustomPasswordResetMessageTextToDefaultDesc,
      ResetCustomPasswordResetMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomVerifyEmailMessageText(
    request: DeepPartial<GetCustomVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomVerifyEmailMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetCustomVerifyEmailMessageTextDesc,
      GetCustomVerifyEmailMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultVerifyEmailMessageText(
    request: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultVerifyEmailMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultVerifyEmailMessageTextDesc,
      GetDefaultVerifyEmailMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomVerifyEmailMessageText(
    request: DeepPartial<SetCustomVerifyEmailMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomVerifyEmailMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceSetCustomVerifyEmailMessageTextDesc,
      SetCustomVerifyEmailMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomVerifyEmailMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomVerifyEmailMessageTextToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetCustomVerifyEmailMessageTextToDefaultDesc,
      ResetCustomVerifyEmailMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomVerifyPhoneMessageText(
    request: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomVerifyPhoneMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetCustomVerifyPhoneMessageTextDesc,
      GetCustomVerifyPhoneMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultVerifyPhoneMessageText(
    request: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultVerifyPhoneMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultVerifyPhoneMessageTextDesc,
      GetDefaultVerifyPhoneMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomVerifyPhoneMessageText(
    request: DeepPartial<SetCustomVerifyPhoneMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomVerifyPhoneMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceSetCustomVerifyPhoneMessageTextDesc,
      SetCustomVerifyPhoneMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomVerifyPhoneMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomVerifyPhoneMessageTextToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetCustomVerifyPhoneMessageTextToDefaultDesc,
      ResetCustomVerifyPhoneMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomDomainClaimedMessageText(
    request: DeepPartial<GetCustomDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomDomainClaimedMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetCustomDomainClaimedMessageTextDesc,
      GetCustomDomainClaimedMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultDomainClaimedMessageText(
    request: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultDomainClaimedMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultDomainClaimedMessageTextDesc,
      GetDefaultDomainClaimedMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomDomainClaimedMessageCustomText(
    request: DeepPartial<SetCustomDomainClaimedMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomDomainClaimedMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceSetCustomDomainClaimedMessageCustomTextDesc,
      SetCustomDomainClaimedMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomDomainClaimedMessageTextToDefault(
    request: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomDomainClaimedMessageTextToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetCustomDomainClaimedMessageTextToDefaultDesc,
      ResetCustomDomainClaimedMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomPasswordlessRegistrationMessageText(
    request: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordlessRegistrationMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetCustomPasswordlessRegistrationMessageTextDesc,
      GetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordlessRegistrationMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultPasswordlessRegistrationMessageTextDesc,
      GetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomPasswordlessRegistrationMessageCustomText(
    request: DeepPartial<SetCustomPasswordlessRegistrationMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomPasswordlessRegistrationMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceSetCustomPasswordlessRegistrationMessageCustomTextDesc,
      SetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomPasswordlessRegistrationMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetCustomPasswordlessRegistrationMessageTextToDefaultDesc,
      ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomPasswordChangeMessageText(
    request: DeepPartial<GetCustomPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomPasswordChangeMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetCustomPasswordChangeMessageTextDesc,
      GetCustomPasswordChangeMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultPasswordChangeMessageText(
    request: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultPasswordChangeMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultPasswordChangeMessageTextDesc,
      GetDefaultPasswordChangeMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomPasswordChangeMessageCustomText(
    request: DeepPartial<SetCustomPasswordChangeMessageTextRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomPasswordChangeMessageTextResponse> {
    return this.rpc.unary(
      ManagementServiceSetCustomPasswordChangeMessageCustomTextDesc,
      SetCustomPasswordChangeMessageTextRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomPasswordChangeMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomPasswordChangeMessageTextToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetCustomPasswordChangeMessageTextToDefaultDesc,
      ResetCustomPasswordChangeMessageTextToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomLoginTexts(
    request: DeepPartial<GetCustomLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomLoginTextsResponse> {
    return this.rpc.unary(
      ManagementServiceGetCustomLoginTextsDesc,
      GetCustomLoginTextsRequest.fromPartial(request),
      metadata,
    );
  }

  GetDefaultLoginTexts(
    request: DeepPartial<GetDefaultLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetDefaultLoginTextsResponse> {
    return this.rpc.unary(
      ManagementServiceGetDefaultLoginTextsDesc,
      GetDefaultLoginTextsRequest.fromPartial(request),
      metadata,
    );
  }

  SetCustomLoginText(
    request: DeepPartial<SetCustomLoginTextsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetCustomLoginTextsResponse> {
    return this.rpc.unary(
      ManagementServiceSetCustomLoginTextDesc,
      SetCustomLoginTextsRequest.fromPartial(request),
      metadata,
    );
  }

  ResetCustomLoginTextToDefault(
    request: DeepPartial<ResetCustomLoginTextsToDefaultRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ResetCustomLoginTextsToDefaultResponse> {
    return this.rpc.unary(
      ManagementServiceResetCustomLoginTextToDefaultDesc,
      ResetCustomLoginTextsToDefaultRequest.fromPartial(request),
      metadata,
    );
  }

  GetOrgIDPByID(request: DeepPartial<GetOrgIDPByIDRequest>, metadata?: grpc.Metadata): Promise<GetOrgIDPByIDResponse> {
    return this.rpc.unary(ManagementServiceGetOrgIDPByIDDesc, GetOrgIDPByIDRequest.fromPartial(request), metadata);
  }

  ListOrgIDPs(request: DeepPartial<ListOrgIDPsRequest>, metadata?: grpc.Metadata): Promise<ListOrgIDPsResponse> {
    return this.rpc.unary(ManagementServiceListOrgIDPsDesc, ListOrgIDPsRequest.fromPartial(request), metadata);
  }

  AddOrgOIDCIDP(request: DeepPartial<AddOrgOIDCIDPRequest>, metadata?: grpc.Metadata): Promise<AddOrgOIDCIDPResponse> {
    return this.rpc.unary(ManagementServiceAddOrgOIDCIDPDesc, AddOrgOIDCIDPRequest.fromPartial(request), metadata);
  }

  AddOrgJWTIDP(request: DeepPartial<AddOrgJWTIDPRequest>, metadata?: grpc.Metadata): Promise<AddOrgJWTIDPResponse> {
    return this.rpc.unary(ManagementServiceAddOrgJWTIDPDesc, AddOrgJWTIDPRequest.fromPartial(request), metadata);
  }

  DeactivateOrgIDP(
    request: DeepPartial<DeactivateOrgIDPRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateOrgIDPResponse> {
    return this.rpc.unary(
      ManagementServiceDeactivateOrgIDPDesc,
      DeactivateOrgIDPRequest.fromPartial(request),
      metadata,
    );
  }

  ReactivateOrgIDP(
    request: DeepPartial<ReactivateOrgIDPRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateOrgIDPResponse> {
    return this.rpc.unary(
      ManagementServiceReactivateOrgIDPDesc,
      ReactivateOrgIDPRequest.fromPartial(request),
      metadata,
    );
  }

  RemoveOrgIDP(request: DeepPartial<RemoveOrgIDPRequest>, metadata?: grpc.Metadata): Promise<RemoveOrgIDPResponse> {
    return this.rpc.unary(ManagementServiceRemoveOrgIDPDesc, RemoveOrgIDPRequest.fromPartial(request), metadata);
  }

  UpdateOrgIDP(request: DeepPartial<UpdateOrgIDPRequest>, metadata?: grpc.Metadata): Promise<UpdateOrgIDPResponse> {
    return this.rpc.unary(ManagementServiceUpdateOrgIDPDesc, UpdateOrgIDPRequest.fromPartial(request), metadata);
  }

  UpdateOrgIDPOIDCConfig(
    request: DeepPartial<UpdateOrgIDPOIDCConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOrgIDPOIDCConfigResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateOrgIDPOIDCConfigDesc,
      UpdateOrgIDPOIDCConfigRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateOrgIDPJWTConfig(
    request: DeepPartial<UpdateOrgIDPJWTConfigRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateOrgIDPJWTConfigResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateOrgIDPJWTConfigDesc,
      UpdateOrgIDPJWTConfigRequest.fromPartial(request),
      metadata,
    );
  }

  ListProviders(request: DeepPartial<ListProvidersRequest>, metadata?: grpc.Metadata): Promise<ListProvidersResponse> {
    return this.rpc.unary(ManagementServiceListProvidersDesc, ListProvidersRequest.fromPartial(request), metadata);
  }

  GetProviderByID(
    request: DeepPartial<GetProviderByIDRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetProviderByIDResponse> {
    return this.rpc.unary(ManagementServiceGetProviderByIDDesc, GetProviderByIDRequest.fromPartial(request), metadata);
  }

  AddGenericOAuthProvider(
    request: DeepPartial<AddGenericOAuthProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGenericOAuthProviderResponse> {
    return this.rpc.unary(
      ManagementServiceAddGenericOAuthProviderDesc,
      AddGenericOAuthProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGenericOAuthProvider(
    request: DeepPartial<UpdateGenericOAuthProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGenericOAuthProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateGenericOAuthProviderDesc,
      UpdateGenericOAuthProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGenericOIDCProvider(
    request: DeepPartial<AddGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGenericOIDCProviderResponse> {
    return this.rpc.unary(
      ManagementServiceAddGenericOIDCProviderDesc,
      AddGenericOIDCProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGenericOIDCProvider(
    request: DeepPartial<UpdateGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGenericOIDCProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateGenericOIDCProviderDesc,
      UpdateGenericOIDCProviderRequest.fromPartial(request),
      metadata,
    );
  }

  MigrateGenericOIDCProvider(
    request: DeepPartial<MigrateGenericOIDCProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<MigrateGenericOIDCProviderResponse> {
    return this.rpc.unary(
      ManagementServiceMigrateGenericOIDCProviderDesc,
      MigrateGenericOIDCProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddJWTProvider(
    request: DeepPartial<AddJWTProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddJWTProviderResponse> {
    return this.rpc.unary(ManagementServiceAddJWTProviderDesc, AddJWTProviderRequest.fromPartial(request), metadata);
  }

  UpdateJWTProvider(
    request: DeepPartial<UpdateJWTProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateJWTProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateJWTProviderDesc,
      UpdateJWTProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddAzureADProvider(
    request: DeepPartial<AddAzureADProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddAzureADProviderResponse> {
    return this.rpc.unary(
      ManagementServiceAddAzureADProviderDesc,
      AddAzureADProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateAzureADProvider(
    request: DeepPartial<UpdateAzureADProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateAzureADProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateAzureADProviderDesc,
      UpdateAzureADProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGitHubProvider(
    request: DeepPartial<AddGitHubProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitHubProviderResponse> {
    return this.rpc.unary(
      ManagementServiceAddGitHubProviderDesc,
      AddGitHubProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGitHubProvider(
    request: DeepPartial<UpdateGitHubProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitHubProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateGitHubProviderDesc,
      UpdateGitHubProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGitHubEnterpriseServerProvider(
    request: DeepPartial<AddGitHubEnterpriseServerProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitHubEnterpriseServerProviderResponse> {
    return this.rpc.unary(
      ManagementServiceAddGitHubEnterpriseServerProviderDesc,
      AddGitHubEnterpriseServerProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGitHubEnterpriseServerProvider(
    request: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitHubEnterpriseServerProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateGitHubEnterpriseServerProviderDesc,
      UpdateGitHubEnterpriseServerProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGitLabProvider(
    request: DeepPartial<AddGitLabProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitLabProviderResponse> {
    return this.rpc.unary(
      ManagementServiceAddGitLabProviderDesc,
      AddGitLabProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGitLabProvider(
    request: DeepPartial<UpdateGitLabProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitLabProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateGitLabProviderDesc,
      UpdateGitLabProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGitLabSelfHostedProvider(
    request: DeepPartial<AddGitLabSelfHostedProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGitLabSelfHostedProviderResponse> {
    return this.rpc.unary(
      ManagementServiceAddGitLabSelfHostedProviderDesc,
      AddGitLabSelfHostedProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGitLabSelfHostedProvider(
    request: DeepPartial<UpdateGitLabSelfHostedProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGitLabSelfHostedProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateGitLabSelfHostedProviderDesc,
      UpdateGitLabSelfHostedProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddGoogleProvider(
    request: DeepPartial<AddGoogleProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddGoogleProviderResponse> {
    return this.rpc.unary(
      ManagementServiceAddGoogleProviderDesc,
      AddGoogleProviderRequest.fromPartial(request),
      metadata,
    );
  }

  UpdateGoogleProvider(
    request: DeepPartial<UpdateGoogleProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateGoogleProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateGoogleProviderDesc,
      UpdateGoogleProviderRequest.fromPartial(request),
      metadata,
    );
  }

  AddLDAPProvider(
    request: DeepPartial<AddLDAPProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AddLDAPProviderResponse> {
    return this.rpc.unary(ManagementServiceAddLDAPProviderDesc, AddLDAPProviderRequest.fromPartial(request), metadata);
  }

  UpdateLDAPProvider(
    request: DeepPartial<UpdateLDAPProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<UpdateLDAPProviderResponse> {
    return this.rpc.unary(
      ManagementServiceUpdateLDAPProviderDesc,
      UpdateLDAPProviderRequest.fromPartial(request),
      metadata,
    );
  }

  DeleteProvider(
    request: DeepPartial<DeleteProviderRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeleteProviderResponse> {
    return this.rpc.unary(ManagementServiceDeleteProviderDesc, DeleteProviderRequest.fromPartial(request), metadata);
  }

  ListActions(request: DeepPartial<ListActionsRequest>, metadata?: grpc.Metadata): Promise<ListActionsResponse> {
    return this.rpc.unary(ManagementServiceListActionsDesc, ListActionsRequest.fromPartial(request), metadata);
  }

  GetAction(request: DeepPartial<GetActionRequest>, metadata?: grpc.Metadata): Promise<GetActionResponse> {
    return this.rpc.unary(ManagementServiceGetActionDesc, GetActionRequest.fromPartial(request), metadata);
  }

  CreateAction(request: DeepPartial<CreateActionRequest>, metadata?: grpc.Metadata): Promise<CreateActionResponse> {
    return this.rpc.unary(ManagementServiceCreateActionDesc, CreateActionRequest.fromPartial(request), metadata);
  }

  UpdateAction(request: DeepPartial<UpdateActionRequest>, metadata?: grpc.Metadata): Promise<UpdateActionResponse> {
    return this.rpc.unary(ManagementServiceUpdateActionDesc, UpdateActionRequest.fromPartial(request), metadata);
  }

  DeactivateAction(
    request: DeepPartial<DeactivateActionRequest>,
    metadata?: grpc.Metadata,
  ): Promise<DeactivateActionResponse> {
    return this.rpc.unary(
      ManagementServiceDeactivateActionDesc,
      DeactivateActionRequest.fromPartial(request),
      metadata,
    );
  }

  ReactivateAction(
    request: DeepPartial<ReactivateActionRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ReactivateActionResponse> {
    return this.rpc.unary(
      ManagementServiceReactivateActionDesc,
      ReactivateActionRequest.fromPartial(request),
      metadata,
    );
  }

  DeleteAction(request: DeepPartial<DeleteActionRequest>, metadata?: grpc.Metadata): Promise<DeleteActionResponse> {
    return this.rpc.unary(ManagementServiceDeleteActionDesc, DeleteActionRequest.fromPartial(request), metadata);
  }

  ListFlowTypes(request: DeepPartial<ListFlowTypesRequest>, metadata?: grpc.Metadata): Promise<ListFlowTypesResponse> {
    return this.rpc.unary(ManagementServiceListFlowTypesDesc, ListFlowTypesRequest.fromPartial(request), metadata);
  }

  ListFlowTriggerTypes(
    request: DeepPartial<ListFlowTriggerTypesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListFlowTriggerTypesResponse> {
    return this.rpc.unary(
      ManagementServiceListFlowTriggerTypesDesc,
      ListFlowTriggerTypesRequest.fromPartial(request),
      metadata,
    );
  }

  GetFlow(request: DeepPartial<GetFlowRequest>, metadata?: grpc.Metadata): Promise<GetFlowResponse> {
    return this.rpc.unary(ManagementServiceGetFlowDesc, GetFlowRequest.fromPartial(request), metadata);
  }

  ClearFlow(request: DeepPartial<ClearFlowRequest>, metadata?: grpc.Metadata): Promise<ClearFlowResponse> {
    return this.rpc.unary(ManagementServiceClearFlowDesc, ClearFlowRequest.fromPartial(request), metadata);
  }

  SetTriggerActions(
    request: DeepPartial<SetTriggerActionsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SetTriggerActionsResponse> {
    return this.rpc.unary(
      ManagementServiceSetTriggerActionsDesc,
      SetTriggerActionsRequest.fromPartial(request),
      metadata,
    );
  }
}

export const ManagementServiceDesc = { serviceName: "zitadel.management.v1.ManagementService" };

export const ManagementServiceHealthzDesc: UnaryMethodDefinitionish = {
  methodName: "Healthz",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return HealthzRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = HealthzResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetOIDCInformationDesc: UnaryMethodDefinitionish = {
  methodName: "GetOIDCInformation",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetOIDCInformationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetOIDCInformationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetIAMDesc: UnaryMethodDefinitionish = {
  methodName: "GetIAM",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetIAMRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetIAMResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetSupportedLanguagesDesc: UnaryMethodDefinitionish = {
  methodName: "GetSupportedLanguages",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetSupportedLanguagesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetSupportedLanguagesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetUserByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetUserByID",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetUserByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetUserByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetUserByLoginNameGlobalDesc: UnaryMethodDefinitionish = {
  methodName: "GetUserByLoginNameGlobal",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetUserByLoginNameGlobalRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetUserByLoginNameGlobalResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListUsersDesc: UnaryMethodDefinitionish = {
  methodName: "ListUsers",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListUsersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListUsersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListUserChangesDesc: UnaryMethodDefinitionish = {
  methodName: "ListUserChanges",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListUserChangesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListUserChangesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceIsUserUniqueDesc: UnaryMethodDefinitionish = {
  methodName: "IsUserUnique",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return IsUserUniqueRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = IsUserUniqueResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddHumanUserDesc: UnaryMethodDefinitionish = {
  methodName: "AddHumanUser",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddHumanUserRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddHumanUserResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceImportHumanUserDesc: UnaryMethodDefinitionish = {
  methodName: "ImportHumanUser",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ImportHumanUserRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ImportHumanUserResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddMachineUserDesc: UnaryMethodDefinitionish = {
  methodName: "AddMachineUser",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddMachineUserRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddMachineUserResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeactivateUserDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateUser",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateUserRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateUserResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceReactivateUserDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateUser",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateUserRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateUserResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceLockUserDesc: UnaryMethodDefinitionish = {
  methodName: "LockUser",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return LockUserRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = LockUserResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUnlockUserDesc: UnaryMethodDefinitionish = {
  methodName: "UnlockUser",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UnlockUserRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UnlockUserResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveUserDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveUser",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveUserRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveUserResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateUserNameDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateUserName",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateUserNameRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateUserNameResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetUserMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "SetUserMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetUserMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetUserMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceBulkSetUserMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "BulkSetUserMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return BulkSetUserMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = BulkSetUserMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListUserMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "ListUserMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListUserMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListUserMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetUserMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "GetUserMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetUserMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetUserMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveUserMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveUserMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveUserMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveUserMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceBulkRemoveUserMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "BulkRemoveUserMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return BulkRemoveUserMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = BulkRemoveUserMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetHumanProfileDesc: UnaryMethodDefinitionish = {
  methodName: "GetHumanProfile",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetHumanProfileRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetHumanProfileResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateHumanProfileDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateHumanProfile",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateHumanProfileRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateHumanProfileResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetHumanEmailDesc: UnaryMethodDefinitionish = {
  methodName: "GetHumanEmail",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetHumanEmailRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetHumanEmailResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateHumanEmailDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateHumanEmail",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateHumanEmailRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateHumanEmailResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResendHumanInitializationDesc: UnaryMethodDefinitionish = {
  methodName: "ResendHumanInitialization",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResendHumanInitializationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResendHumanInitializationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResendHumanEmailVerificationDesc: UnaryMethodDefinitionish = {
  methodName: "ResendHumanEmailVerification",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResendHumanEmailVerificationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResendHumanEmailVerificationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetHumanPhoneDesc: UnaryMethodDefinitionish = {
  methodName: "GetHumanPhone",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetHumanPhoneRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetHumanPhoneResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateHumanPhoneDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateHumanPhone",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateHumanPhoneRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateHumanPhoneResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveHumanPhoneDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveHumanPhone",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveHumanPhoneRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveHumanPhoneResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResendHumanPhoneVerificationDesc: UnaryMethodDefinitionish = {
  methodName: "ResendHumanPhoneVerification",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResendHumanPhoneVerificationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResendHumanPhoneVerificationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveHumanAvatarDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveHumanAvatar",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveHumanAvatarRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveHumanAvatarResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetHumanInitialPasswordDesc: UnaryMethodDefinitionish = {
  methodName: "SetHumanInitialPassword",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetHumanInitialPasswordRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetHumanInitialPasswordResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetHumanPasswordDesc: UnaryMethodDefinitionish = {
  methodName: "SetHumanPassword",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetHumanPasswordRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetHumanPasswordResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSendHumanResetPasswordNotificationDesc: UnaryMethodDefinitionish = {
  methodName: "SendHumanResetPasswordNotification",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SendHumanResetPasswordNotificationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SendHumanResetPasswordNotificationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListHumanAuthFactorsDesc: UnaryMethodDefinitionish = {
  methodName: "ListHumanAuthFactors",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListHumanAuthFactorsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListHumanAuthFactorsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveHumanAuthFactorOTPDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveHumanAuthFactorOTP",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveHumanAuthFactorOTPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveHumanAuthFactorOTPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveHumanAuthFactorU2FDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveHumanAuthFactorU2F",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveHumanAuthFactorU2FRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveHumanAuthFactorU2FResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListHumanPasswordlessDesc: UnaryMethodDefinitionish = {
  methodName: "ListHumanPasswordless",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListHumanPasswordlessRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListHumanPasswordlessResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddPasswordlessRegistrationDesc: UnaryMethodDefinitionish = {
  methodName: "AddPasswordlessRegistration",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddPasswordlessRegistrationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddPasswordlessRegistrationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSendPasswordlessRegistrationDesc: UnaryMethodDefinitionish = {
  methodName: "SendPasswordlessRegistration",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SendPasswordlessRegistrationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SendPasswordlessRegistrationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveHumanPasswordlessDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveHumanPasswordless",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveHumanPasswordlessRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveHumanPasswordlessResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateMachineDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateMachine",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateMachineRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateMachineResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGenerateMachineSecretDesc: UnaryMethodDefinitionish = {
  methodName: "GenerateMachineSecret",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GenerateMachineSecretRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GenerateMachineSecretResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveMachineSecretDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveMachineSecret",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveMachineSecretRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveMachineSecretResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetMachineKeyByIDsDesc: UnaryMethodDefinitionish = {
  methodName: "GetMachineKeyByIDs",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetMachineKeyByIDsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetMachineKeyByIDsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListMachineKeysDesc: UnaryMethodDefinitionish = {
  methodName: "ListMachineKeys",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListMachineKeysRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListMachineKeysResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddMachineKeyDesc: UnaryMethodDefinitionish = {
  methodName: "AddMachineKey",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddMachineKeyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddMachineKeyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveMachineKeyDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveMachineKey",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveMachineKeyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveMachineKeyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetPersonalAccessTokenByIDsDesc: UnaryMethodDefinitionish = {
  methodName: "GetPersonalAccessTokenByIDs",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPersonalAccessTokenByIDsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPersonalAccessTokenByIDsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListPersonalAccessTokensDesc: UnaryMethodDefinitionish = {
  methodName: "ListPersonalAccessTokens",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListPersonalAccessTokensRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListPersonalAccessTokensResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddPersonalAccessTokenDesc: UnaryMethodDefinitionish = {
  methodName: "AddPersonalAccessToken",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddPersonalAccessTokenRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddPersonalAccessTokenResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemovePersonalAccessTokenDesc: UnaryMethodDefinitionish = {
  methodName: "RemovePersonalAccessToken",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemovePersonalAccessTokenRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemovePersonalAccessTokenResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListHumanLinkedIDPsDesc: UnaryMethodDefinitionish = {
  methodName: "ListHumanLinkedIDPs",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListHumanLinkedIDPsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListHumanLinkedIDPsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveHumanLinkedIDPDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveHumanLinkedIDP",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveHumanLinkedIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveHumanLinkedIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListUserMembershipsDesc: UnaryMethodDefinitionish = {
  methodName: "ListUserMemberships",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListUserMembershipsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListUserMembershipsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetMyOrgDesc: UnaryMethodDefinitionish = {
  methodName: "GetMyOrg",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetMyOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetMyOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetOrgByDomainGlobalDesc: UnaryMethodDefinitionish = {
  methodName: "GetOrgByDomainGlobal",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetOrgByDomainGlobalRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetOrgByDomainGlobalResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListOrgChangesDesc: UnaryMethodDefinitionish = {
  methodName: "ListOrgChanges",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListOrgChangesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListOrgChangesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddOrgDesc: UnaryMethodDefinitionish = {
  methodName: "AddOrg",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateOrgDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateOrg",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeactivateOrgDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateOrg",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceReactivateOrgDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateOrg",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveOrgDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveOrg",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveOrgRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveOrgResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetOrgMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "SetOrgMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetOrgMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetOrgMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceBulkSetOrgMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "BulkSetOrgMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return BulkSetOrgMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = BulkSetOrgMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListOrgMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "ListOrgMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListOrgMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListOrgMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetOrgMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "GetOrgMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetOrgMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetOrgMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveOrgMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveOrgMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveOrgMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveOrgMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceBulkRemoveOrgMetadataDesc: UnaryMethodDefinitionish = {
  methodName: "BulkRemoveOrgMetadata",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return BulkRemoveOrgMetadataRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = BulkRemoveOrgMetadataResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListOrgDomainsDesc: UnaryMethodDefinitionish = {
  methodName: "ListOrgDomains",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListOrgDomainsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListOrgDomainsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddOrgDomainDesc: UnaryMethodDefinitionish = {
  methodName: "AddOrgDomain",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddOrgDomainRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddOrgDomainResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveOrgDomainDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveOrgDomain",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveOrgDomainRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveOrgDomainResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGenerateOrgDomainValidationDesc: UnaryMethodDefinitionish = {
  methodName: "GenerateOrgDomainValidation",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GenerateOrgDomainValidationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GenerateOrgDomainValidationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceValidateOrgDomainDesc: UnaryMethodDefinitionish = {
  methodName: "ValidateOrgDomain",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ValidateOrgDomainRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ValidateOrgDomainResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetPrimaryOrgDomainDesc: UnaryMethodDefinitionish = {
  methodName: "SetPrimaryOrgDomain",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetPrimaryOrgDomainRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetPrimaryOrgDomainResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListOrgMemberRolesDesc: UnaryMethodDefinitionish = {
  methodName: "ListOrgMemberRoles",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListOrgMemberRolesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListOrgMemberRolesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListOrgMembersDesc: UnaryMethodDefinitionish = {
  methodName: "ListOrgMembers",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListOrgMembersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListOrgMembersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddOrgMemberDesc: UnaryMethodDefinitionish = {
  methodName: "AddOrgMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddOrgMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddOrgMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateOrgMemberDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateOrgMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateOrgMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateOrgMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveOrgMemberDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveOrgMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveOrgMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveOrgMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetProjectByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetProjectByID",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetProjectByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetProjectByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetGrantedProjectByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetGrantedProjectByID",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetGrantedProjectByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetGrantedProjectByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectsDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjects",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListGrantedProjectsDesc: UnaryMethodDefinitionish = {
  methodName: "ListGrantedProjects",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListGrantedProjectsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListGrantedProjectsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListGrantedProjectRolesDesc: UnaryMethodDefinitionish = {
  methodName: "ListGrantedProjectRoles",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListGrantedProjectRolesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListGrantedProjectRolesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectChangesDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjectChanges",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectChangesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectChangesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddProjectDesc: UnaryMethodDefinitionish = {
  methodName: "AddProject",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddProjectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddProjectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateProjectDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateProject",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateProjectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateProjectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeactivateProjectDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateProject",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateProjectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateProjectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceReactivateProjectDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateProject",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateProjectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateProjectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveProjectDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveProject",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveProjectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveProjectResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectRolesDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjectRoles",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectRolesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectRolesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddProjectRoleDesc: UnaryMethodDefinitionish = {
  methodName: "AddProjectRole",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddProjectRoleRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddProjectRoleResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceBulkAddProjectRolesDesc: UnaryMethodDefinitionish = {
  methodName: "BulkAddProjectRoles",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return BulkAddProjectRolesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = BulkAddProjectRolesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateProjectRoleDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateProjectRole",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateProjectRoleRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateProjectRoleResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveProjectRoleDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveProjectRole",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveProjectRoleRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveProjectRoleResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectMemberRolesDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjectMemberRoles",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectMemberRolesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectMemberRolesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectMembersDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjectMembers",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectMembersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectMembersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddProjectMemberDesc: UnaryMethodDefinitionish = {
  methodName: "AddProjectMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddProjectMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddProjectMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateProjectMemberDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateProjectMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateProjectMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateProjectMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveProjectMemberDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveProjectMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveProjectMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveProjectMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetAppByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetAppByID",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetAppByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetAppByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListAppsDesc: UnaryMethodDefinitionish = {
  methodName: "ListApps",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListAppsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListAppsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListAppChangesDesc: UnaryMethodDefinitionish = {
  methodName: "ListAppChanges",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListAppChangesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListAppChangesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddOIDCAppDesc: UnaryMethodDefinitionish = {
  methodName: "AddOIDCApp",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddOIDCAppRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddOIDCAppResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddSAMLAppDesc: UnaryMethodDefinitionish = {
  methodName: "AddSAMLApp",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddSAMLAppRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddSAMLAppResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddAPIAppDesc: UnaryMethodDefinitionish = {
  methodName: "AddAPIApp",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddAPIAppRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddAPIAppResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateAppDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateApp",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateAppRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateAppResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateOIDCAppConfigDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateOIDCAppConfig",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateOIDCAppConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateOIDCAppConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateSAMLAppConfigDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateSAMLAppConfig",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateSAMLAppConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateSAMLAppConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateAPIAppConfigDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateAPIAppConfig",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateAPIAppConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateAPIAppConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeactivateAppDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateApp",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateAppRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateAppResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceReactivateAppDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateApp",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateAppRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateAppResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveAppDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveApp",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveAppRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveAppResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRegenerateOIDCClientSecretDesc: UnaryMethodDefinitionish = {
  methodName: "RegenerateOIDCClientSecret",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RegenerateOIDCClientSecretRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RegenerateOIDCClientSecretResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRegenerateAPIClientSecretDesc: UnaryMethodDefinitionish = {
  methodName: "RegenerateAPIClientSecret",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RegenerateAPIClientSecretRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RegenerateAPIClientSecretResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetAppKeyDesc: UnaryMethodDefinitionish = {
  methodName: "GetAppKey",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetAppKeyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetAppKeyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListAppKeysDesc: UnaryMethodDefinitionish = {
  methodName: "ListAppKeys",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListAppKeysRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListAppKeysResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddAppKeyDesc: UnaryMethodDefinitionish = {
  methodName: "AddAppKey",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddAppKeyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddAppKeyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveAppKeyDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveAppKey",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveAppKeyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveAppKeyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectGrantChangesDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjectGrantChanges",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectGrantChangesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectGrantChangesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetProjectGrantByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetProjectGrantByID",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetProjectGrantByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetProjectGrantByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectGrantsDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjectGrants",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectGrantsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectGrantsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListAllProjectGrantsDesc: UnaryMethodDefinitionish = {
  methodName: "ListAllProjectGrants",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListAllProjectGrantsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListAllProjectGrantsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddProjectGrantDesc: UnaryMethodDefinitionish = {
  methodName: "AddProjectGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddProjectGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddProjectGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateProjectGrantDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateProjectGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateProjectGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateProjectGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeactivateProjectGrantDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateProjectGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateProjectGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateProjectGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceReactivateProjectGrantDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateProjectGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateProjectGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateProjectGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveProjectGrantDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveProjectGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveProjectGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveProjectGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectGrantMemberRolesDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjectGrantMemberRoles",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectGrantMemberRolesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectGrantMemberRolesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProjectGrantMembersDesc: UnaryMethodDefinitionish = {
  methodName: "ListProjectGrantMembers",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProjectGrantMembersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProjectGrantMembersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddProjectGrantMemberDesc: UnaryMethodDefinitionish = {
  methodName: "AddProjectGrantMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddProjectGrantMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddProjectGrantMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateProjectGrantMemberDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateProjectGrantMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateProjectGrantMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateProjectGrantMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveProjectGrantMemberDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveProjectGrantMember",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveProjectGrantMemberRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveProjectGrantMemberResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetUserGrantByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetUserGrantByID",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetUserGrantByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetUserGrantByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListUserGrantsDesc: UnaryMethodDefinitionish = {
  methodName: "ListUserGrants",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListUserGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListUserGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddUserGrantDesc: UnaryMethodDefinitionish = {
  methodName: "AddUserGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddUserGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddUserGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateUserGrantDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateUserGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateUserGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateUserGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeactivateUserGrantDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateUserGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateUserGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateUserGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceReactivateUserGrantDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateUserGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateUserGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateUserGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveUserGrantDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveUserGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveUserGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveUserGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceBulkRemoveUserGrantDesc: UnaryMethodDefinitionish = {
  methodName: "BulkRemoveUserGrant",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return BulkRemoveUserGrantRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = BulkRemoveUserGrantResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetOrgIAMPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetOrgIAMPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetOrgIAMPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetOrgIAMPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDomainPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDomainPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDomainPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDomainPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddCustomLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateCustomLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetLoginPolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetLoginPolicyToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetLoginPolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetLoginPolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListLoginPolicyIDPsDesc: UnaryMethodDefinitionish = {
  methodName: "ListLoginPolicyIDPs",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLoginPolicyIDPsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLoginPolicyIDPsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddIDPToLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddIDPToLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddIDPToLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddIDPToLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveIDPFromLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveIDPFromLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveIDPFromLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveIDPFromLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListLoginPolicySecondFactorsDesc: UnaryMethodDefinitionish = {
  methodName: "ListLoginPolicySecondFactors",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLoginPolicySecondFactorsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLoginPolicySecondFactorsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddSecondFactorToLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddSecondFactorToLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddSecondFactorToLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddSecondFactorToLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveSecondFactorFromLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveSecondFactorFromLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveSecondFactorFromLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveSecondFactorFromLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListLoginPolicyMultiFactorsDesc: UnaryMethodDefinitionish = {
  methodName: "ListLoginPolicyMultiFactors",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListLoginPolicyMultiFactorsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListLoginPolicyMultiFactorsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddMultiFactorToLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddMultiFactorToLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddMultiFactorToLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddMultiFactorToLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveMultiFactorFromLoginPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveMultiFactorFromLoginPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveMultiFactorFromLoginPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveMultiFactorFromLoginPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetPasswordComplexityPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetPasswordComplexityPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPasswordComplexityPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPasswordComplexityPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultPasswordComplexityPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPasswordComplexityPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPasswordComplexityPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPasswordComplexityPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddCustomPasswordComplexityPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomPasswordComplexityPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomPasswordComplexityPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomPasswordComplexityPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateCustomPasswordComplexityPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomPasswordComplexityPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomPasswordComplexityPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomPasswordComplexityPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetPasswordComplexityPolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetPasswordComplexityPolicyToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetPasswordComplexityPolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetPasswordComplexityPolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetPasswordAgePolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetPasswordAgePolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPasswordAgePolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPasswordAgePolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultPasswordAgePolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPasswordAgePolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPasswordAgePolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPasswordAgePolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddCustomPasswordAgePolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomPasswordAgePolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomPasswordAgePolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomPasswordAgePolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateCustomPasswordAgePolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomPasswordAgePolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomPasswordAgePolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomPasswordAgePolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetPasswordAgePolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetPasswordAgePolicyToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetPasswordAgePolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetPasswordAgePolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetLockoutPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetLockoutPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLockoutPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLockoutPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultLockoutPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultLockoutPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultLockoutPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultLockoutPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddCustomLockoutPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomLockoutPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomLockoutPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomLockoutPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateCustomLockoutPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomLockoutPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomLockoutPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomLockoutPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetLockoutPolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetLockoutPolicyToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetLockoutPolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetLockoutPolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetPrivacyPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetPrivacyPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPrivacyPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPrivacyPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultPrivacyPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPrivacyPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPrivacyPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPrivacyPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddCustomPrivacyPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomPrivacyPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomPrivacyPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomPrivacyPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateCustomPrivacyPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomPrivacyPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomPrivacyPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomPrivacyPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetPrivacyPolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetPrivacyPolicyToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetPrivacyPolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetPrivacyPolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetNotificationPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetNotificationPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetNotificationPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetNotificationPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultNotificationPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultNotificationPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultNotificationPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultNotificationPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddCustomNotificationPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomNotificationPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomNotificationPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomNotificationPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateCustomNotificationPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomNotificationPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomNotificationPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomNotificationPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetNotificationPolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetNotificationPolicyToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetNotificationPolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetNotificationPolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetLabelPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetPreviewLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetPreviewLabelPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPreviewLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetPreviewLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultLabelPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddCustomLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "AddCustomLabelPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddCustomLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddCustomLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateCustomLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateCustomLabelPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateCustomLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateCustomLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceActivateCustomLabelPolicyDesc: UnaryMethodDefinitionish = {
  methodName: "ActivateCustomLabelPolicy",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ActivateCustomLabelPolicyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ActivateCustomLabelPolicyResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveCustomLabelPolicyLogoDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveCustomLabelPolicyLogo",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveCustomLabelPolicyLogoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveCustomLabelPolicyLogoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveCustomLabelPolicyLogoDarkDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveCustomLabelPolicyLogoDark",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveCustomLabelPolicyLogoDarkRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveCustomLabelPolicyLogoDarkResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveCustomLabelPolicyIconDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveCustomLabelPolicyIcon",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveCustomLabelPolicyIconRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveCustomLabelPolicyIconResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveCustomLabelPolicyIconDarkDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveCustomLabelPolicyIconDark",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveCustomLabelPolicyIconDarkRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveCustomLabelPolicyIconDarkResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveCustomLabelPolicyFontDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveCustomLabelPolicyFont",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveCustomLabelPolicyFontRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveCustomLabelPolicyFontResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetLabelPolicyToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetLabelPolicyToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetLabelPolicyToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetLabelPolicyToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetCustomInitMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomInitMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomInitMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomInitMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultInitMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultInitMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultInitMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultInitMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetCustomInitMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomInitMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomInitMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomInitMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetCustomInitMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomInitMessageTextToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomInitMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomInitMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetCustomPasswordResetMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomPasswordResetMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomPasswordResetMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomPasswordResetMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultPasswordResetMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPasswordResetMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPasswordResetMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPasswordResetMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetCustomPasswordResetMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomPasswordResetMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomPasswordResetMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomPasswordResetMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetCustomPasswordResetMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomPasswordResetMessageTextToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomPasswordResetMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomPasswordResetMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetCustomVerifyEmailMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomVerifyEmailMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomVerifyEmailMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomVerifyEmailMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultVerifyEmailMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultVerifyEmailMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultVerifyEmailMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultVerifyEmailMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetCustomVerifyEmailMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomVerifyEmailMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomVerifyEmailMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomVerifyEmailMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetCustomVerifyEmailMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomVerifyEmailMessageTextToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomVerifyEmailMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomVerifyEmailMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetCustomVerifyPhoneMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomVerifyPhoneMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomVerifyPhoneMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomVerifyPhoneMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultVerifyPhoneMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultVerifyPhoneMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultVerifyPhoneMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultVerifyPhoneMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetCustomVerifyPhoneMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomVerifyPhoneMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomVerifyPhoneMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomVerifyPhoneMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetCustomVerifyPhoneMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomVerifyPhoneMessageTextToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomVerifyPhoneMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomVerifyPhoneMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetCustomDomainClaimedMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomDomainClaimedMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomDomainClaimedMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomDomainClaimedMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultDomainClaimedMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultDomainClaimedMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultDomainClaimedMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultDomainClaimedMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetCustomDomainClaimedMessageCustomTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomDomainClaimedMessageCustomText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomDomainClaimedMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomDomainClaimedMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetCustomDomainClaimedMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomDomainClaimedMessageTextToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomDomainClaimedMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomDomainClaimedMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetCustomPasswordlessRegistrationMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomPasswordlessRegistrationMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomPasswordlessRegistrationMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomPasswordlessRegistrationMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultPasswordlessRegistrationMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPasswordlessRegistrationMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPasswordlessRegistrationMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPasswordlessRegistrationMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetCustomPasswordlessRegistrationMessageCustomTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomPasswordlessRegistrationMessageCustomText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomPasswordlessRegistrationMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomPasswordlessRegistrationMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetCustomPasswordlessRegistrationMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetCustomPasswordChangeMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomPasswordChangeMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomPasswordChangeMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomPasswordChangeMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultPasswordChangeMessageTextDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultPasswordChangeMessageText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultPasswordChangeMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultPasswordChangeMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetCustomPasswordChangeMessageCustomTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomPasswordChangeMessageCustomText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomPasswordChangeMessageTextRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomPasswordChangeMessageTextResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetCustomPasswordChangeMessageTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomPasswordChangeMessageTextToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomPasswordChangeMessageTextToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomPasswordChangeMessageTextToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetCustomLoginTextsDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomLoginTexts",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomLoginTextsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomLoginTextsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetDefaultLoginTextsDesc: UnaryMethodDefinitionish = {
  methodName: "GetDefaultLoginTexts",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetDefaultLoginTextsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetDefaultLoginTextsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetCustomLoginTextDesc: UnaryMethodDefinitionish = {
  methodName: "SetCustomLoginText",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetCustomLoginTextsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetCustomLoginTextsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceResetCustomLoginTextToDefaultDesc: UnaryMethodDefinitionish = {
  methodName: "ResetCustomLoginTextToDefault",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ResetCustomLoginTextsToDefaultRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ResetCustomLoginTextsToDefaultResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetOrgIDPByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetOrgIDPByID",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetOrgIDPByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetOrgIDPByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListOrgIDPsDesc: UnaryMethodDefinitionish = {
  methodName: "ListOrgIDPs",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListOrgIDPsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListOrgIDPsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddOrgOIDCIDPDesc: UnaryMethodDefinitionish = {
  methodName: "AddOrgOIDCIDP",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddOrgOIDCIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddOrgOIDCIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddOrgJWTIDPDesc: UnaryMethodDefinitionish = {
  methodName: "AddOrgJWTIDP",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddOrgJWTIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddOrgJWTIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeactivateOrgIDPDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateOrgIDP",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateOrgIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateOrgIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceReactivateOrgIDPDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateOrgIDP",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateOrgIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateOrgIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceRemoveOrgIDPDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveOrgIDP",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveOrgIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RemoveOrgIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateOrgIDPDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateOrgIDP",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateOrgIDPRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateOrgIDPResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateOrgIDPOIDCConfigDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateOrgIDPOIDCConfig",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateOrgIDPOIDCConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateOrgIDPOIDCConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateOrgIDPJWTConfigDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateOrgIDPJWTConfig",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateOrgIDPJWTConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateOrgIDPJWTConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListProvidersDesc: UnaryMethodDefinitionish = {
  methodName: "ListProviders",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProvidersRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListProvidersResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetProviderByIDDesc: UnaryMethodDefinitionish = {
  methodName: "GetProviderByID",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetProviderByIDRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetProviderByIDResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddGenericOAuthProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGenericOAuthProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGenericOAuthProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGenericOAuthProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateGenericOAuthProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGenericOAuthProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGenericOAuthProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGenericOAuthProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddGenericOIDCProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGenericOIDCProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGenericOIDCProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGenericOIDCProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateGenericOIDCProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGenericOIDCProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGenericOIDCProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGenericOIDCProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceMigrateGenericOIDCProviderDesc: UnaryMethodDefinitionish = {
  methodName: "MigrateGenericOIDCProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MigrateGenericOIDCProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MigrateGenericOIDCProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddJWTProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddJWTProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddJWTProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddJWTProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateJWTProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateJWTProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateJWTProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateJWTProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddAzureADProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddAzureADProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddAzureADProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddAzureADProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateAzureADProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateAzureADProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateAzureADProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateAzureADProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddGitHubProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGitHubProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGitHubProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGitHubProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateGitHubProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGitHubProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGitHubProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGitHubProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddGitHubEnterpriseServerProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGitHubEnterpriseServerProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGitHubEnterpriseServerProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGitHubEnterpriseServerProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateGitHubEnterpriseServerProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGitHubEnterpriseServerProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGitHubEnterpriseServerProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGitHubEnterpriseServerProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddGitLabProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGitLabProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGitLabProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGitLabProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateGitLabProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGitLabProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGitLabProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGitLabProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddGitLabSelfHostedProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGitLabSelfHostedProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGitLabSelfHostedProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGitLabSelfHostedProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateGitLabSelfHostedProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGitLabSelfHostedProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGitLabSelfHostedProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGitLabSelfHostedProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddGoogleProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddGoogleProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddGoogleProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddGoogleProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateGoogleProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateGoogleProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateGoogleProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateGoogleProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceAddLDAPProviderDesc: UnaryMethodDefinitionish = {
  methodName: "AddLDAPProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddLDAPProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AddLDAPProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateLDAPProviderDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateLDAPProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateLDAPProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateLDAPProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeleteProviderDesc: UnaryMethodDefinitionish = {
  methodName: "DeleteProvider",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeleteProviderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeleteProviderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListActionsDesc: UnaryMethodDefinitionish = {
  methodName: "ListActions",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListActionsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListActionsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetActionDesc: UnaryMethodDefinitionish = {
  methodName: "GetAction",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetActionRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetActionResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceCreateActionDesc: UnaryMethodDefinitionish = {
  methodName: "CreateAction",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return CreateActionRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = CreateActionResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceUpdateActionDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateAction",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateActionRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateActionResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeactivateActionDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateAction",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeactivateActionRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeactivateActionResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceReactivateActionDesc: UnaryMethodDefinitionish = {
  methodName: "ReactivateAction",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ReactivateActionRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ReactivateActionResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceDeleteActionDesc: UnaryMethodDefinitionish = {
  methodName: "DeleteAction",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return DeleteActionRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = DeleteActionResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListFlowTypesDesc: UnaryMethodDefinitionish = {
  methodName: "ListFlowTypes",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListFlowTypesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListFlowTypesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceListFlowTriggerTypesDesc: UnaryMethodDefinitionish = {
  methodName: "ListFlowTriggerTypes",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListFlowTriggerTypesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListFlowTriggerTypesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceGetFlowDesc: UnaryMethodDefinitionish = {
  methodName: "GetFlow",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetFlowRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetFlowResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceClearFlowDesc: UnaryMethodDefinitionish = {
  methodName: "ClearFlow",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ClearFlowRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ClearFlowResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const ManagementServiceSetTriggerActionsDesc: UnaryMethodDefinitionish = {
  methodName: "SetTriggerActions",
  service: ManagementServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return SetTriggerActionsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SetTriggerActionsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = date.getTime() / 1_000;
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof Date) {
    return o;
  } else if (typeof o === "string") {
    return new Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
